
kp_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000395e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  0000395e  000039f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800188  00800188  00003b1a  2**0
                  ALLOC
  3 .stab         00003bf4  00000000  00000000  00003b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a80  00000000  00000000  00007710  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00009190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00009350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00009564  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000bb76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000d044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000e350  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000e530  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000e837  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f251  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__vector_10>
      2c:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <main>
      8a:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 76 1c 	jmp	0x38ec	; 0x38ec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 76 1c 	jmp	0x38ec	; 0x38ec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7e 1c 	jmp	0x38fc	; 0x38fc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 9b 1c 	jmp	0x3936	; 0x3936 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 86 1c 	jmp	0x390c	; 0x390c <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 7e 1c 	jmp	0x38fc	; 0x38fc <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <UART_VidInit>:
#include"../../lib/BIT_MATH.h"
#include"../../lib/AVR32_REG.h"
#include "UART_Config.h"
#include "UART_Private.h"
 void UART_VidInit(OP_MODE Copy_mode,BAUD Copy_BaudRate)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	28 97       	sbiw	r28, 0x08	; 8
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	8c 83       	std	Y+4, r24	; 0x04
     f00:	4d 83       	std	Y+5, r20	; 0x05
     f02:	5e 83       	std	Y+6, r21	; 0x06
     f04:	6f 83       	std	Y+7, r22	; 0x07
     f06:	78 87       	std	Y+8, r23	; 0x08
	u8 EMP_Reg;
	u16 Local_UBRR;
	if(Copy_mode==ASYNC_NORM_BD){
     f08:	8c 81       	ldd	r24, Y+4	; 0x04
     f0a:	88 23       	and	r24, r24
     f0c:	21 f5       	brne	.+72     	; 0xf56 <UART_VidInit+0x6c>
		Local_UBRR=(F_CPU/(16*Copy_BaudRate))-1;
     f0e:	8d 81       	ldd	r24, Y+5	; 0x05
     f10:	9e 81       	ldd	r25, Y+6	; 0x06
     f12:	af 81       	ldd	r26, Y+7	; 0x07
     f14:	b8 85       	ldd	r27, Y+8	; 0x08
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	aa 1f       	adc	r26, r26
     f1c:	bb 1f       	adc	r27, r27
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	aa 1f       	adc	r26, r26
     f24:	bb 1f       	adc	r27, r27
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	aa 1f       	adc	r26, r26
     f2c:	bb 1f       	adc	r27, r27
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	aa 1f       	adc	r26, r26
     f34:	bb 1f       	adc	r27, r27
     f36:	9c 01       	movw	r18, r24
     f38:	ad 01       	movw	r20, r26
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	92 e1       	ldi	r25, 0x12	; 18
     f3e:	aa e7       	ldi	r26, 0x7A	; 122
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	0e 94 39 1c 	call	0x3872	; 0x3872 <__udivmodsi4>
     f4a:	da 01       	movw	r26, r20
     f4c:	c9 01       	movw	r24, r18
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	3d c0       	rjmp	.+122    	; 0xfd0 <UART_VidInit+0xe6>
	}
	else if(Copy_mode==ASYNC_NORM_BD){
     f56:	8c 81       	ldd	r24, Y+4	; 0x04
     f58:	88 23       	and	r24, r24
     f5a:	01 f5       	brne	.+64     	; 0xf9c <UART_VidInit+0xb2>
		Local_UBRR=(F_CPU/(8*Copy_BaudRate))-1;
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	9e 81       	ldd	r25, Y+6	; 0x06
     f60:	af 81       	ldd	r26, Y+7	; 0x07
     f62:	b8 85       	ldd	r27, Y+8	; 0x08
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	aa 1f       	adc	r26, r26
     f6a:	bb 1f       	adc	r27, r27
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	aa 1f       	adc	r26, r26
     f72:	bb 1f       	adc	r27, r27
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	aa 1f       	adc	r26, r26
     f7a:	bb 1f       	adc	r27, r27
     f7c:	9c 01       	movw	r18, r24
     f7e:	ad 01       	movw	r20, r26
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	92 e1       	ldi	r25, 0x12	; 18
     f84:	aa e7       	ldi	r26, 0x7A	; 122
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	bc 01       	movw	r22, r24
     f8a:	cd 01       	movw	r24, r26
     f8c:	0e 94 39 1c 	call	0x3872	; 0x3872 <__udivmodsi4>
     f90:	da 01       	movw	r26, r20
     f92:	c9 01       	movw	r24, r18
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	1a c0       	rjmp	.+52     	; 0xfd0 <UART_VidInit+0xe6>
	}
	else if(Copy_mode==SYNC_MTR){
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	82 30       	cpi	r24, 0x02	; 2
     fa0:	b9 f4       	brne	.+46     	; 0xfd0 <UART_VidInit+0xe6>
		Local_UBRR=(F_CPU/(2*Copy_BaudRate))-1;
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	af 81       	ldd	r26, Y+7	; 0x07
     fa8:	b8 85       	ldd	r27, Y+8	; 0x08
     faa:	9c 01       	movw	r18, r24
     fac:	ad 01       	movw	r20, r26
     fae:	22 0f       	add	r18, r18
     fb0:	33 1f       	adc	r19, r19
     fb2:	44 1f       	adc	r20, r20
     fb4:	55 1f       	adc	r21, r21
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	92 e1       	ldi	r25, 0x12	; 18
     fba:	aa e7       	ldi	r26, 0x7A	; 122
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	bc 01       	movw	r22, r24
     fc0:	cd 01       	movw	r24, r26
     fc2:	0e 94 39 1c 	call	0x3872	; 0x3872 <__udivmodsi4>
     fc6:	da 01       	movw	r26, r20
     fc8:	c9 01       	movw	r24, r18
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	9a 83       	std	Y+2, r25	; 0x02
     fce:	89 83       	std	Y+1, r24	; 0x01
	}



	/* Set baud rate first 8 bits in UBRRL & the last 4 bits in UBRRH*/
	UBRRH = Local_UBRR>>8;
     fd0:	e0 e4       	ldi	r30, 0x40	; 64
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	89 2f       	mov	r24, r25
     fda:	99 27       	eor	r25, r25
     fdc:	80 83       	st	Z, r24
	UBRRL = Local_UBRR;
     fde:	e9 e2       	ldi	r30, 0x29	; 41
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	80 83       	st	Z, r24
	/* Enable receiver and transmitter and set char size*/
	//UCSRB = (EN<<RXEN)|(EN<<TXEN)|((CHAR_SiZE>>2)<<UCSZ2);
#if RXC_INT==EN
	SET_BIT(UCSRB,RXCIE);
#elif RXC_INT==DISABLE
	CLR_BIT(UCSRB,RXCIE);
     fe6:	aa e2       	ldi	r26, 0x2A	; 42
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ea e2       	ldi	r30, 0x2A	; 42
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8f 77       	andi	r24, 0x7F	; 127
     ff2:	8c 93       	st	X, r24
#endif
#if TXC_INT==EN
	SET_BIT(UCSRB,TXCIE);
#elif TXC_INT==DISABLE
	CLR_BIT(UCSRB,TXCIE);
     ff4:	aa e2       	ldi	r26, 0x2A	; 42
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	ea e2       	ldi	r30, 0x2A	; 42
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	8f 7b       	andi	r24, 0xBF	; 191
    1000:	8c 93       	st	X, r24
#endif
#if R_EN==EN
	SET_BIT(UCSRB,RXEN);
    1002:	aa e2       	ldi	r26, 0x2A	; 42
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	ea e2       	ldi	r30, 0x2A	; 42
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	80 61       	ori	r24, 0x10	; 16
    100e:	8c 93       	st	X, r24
#elif R_EN==DISABLE
	CLR_BIT(UCSRB,RXEN);
#endif
#if T_EN==EN
	SET_BIT(UCSRB,TXEN);
    1010:	aa e2       	ldi	r26, 0x2A	; 42
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	ea e2       	ldi	r30, 0x2A	; 42
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	88 60       	ori	r24, 0x08	; 8
    101c:	8c 93       	st	X, r24
#elif T_EN==DISABLE
	CLR_BIT(UCSRB,TXEN);
#endif
	UCSRB|=((CHAR_SiZE>>2)<<UCSZ2);
    101e:	aa e2       	ldi	r26, 0x2A	; 42
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	ea e2       	ldi	r30, 0x2A	; 42
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	8c 93       	st	X, r24

	/* Set frame format: 8data, 1stop bit,char size */
	//	TO WRITE ON  UCSRC
	SET_BIT(EMP_Reg,URSEL);
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	80 68       	ori	r24, 0x80	; 128
    102e:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(EMP_Reg,UCPOL);
#elif CLOCK_POL==FALLTX_RISRX
	SET_BIT(EMP_Reg,UCPOL);
#endif
#elif MODE_SEL==ASYNC
	CLR_BIT(EMP_Reg,UMSEL);
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	8f 7b       	andi	r24, 0xBF	; 191
    1034:	8b 83       	std	Y+3, r24	; 0x03
	// SET PARITY MODE
	EMP_Reg|=(PARITY_MODE<<UPM0);
#if STOP_BIT==TWO_BIT
	SET_BIT(EMP_Reg,USBS);
#elif STOP_BIT==ONE_BIT
	CLR_BIT(EMP_Reg,USBS);
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	87 7f       	andi	r24, 0xF7	; 247
    103a:	8b 83       	std	Y+3, r24	; 0x03
#endif
	EMP_Reg|=((CHAR_SiZE&SEL2BITS)<<UCSZ0);
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	86 60       	ori	r24, 0x06	; 6
    1040:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC=EMP_Reg;
    1042:	e0 e4       	ldi	r30, 0x40	; 64
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	80 83       	st	Z, r24
	//UCSRC = (1<<REG_SEL_BIT)|((CHAR_SiZE&3)<<UCSZ0);
}
    104a:	28 96       	adiw	r28, 0x08	; 8
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <UART_VidSend>:



void UART_VidSend(u16 Copy_U8Data)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	00 d0       	rcall	.+0      	; 0x1062 <UART_VidSend+0x6>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	9a 83       	std	Y+2, r25	; 0x02
    1068:	89 83       	std	Y+1, r24	; 0x01
#if CHAR_SiZE==CH_S_9BIT
	UCSRB|=(((Copy_U8Data>>8)&1)<<TXB8);
#endif
	while(!GET_BIT(UCSRA,UDRE));
    106a:	eb e2       	ldi	r30, 0x2B	; 43
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	82 95       	swap	r24
    1072:	86 95       	lsr	r24
    1074:	87 70       	andi	r24, 0x07	; 7
    1076:	88 23       	and	r24, r24
    1078:	c1 f3       	breq	.-16     	; 0x106a <UART_VidSend+0xe>
	UDR=Copy_U8Data;
    107a:	ec e2       	ldi	r30, 0x2C	; 44
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	80 83       	st	Z, r24
}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <UART_VidReceive>:
u16 UART_VidReceive()
{	u16 Local_U8Value=0;
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	00 d0       	rcall	.+0      	; 0x1092 <UART_VidReceive+0x6>
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	1a 82       	std	Y+2, r1	; 0x02
    1098:	19 82       	std	Y+1, r1	; 0x01
#if CHAR_SiZE==CH_S_9BIT
Local_U8Value|=(GET_BIT(UCSRB,RXB8)<<8);
#endif
while(!GET_BIT(UCSRA,RXC));
    109a:	eb e2       	ldi	r30, 0x2B	; 43
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	88 23       	and	r24, r24
    10a2:	dc f7       	brge	.-10     	; 0x109a <UART_VidReceive+0xe>
Local_U8Value|=UDR;
    10a4:	ec e2       	ldi	r30, 0x2C	; 44
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
    10b2:	82 2b       	or	r24, r18
    10b4:	93 2b       	or	r25, r19
    10b6:	9a 83       	std	Y+2, r25	; 0x02
    10b8:	89 83       	std	Y+1, r24	; 0x01
return Local_U8Value;
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <Timer0_VidInit>:

u8 Global_U8Preload,Global_U8Counter;
/***********************************************************************************************
 * 								INITIATE TIME 0
 * *********************************************************************************************/
void Timer0_VidInit(u8 Copy_U8Mode){
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	0f 92       	push	r0
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	89 83       	std	Y+1, r24	; 0x01

	//select mode & oc0 state
	if (Copy_U8Mode == OVER_FLOW){
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	88 23       	and	r24, r24
    10d8:	79 f4       	brne	.+30     	; 0x10f8 <Timer0_VidInit+0x30>
		CLR_BIT(TCCR0,3);
    10da:	a3 e5       	ldi	r26, 0x53	; 83
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e3 e5       	ldi	r30, 0x53	; 83
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	87 7f       	andi	r24, 0xF7	; 247
    10e6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,6);
    10e8:	a3 e5       	ldi	r26, 0x53	; 83
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e3 e5       	ldi	r30, 0x53	; 83
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	8f 7b       	andi	r24, 0xBF	; 191
    10f4:	8c 93       	st	X, r24
    10f6:	4a c0       	rjmp	.+148    	; 0x118c <Timer0_VidInit+0xc4>
#if TIMER_OC0STATE==OC_DISCONNECT
		TCCR0|=(OC_DISCONNECT<<COM00);
#endif
	}else if (Copy_U8Mode == CTC){
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	b1 f4       	brne	.+44     	; 0x112a <Timer0_VidInit+0x62>
		SET_BIT(TCCR0,WGM01);
    10fe:	a3 e5       	ldi	r26, 0x53	; 83
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e3 e5       	ldi	r30, 0x53	; 83
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	88 60       	ori	r24, 0x08	; 8
    110a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM00);
    110c:	a3 e5       	ldi	r26, 0x53	; 83
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e3 e5       	ldi	r30, 0x53	; 83
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8f 7b       	andi	r24, 0xBF	; 191
    1118:	8c 93       	st	X, r24
#if TIMER_OC0STATE==OC_DISCONNECT
		TCCR0|=(OC_DISCONNECT<<COM00);
#elif TIMER_OC0STATE==OC_TOGGLE
		TCCR0|=(OC_TOGGLE<<COM00);
#elif TIMER_OC0STATE==OC_CLEARTOP
		TCCR0|=(OC_CLEARTOP<<COM00);
    111a:	a3 e5       	ldi	r26, 0x53	; 83
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e3 e5       	ldi	r30, 0x53	; 83
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	80 62       	ori	r24, 0x20	; 32
    1126:	8c 93       	st	X, r24
    1128:	31 c0       	rjmp	.+98     	; 0x118c <Timer0_VidInit+0xc4>
#elif TIMER_OC0STATE==OC_SETTOP
		TCCR0|=(OC_SETTOP<<COM00);
#endif
	}else if( Copy_U8Mode == FAST_PWM){
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	82 30       	cpi	r24, 0x02	; 2
    112e:	b1 f4       	brne	.+44     	; 0x115c <Timer0_VidInit+0x94>
		SET_BIT(TCCR0,WGM01);
    1130:	a3 e5       	ldi	r26, 0x53	; 83
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e3 e5       	ldi	r30, 0x53	; 83
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	88 60       	ori	r24, 0x08	; 8
    113c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM00);
    113e:	a3 e5       	ldi	r26, 0x53	; 83
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e3 e5       	ldi	r30, 0x53	; 83
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	80 64       	ori	r24, 0x40	; 64
    114a:	8c 93       	st	X, r24
#if TIMER_OC0STATE==OC_CLEARTOP
		TCCR0|=(OC_CLEARTOP<<COM00);
    114c:	a3 e5       	ldi	r26, 0x53	; 83
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e3 e5       	ldi	r30, 0x53	; 83
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	80 62       	ori	r24, 0x20	; 32
    1158:	8c 93       	st	X, r24
    115a:	18 c0       	rjmp	.+48     	; 0x118c <Timer0_VidInit+0xc4>
#elif TIMER_OCSTATE==OC_SETTOP
		TCCR0|=(OC_SETTOP<<COM00);
#endif
	}else if( Copy_U8Mode == PWM_PHASE_CORRECT){
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	83 30       	cpi	r24, 0x03	; 3
    1160:	a9 f4       	brne	.+42     	; 0x118c <Timer0_VidInit+0xc4>
		CLR_BIT(TCCR0,WGM01);
    1162:	a3 e5       	ldi	r26, 0x53	; 83
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e3 e5       	ldi	r30, 0x53	; 83
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	87 7f       	andi	r24, 0xF7	; 247
    116e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM00);
    1170:	a3 e5       	ldi	r26, 0x53	; 83
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e3 e5       	ldi	r30, 0x53	; 83
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	80 64       	ori	r24, 0x40	; 64
    117c:	8c 93       	st	X, r24
#if TIMER_OC0STATE==OC_CLEARTOP
		TCCR0|=(OC_CLEARTOP<<COM00);
    117e:	a3 e5       	ldi	r26, 0x53	; 83
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e3 e5       	ldi	r30, 0x53	; 83
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	80 62       	ori	r24, 0x20	; 32
    118a:	8c 93       	st	X, r24
#elif TIMER_OC0STATE==OC_SETTOP
		TCCR0|=(OC_SETTOP<<COM00);
#endif
		}

	}
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <Timer0_VidPrescaller>:

void Timer0_VidPrescaller( u8 Copy_U8Prescaller){
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	0f 92       	push	r0
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	89 83       	std	Y+1, r24	; 0x01

	TCCR0&= 0XF8;
    11a0:	a3 e5       	ldi	r26, 0x53	; 83
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e3 e5       	ldi	r30, 0x53	; 83
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	88 7f       	andi	r24, 0xF8	; 248
    11ac:	8c 93       	st	X, r24
	TCCR0 |=Copy_U8Prescaller;
    11ae:	a3 e5       	ldi	r26, 0x53	; 83
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e3 e5       	ldi	r30, 0x53	; 83
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	90 81       	ld	r25, Z
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	89 2b       	or	r24, r25
    11bc:	8c 93       	st	X, r24

}
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <Timer0_VidPreload>:

void Timer0_VidPreload(u8 Copy_U8PreloadValue)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	0f 92       	push	r0
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	89 83       	std	Y+1, r24	; 0x01
	TCNTO=Copy_U8PreloadValue;
    11d2:	e2 e5       	ldi	r30, 0x52	; 82
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	80 83       	st	Z, r24
}
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <OverFlowTimer0_VidInit>:

void OverFlowTimer0_VidInit( u8 Copy_U8Prescaller,u8 Copy_U8DesireTime_ms)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	2b 97       	sbiw	r28, 0x0b	; 11
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	8a 87       	std	Y+10, r24	; 0x0a
    11f8:	6b 87       	std	Y+11, r22	; 0x0b
	f32 Local_f32OVT=TOV,Local_f32Counter;
    11fa:	8d eb       	ldi	r24, 0xBD	; 189
    11fc:	97 e3       	ldi	r25, 0x37	; 55
    11fe:	a6 e0       	ldi	r26, 0x06	; 6
    1200:	b8 e3       	ldi	r27, 0x38	; 56
    1202:	8e 83       	std	Y+6, r24	; 0x06
    1204:	9f 83       	std	Y+7, r25	; 0x07
    1206:	a8 87       	std	Y+8, r26	; 0x08
    1208:	b9 87       	std	Y+9, r27	; 0x09
	u8 Local_U8Counts;
	Timer0_VidInit(OVER_FLOW);
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <Timer0_VidInit>
	Timer0_VidPrescaller( Copy_U8Prescaller);
    1210:	8a 85       	ldd	r24, Y+10	; 0x0a
    1212:	0e 94 ca 08 	call	0x1194	; 0x1194 <Timer0_VidPrescaller>
	if(Copy_U8Prescaller==PS_8){
    1216:	8a 85       	ldd	r24, Y+10	; 0x0a
    1218:	82 30       	cpi	r24, 0x02	; 2
    121a:	89 f4       	brne	.+34     	; 0x123e <OverFlowTimer0_VidInit+0x5c>
		Local_f32OVT*=8;
    121c:	6e 81       	ldd	r22, Y+6	; 0x06
    121e:	7f 81       	ldd	r23, Y+7	; 0x07
    1220:	88 85       	ldd	r24, Y+8	; 0x08
    1222:	99 85       	ldd	r25, Y+9	; 0x09
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	51 e4       	ldi	r21, 0x41	; 65
    122c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	8e 83       	std	Y+6, r24	; 0x06
    1236:	9f 83       	std	Y+7, r25	; 0x07
    1238:	a8 87       	std	Y+8, r26	; 0x08
    123a:	b9 87       	std	Y+9, r27	; 0x09
    123c:	3b c0       	rjmp	.+118    	; 0x12b4 <OverFlowTimer0_VidInit+0xd2>
	}
	else if(Copy_U8Prescaller==PS_64){
    123e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	89 f4       	brne	.+34     	; 0x1266 <OverFlowTimer0_VidInit+0x84>
		Local_f32OVT*=64;
    1244:	6e 81       	ldd	r22, Y+6	; 0x06
    1246:	7f 81       	ldd	r23, Y+7	; 0x07
    1248:	88 85       	ldd	r24, Y+8	; 0x08
    124a:	99 85       	ldd	r25, Y+9	; 0x09
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e8       	ldi	r20, 0x80	; 128
    1252:	52 e4       	ldi	r21, 0x42	; 66
    1254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	8e 83       	std	Y+6, r24	; 0x06
    125e:	9f 83       	std	Y+7, r25	; 0x07
    1260:	a8 87       	std	Y+8, r26	; 0x08
    1262:	b9 87       	std	Y+9, r27	; 0x09
    1264:	27 c0       	rjmp	.+78     	; 0x12b4 <OverFlowTimer0_VidInit+0xd2>
	}
	else if(Copy_U8Prescaller==PS_256){
    1266:	8a 85       	ldd	r24, Y+10	; 0x0a
    1268:	84 30       	cpi	r24, 0x04	; 4
    126a:	89 f4       	brne	.+34     	; 0x128e <OverFlowTimer0_VidInit+0xac>
		Local_f32OVT*=256;
    126c:	6e 81       	ldd	r22, Y+6	; 0x06
    126e:	7f 81       	ldd	r23, Y+7	; 0x07
    1270:	88 85       	ldd	r24, Y+8	; 0x08
    1272:	99 85       	ldd	r25, Y+9	; 0x09
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e8       	ldi	r20, 0x80	; 128
    127a:	53 e4       	ldi	r21, 0x43	; 67
    127c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	8e 83       	std	Y+6, r24	; 0x06
    1286:	9f 83       	std	Y+7, r25	; 0x07
    1288:	a8 87       	std	Y+8, r26	; 0x08
    128a:	b9 87       	std	Y+9, r27	; 0x09
    128c:	13 c0       	rjmp	.+38     	; 0x12b4 <OverFlowTimer0_VidInit+0xd2>
	}
	else if(Copy_U8Prescaller==PS_1024){
    128e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1290:	85 30       	cpi	r24, 0x05	; 5
    1292:	81 f4       	brne	.+32     	; 0x12b4 <OverFlowTimer0_VidInit+0xd2>
		Local_f32OVT*=1024;
    1294:	6e 81       	ldd	r22, Y+6	; 0x06
    1296:	7f 81       	ldd	r23, Y+7	; 0x07
    1298:	88 85       	ldd	r24, Y+8	; 0x08
    129a:	99 85       	ldd	r25, Y+9	; 0x09
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e8       	ldi	r20, 0x80	; 128
    12a2:	54 e4       	ldi	r21, 0x44	; 68
    12a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	8e 83       	std	Y+6, r24	; 0x06
    12ae:	9f 83       	std	Y+7, r25	; 0x07
    12b0:	a8 87       	std	Y+8, r26	; 0x08
    12b2:	b9 87       	std	Y+9, r27	; 0x09
	}
	if(Copy_U8DesireTime_ms>Local_f32OVT){
    12b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	aa 27       	eor	r26, r26
    12bc:	97 fd       	sbrc	r25, 7
    12be:	a0 95       	com	r26
    12c0:	ba 2f       	mov	r27, r26
    12c2:	bc 01       	movw	r22, r24
    12c4:	cd 01       	movw	r24, r26
    12c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	bc 01       	movw	r22, r24
    12d0:	cd 01       	movw	r24, r26
    12d2:	2e 81       	ldd	r18, Y+6	; 0x06
    12d4:	3f 81       	ldd	r19, Y+7	; 0x07
    12d6:	48 85       	ldd	r20, Y+8	; 0x08
    12d8:	59 85       	ldd	r21, Y+9	; 0x09
    12da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12de:	18 16       	cp	r1, r24
    12e0:	0c f0       	brlt	.+2      	; 0x12e4 <OverFlowTimer0_VidInit+0x102>
    12e2:	55 c0       	rjmp	.+170    	; 0x138e <OverFlowTimer0_VidInit+0x1ac>
		Local_f32Counter=(f32)(Copy_U8DesireTime_ms/TOV);
    12e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e6:	88 2f       	mov	r24, r24
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	aa 27       	eor	r26, r26
    12ec:	97 fd       	sbrc	r25, 7
    12ee:	a0 95       	com	r26
    12f0:	ba 2f       	mov	r27, r26
    12f2:	bc 01       	movw	r22, r24
    12f4:	cd 01       	movw	r24, r26
    12f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	bc 01       	movw	r22, r24
    1300:	cd 01       	movw	r24, r26
    1302:	2d eb       	ldi	r18, 0xBD	; 189
    1304:	37 e3       	ldi	r19, 0x37	; 55
    1306:	46 e0       	ldi	r20, 0x06	; 6
    1308:	58 e3       	ldi	r21, 0x38	; 56
    130a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	8a 83       	std	Y+2, r24	; 0x02
    1314:	9b 83       	std	Y+3, r25	; 0x03
    1316:	ac 83       	std	Y+4, r26	; 0x04
    1318:	bd 83       	std	Y+5, r27	; 0x05
		Global_U8Counter=(u8)Local_f32Counter+1;
    131a:	6a 81       	ldd	r22, Y+2	; 0x02
    131c:	7b 81       	ldd	r23, Y+3	; 0x03
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	8f 5f       	subi	r24, 0xFF	; 255
    132c:	80 93 95 01 	sts	0x0195, r24
		Local_U8Counts=(u8)(T_OVCOUNTS *(f32)(Local_f32Counter-Global_U8Counter));
    1330:	80 91 95 01 	lds	r24, 0x0195
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	aa 27       	eor	r26, r26
    133a:	97 fd       	sbrc	r25, 7
    133c:	a0 95       	com	r26
    133e:	ba 2f       	mov	r27, r26
    1340:	bc 01       	movw	r22, r24
    1342:	cd 01       	movw	r24, r26
    1344:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1348:	9b 01       	movw	r18, r22
    134a:	ac 01       	movw	r20, r24
    134c:	6a 81       	ldd	r22, Y+2	; 0x02
    134e:	7b 81       	ldd	r23, Y+3	; 0x03
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	9d 81       	ldd	r25, Y+5	; 0x05
    1354:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	bc 01       	movw	r22, r24
    135e:	cd 01       	movw	r24, r26
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e8       	ldi	r20, 0x80	; 128
    1366:	53 e4       	ldi	r21, 0x43	; 67
    1368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	89 83       	std	Y+1, r24	; 0x01
		Global_U8Preload=T_OVCOUNTS -Local_U8Counts;
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	81 95       	neg	r24
    1382:	80 93 96 01 	sts	0x0196, r24
		Timer0_VidPreload(Global_U8Preload);
    1386:	80 91 96 01 	lds	r24, 0x0196
    138a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <Timer0_VidPreload>
	}

	//enable overflow interrupt
	SET_BIT(TIMSK,TOIE0);
    138e:	a9 e5       	ldi	r26, 0x59	; 89
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e9 e5       	ldi	r30, 0x59	; 89
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	81 60       	ori	r24, 0x01	; 1
    139a:	8c 93       	st	X, r24

}
    139c:	2b 96       	adiw	r28, 0x0b	; 11
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <Timer0_VidCTCLimit>:

void Timer0_VidCTCLimit(u8 Copy_U8Limit)
{
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	0f 92       	push	r0
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_U8Limit;
    13ba:	ec e5       	ldi	r30, 0x5C	; 92
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	80 83       	st	Z, r24
}
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <CTCTimer0_VidInit>:

void CTCTimer0_VidInit( u8 Copy_U8Prescaller,u8 Copy_U8DesireTime)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	27 97       	sbiw	r28, 0x07	; 7
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	8e 83       	std	Y+6, r24	; 0x06
    13e0:	6f 83       	std	Y+7, r22	; 0x07
	f32 Local_f32CTCTime=TOV;
    13e2:	8d eb       	ldi	r24, 0xBD	; 189
    13e4:	97 e3       	ldi	r25, 0x37	; 55
    13e6:	a6 e0       	ldi	r26, 0x06	; 6
    13e8:	b8 e3       	ldi	r27, 0x38	; 56
    13ea:	8a 83       	std	Y+2, r24	; 0x02
    13ec:	9b 83       	std	Y+3, r25	; 0x03
    13ee:	ac 83       	std	Y+4, r26	; 0x04
    13f0:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_U8Limit;
	Timer0_VidInit(CTC);
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <Timer0_VidInit>

	Timer0_VidPrescaller( Copy_U8Prescaller);
    13f8:	8e 81       	ldd	r24, Y+6	; 0x06
    13fa:	0e 94 ca 08 	call	0x1194	; 0x1194 <Timer0_VidPrescaller>

	if(Copy_U8Prescaller==PS_8){
    13fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1400:	82 30       	cpi	r24, 0x02	; 2
    1402:	89 f4       	brne	.+34     	; 0x1426 <CTCTimer0_VidInit+0x5c>
		Local_f32CTCTime*=8;
    1404:	6a 81       	ldd	r22, Y+2	; 0x02
    1406:	7b 81       	ldd	r23, Y+3	; 0x03
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
    140a:	9d 81       	ldd	r25, Y+5	; 0x05
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	51 e4       	ldi	r21, 0x41	; 65
    1414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	8a 83       	std	Y+2, r24	; 0x02
    141e:	9b 83       	std	Y+3, r25	; 0x03
    1420:	ac 83       	std	Y+4, r26	; 0x04
    1422:	bd 83       	std	Y+5, r27	; 0x05
    1424:	3b c0       	rjmp	.+118    	; 0x149c <CTCTimer0_VidInit+0xd2>
	}
	else if(Copy_U8Prescaller==PS_64){
    1426:	8e 81       	ldd	r24, Y+6	; 0x06
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	89 f4       	brne	.+34     	; 0x144e <CTCTimer0_VidInit+0x84>
		Local_f32CTCTime*=64;
    142c:	6a 81       	ldd	r22, Y+2	; 0x02
    142e:	7b 81       	ldd	r23, Y+3	; 0x03
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
    1432:	9d 81       	ldd	r25, Y+5	; 0x05
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e8       	ldi	r20, 0x80	; 128
    143a:	52 e4       	ldi	r21, 0x42	; 66
    143c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	8a 83       	std	Y+2, r24	; 0x02
    1446:	9b 83       	std	Y+3, r25	; 0x03
    1448:	ac 83       	std	Y+4, r26	; 0x04
    144a:	bd 83       	std	Y+5, r27	; 0x05
    144c:	27 c0       	rjmp	.+78     	; 0x149c <CTCTimer0_VidInit+0xd2>
	}
	else if(Copy_U8Prescaller==PS_256){
    144e:	8e 81       	ldd	r24, Y+6	; 0x06
    1450:	84 30       	cpi	r24, 0x04	; 4
    1452:	89 f4       	brne	.+34     	; 0x1476 <CTCTimer0_VidInit+0xac>
		Local_f32CTCTime*=256;
    1454:	6a 81       	ldd	r22, Y+2	; 0x02
    1456:	7b 81       	ldd	r23, Y+3	; 0x03
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	9d 81       	ldd	r25, Y+5	; 0x05
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
    1462:	53 e4       	ldi	r21, 0x43	; 67
    1464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	8a 83       	std	Y+2, r24	; 0x02
    146e:	9b 83       	std	Y+3, r25	; 0x03
    1470:	ac 83       	std	Y+4, r26	; 0x04
    1472:	bd 83       	std	Y+5, r27	; 0x05
    1474:	13 c0       	rjmp	.+38     	; 0x149c <CTCTimer0_VidInit+0xd2>
	}
	else if(Copy_U8Prescaller==PS_1024){
    1476:	8e 81       	ldd	r24, Y+6	; 0x06
    1478:	85 30       	cpi	r24, 0x05	; 5
    147a:	81 f4       	brne	.+32     	; 0x149c <CTCTimer0_VidInit+0xd2>
		Local_f32CTCTime*=1024;
    147c:	6a 81       	ldd	r22, Y+2	; 0x02
    147e:	7b 81       	ldd	r23, Y+3	; 0x03
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	9d 81       	ldd	r25, Y+5	; 0x05
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e8       	ldi	r20, 0x80	; 128
    148a:	54 e4       	ldi	r21, 0x44	; 68
    148c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	8a 83       	std	Y+2, r24	; 0x02
    1496:	9b 83       	std	Y+3, r25	; 0x03
    1498:	ac 83       	std	Y+4, r26	; 0x04
    149a:	bd 83       	std	Y+5, r27	; 0x05
	}

	if(Copy_U8DesireTime< Local_f32CTCTime ){
    149c:	8f 81       	ldd	r24, Y+7	; 0x07
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	aa 27       	eor	r26, r26
    14a4:	97 fd       	sbrc	r25, 7
    14a6:	a0 95       	com	r26
    14a8:	ba 2f       	mov	r27, r26
    14aa:	bc 01       	movw	r22, r24
    14ac:	cd 01       	movw	r24, r26
    14ae:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	bc 01       	movw	r22, r24
    14b8:	cd 01       	movw	r24, r26
    14ba:	2a 81       	ldd	r18, Y+2	; 0x02
    14bc:	3b 81       	ldd	r19, Y+3	; 0x03
    14be:	4c 81       	ldd	r20, Y+4	; 0x04
    14c0:	5d 81       	ldd	r21, Y+5	; 0x05
    14c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14c6:	88 23       	and	r24, r24
    14c8:	64 f5       	brge	.+88     	; 0x1522 <CTCTimer0_VidInit+0x158>
		Local_U8Limit=(Copy_U8DesireTime*255)/Local_f32CTCTime;
    14ca:	8f 81       	ldd	r24, Y+7	; 0x07
    14cc:	48 2f       	mov	r20, r24
    14ce:	50 e0       	ldi	r21, 0x00	; 0
    14d0:	ca 01       	movw	r24, r20
    14d2:	9c 01       	movw	r18, r24
    14d4:	22 0f       	add	r18, r18
    14d6:	33 1f       	adc	r19, r19
    14d8:	c9 01       	movw	r24, r18
    14da:	96 95       	lsr	r25
    14dc:	98 2f       	mov	r25, r24
    14de:	88 27       	eor	r24, r24
    14e0:	97 95       	ror	r25
    14e2:	87 95       	ror	r24
    14e4:	82 1b       	sub	r24, r18
    14e6:	93 0b       	sbc	r25, r19
    14e8:	84 0f       	add	r24, r20
    14ea:	95 1f       	adc	r25, r21
    14ec:	aa 27       	eor	r26, r26
    14ee:	97 fd       	sbrc	r25, 7
    14f0:	a0 95       	com	r26
    14f2:	ba 2f       	mov	r27, r26
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	bc 01       	movw	r22, r24
    1502:	cd 01       	movw	r24, r26
    1504:	2a 81       	ldd	r18, Y+2	; 0x02
    1506:	3b 81       	ldd	r19, Y+3	; 0x03
    1508:	4c 81       	ldd	r20, Y+4	; 0x04
    150a:	5d 81       	ldd	r21, Y+5	; 0x05
    150c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	bc 01       	movw	r22, r24
    1516:	cd 01       	movw	r24, r26
    1518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	89 83       	std	Y+1, r24	; 0x01

	}
	Timer0_VidCTCLimit(Local_f32CTCTime);
    1522:	6a 81       	ldd	r22, Y+2	; 0x02
    1524:	7b 81       	ldd	r23, Y+3	; 0x03
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	9d 81       	ldd	r25, Y+5	; 0x05
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	0e 94 d7 09 	call	0x13ae	; 0x13ae <Timer0_VidCTCLimit>
	SET_BIT(TIMSK,OCIE0);
    1536:	a9 e5       	ldi	r26, 0x59	; 89
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e9 e5       	ldi	r30, 0x59	; 89
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	82 60       	ori	r24, 0x02	; 2
    1542:	8c 93       	st	X, r24
}
    1544:	27 96       	adiw	r28, 0x07	; 7
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <Duty_Cycle_PWM>:



void Duty_Cycle_PWM( u8 Copy_U8Value)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	0f 92       	push	r0
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	89 83       	std	Y+1, r24	; 0x01


#if TIMER_OC0STATE==OC_CLEARTOP
	OCR0=T_OVCOUNTS *(Copy_U8Value/100);
    1562:	ec e5       	ldi	r30, 0x5C	; 92
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	94 e6       	ldi	r25, 0x64	; 100
    156a:	69 2f       	mov	r22, r25
    156c:	0e 94 2d 1c 	call	0x385a	; 0x385a <__udivmodqi4>
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	98 2f       	mov	r25, r24
    1576:	88 27       	eor	r24, r24
    1578:	80 83       	st	Z, r24
#elif TIMER_OC0STATE==OC_SETTOP
	OCR0=T_OVCOUNTS-(T_OVCOUNTS *(Copy_U8Value/100));
#endif


}
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <Duty_Cycle_PHCO>:


void Duty_Cycle_PHCO( u8 Copy_U8Value)
{
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	0f 92       	push	r0
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	89 83       	std	Y+1, r24	; 0x01


#if TIMER_OC0STATE==OC_CLEARTOP
	OCR0=T_PHASECORRECT_COUNTS *(Copy_U8Value/2*100);
    158e:	ec e5       	ldi	r30, 0x5C	; 92
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	86 95       	lsr	r24
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	88 e3       	ldi	r24, 0x38	; 56
    159c:	97 ec       	ldi	r25, 0xC7	; 199
    159e:	ac 01       	movw	r20, r24
    15a0:	24 9f       	mul	r18, r20
    15a2:	c0 01       	movw	r24, r0
    15a4:	25 9f       	mul	r18, r21
    15a6:	90 0d       	add	r25, r0
    15a8:	34 9f       	mul	r19, r20
    15aa:	90 0d       	add	r25, r0
    15ac:	11 24       	eor	r1, r1
    15ae:	80 83       	st	Z, r24
#elif TIMER_OC0STATE==OC_SETTOP
	OCR0=(T_PHASECORRECT_COUNTS/2)-(T_PHASECORRECT_COUNTS *(Copy_U8Value/2*100));
#endif


}
    15b0:	0f 90       	pop	r0
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <PWMTimer0_VidInit>:

/*
 * Timer0_PWMFreqs=F_CPU/(256*PRE_Factor)		EX:	PRE_1=31250 HZ 		,PRE_8=3906.25
 * */
void PWMTimer0_VidInit(u8 Copy_U8Prescaller ,u8 Copy_U8percent)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	00 d0       	rcall	.+0      	; 0x15be <PWMTimer0_VidInit+0x6>
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	6a 83       	std	Y+2, r22	; 0x02
	Timer0_VidInit(FAST_PWM);
    15c6:	82 e0       	ldi	r24, 0x02	; 2
    15c8:	0e 94 64 08 	call	0x10c8	; 0x10c8 <Timer0_VidInit>
	Timer0_VidPrescaller(Copy_U8Prescaller);
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	0e 94 ca 08 	call	0x1194	; 0x1194 <Timer0_VidPrescaller>
	Duty_Cycle_PWM( Copy_U8percent);
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	0e 94 ab 0a 	call	0x1556	; 0x1556 <Duty_Cycle_PWM>

}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <Phase_CorrectTimer0_VidInit>:

void Phase_CorrectTimer0_VidInit(u8 Copy_U8Prescaller ,u8 Copy_U8percent)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <Phase_CorrectTimer0_VidInit+0x6>
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	6a 83       	std	Y+2, r22	; 0x02
	Timer0_VidInit(PWM_PHASE_CORRECT);
    15f0:	83 e0       	ldi	r24, 0x03	; 3
    15f2:	0e 94 64 08 	call	0x10c8	; 0x10c8 <Timer0_VidInit>
	Timer0_VidPrescaller(Copy_U8Prescaller);
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	0e 94 ca 08 	call	0x1194	; 0x1194 <Timer0_VidPrescaller>
	Duty_Cycle_PHCO( Copy_U8percent/2);
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	86 95       	lsr	r24
    1600:	0e 94 c1 0a 	call	0x1582	; 0x1582 <Duty_Cycle_PHCO>

}
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <OV_VidCallback>:


void OV_VidCallback(void (*Copy_PVidCallback)(void*),void * Copy_VoidPtr)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	00 d0       	rcall	.+0      	; 0x1614 <OV_VidCallback+0x6>
    1614:	00 d0       	rcall	.+0      	; 0x1616 <OV_VidCallback+0x8>
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	9a 83       	std	Y+2, r25	; 0x02
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	7c 83       	std	Y+4, r23	; 0x04
    1620:	6b 83       	std	Y+3, r22	; 0x03
	 TIMER0_PVidCallback[0]=Copy_PVidCallback;
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	90 93 89 01 	sts	0x0189, r25
    162a:	80 93 88 01 	sts	0x0188, r24
	 TIMER0_Gptr[0]=Copy_VoidPtr;
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	90 93 8d 01 	sts	0x018D, r25
    1636:	80 93 8c 01 	sts	0x018C, r24
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <CTC_VidCallback>:

void CTC_VidCallback(void (*Copy_PVidCallback)(void*),void * Copy_VoidPtr)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <CTC_VidCallback+0x6>
    164e:	00 d0       	rcall	.+0      	; 0x1650 <CTC_VidCallback+0x8>
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	9a 83       	std	Y+2, r25	; 0x02
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	7c 83       	std	Y+4, r23	; 0x04
    165a:	6b 83       	std	Y+3, r22	; 0x03
	 TIMER0_PVidCallback[1]=Copy_PVidCallback;
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	9a 81       	ldd	r25, Y+2	; 0x02
    1660:	90 93 8b 01 	sts	0x018B, r25
    1664:	80 93 8a 01 	sts	0x018A, r24
		 TIMER0_Gptr[1]=Copy_VoidPtr;
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	90 93 8f 01 	sts	0x018F, r25
    1670:	80 93 8e 01 	sts	0x018E, r24
}
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <__vector_10>:

//			TIMER 0 CTC MODE
void __vector_10(void)
{/*
    1682:	1f 92       	push	r1
    1684:	0f 92       	push	r0
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	0f 92       	push	r0
    168a:	11 24       	eor	r1, r1
    168c:	2f 93       	push	r18
    168e:	3f 93       	push	r19
    1690:	4f 93       	push	r20
    1692:	5f 93       	push	r21
    1694:	6f 93       	push	r22
    1696:	7f 93       	push	r23
    1698:	8f 93       	push	r24
    169a:	9f 93       	push	r25
    169c:	af 93       	push	r26
    169e:	bf 93       	push	r27
    16a0:	ef 93       	push	r30
    16a2:	ff 93       	push	r31
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	else
	{
		counter++;

	}*/
	TIMER0_PVidCallback[1](TIMER0_Gptr[1]);
    16ac:	e0 91 8a 01 	lds	r30, 0x018A
    16b0:	f0 91 8b 01 	lds	r31, 0x018B
    16b4:	80 91 8e 01 	lds	r24, 0x018E
    16b8:	90 91 8f 01 	lds	r25, 0x018F
    16bc:	09 95       	icall
 }
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	ff 91       	pop	r31
    16c4:	ef 91       	pop	r30
    16c6:	bf 91       	pop	r27
    16c8:	af 91       	pop	r26
    16ca:	9f 91       	pop	r25
    16cc:	8f 91       	pop	r24
    16ce:	7f 91       	pop	r23
    16d0:	6f 91       	pop	r22
    16d2:	5f 91       	pop	r21
    16d4:	4f 91       	pop	r20
    16d6:	3f 91       	pop	r19
    16d8:	2f 91       	pop	r18
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	0f 90       	pop	r0
    16e0:	1f 90       	pop	r1
    16e2:	18 95       	reti

000016e4 <__vector_11>:

//			TIMER 0 OVERFLOW MODE
void __vector_11(void)
{
    16e4:	1f 92       	push	r1
    16e6:	0f 92       	push	r0
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	0f 92       	push	r0
    16ec:	11 24       	eor	r1, r1
    16ee:	2f 93       	push	r18
    16f0:	3f 93       	push	r19
    16f2:	4f 93       	push	r20
    16f4:	5f 93       	push	r21
    16f6:	6f 93       	push	r22
    16f8:	7f 93       	push	r23
    16fa:	8f 93       	push	r24
    16fc:	9f 93       	push	r25
    16fe:	af 93       	push	r26
    1700:	bf 93       	push	r27
    1702:	ef 93       	push	r30
    1704:	ff 93       	push	r31
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
	static u8 counter=0;
if (counter==Global_U8Counter)
    170e:	90 91 90 01 	lds	r25, 0x0190
    1712:	80 91 95 01 	lds	r24, 0x0195
    1716:	98 17       	cp	r25, r24
    1718:	81 f4       	brne	.+32     	; 0x173a <__vector_11+0x56>
{	TIMER0_PVidCallback[0](TIMER0_Gptr[0]);
    171a:	e0 91 88 01 	lds	r30, 0x0188
    171e:	f0 91 89 01 	lds	r31, 0x0189
    1722:	80 91 8c 01 	lds	r24, 0x018C
    1726:	90 91 8d 01 	lds	r25, 0x018D
    172a:	09 95       	icall
counter=0;
    172c:	10 92 90 01 	sts	0x0190, r1
Timer0_VidPreload(Global_U8Preload);
    1730:	80 91 96 01 	lds	r24, 0x0196
    1734:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <Timer0_VidPreload>
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <__vector_11+0x60>
}
else
{
	counter++;
    173a:	80 91 90 01 	lds	r24, 0x0190
    173e:	8f 5f       	subi	r24, 0xFF	; 255
    1740:	80 93 90 01 	sts	0x0190, r24

}
}
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	ff 91       	pop	r31
    174a:	ef 91       	pop	r30
    174c:	bf 91       	pop	r27
    174e:	af 91       	pop	r26
    1750:	9f 91       	pop	r25
    1752:	8f 91       	pop	r24
    1754:	7f 91       	pop	r23
    1756:	6f 91       	pop	r22
    1758:	5f 91       	pop	r21
    175a:	4f 91       	pop	r20
    175c:	3f 91       	pop	r19
    175e:	2f 91       	pop	r18
    1760:	0f 90       	pop	r0
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	0f 90       	pop	r0
    1766:	1f 90       	pop	r1
    1768:	18 95       	reti

0000176a <SPI_VidInitMaster>:
#include"../DIO/DIO_Interface.h"
#include "SPI_Private.h"
#include "SPI_Interface.h"
#include "SPI_Config.h"
 void SPI_VidInitMaster(ClkRate Copy_U8ClkRate )
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	0f 92       	push	r0
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	89 83       	std	Y+1, r24	; 0x01
	DIO_VidSetPinDirection(PortB,SS,Output);
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	64 e0       	ldi	r22, 0x04	; 4
    177a:	41 e0       	ldi	r20, 0x01	; 1
    177c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PortB,MOSI,Output);
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	65 e0       	ldi	r22, 0x05	; 5
    1784:	41 e0       	ldi	r20, 0x01	; 1
    1786:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PortB,MISO,Input);
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	66 e0       	ldi	r22, 0x06	; 6
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PortB,SCK,Input);
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	67 e0       	ldi	r22, 0x07	; 7
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <DIO_VidSetPinDirection>

	SPCR=(1<<SPE)|(1<<DORD)|(1<<MSTR);
    179e:	ed e2       	ldi	r30, 0x2D	; 45
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 e7       	ldi	r24, 0x70	; 112
    17a4:	80 83       	st	Z, r24
#if CLOCK_POL==LEADING_RIS
		CLR_BIT(SPCR,CPOL);
    17a6:	ad e2       	ldi	r26, 0x2D	; 45
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	ed e2       	ldi	r30, 0x2D	; 45
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	87 7f       	andi	r24, 0xF7	; 247
    17b2:	8c 93       	st	X, r24
		SET_BIT(SPCR,CPOL);
#endif
#if CLOCK_PHA==LEADING_SAMPLE
		CLR_BIT(SPCR,CPH);
#elif CLOCK_PHA==LEADING_SETUP
		SET_BIT(SPCR,CPH);
    17b4:	ad e2       	ldi	r26, 0x2D	; 45
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	ed e2       	ldi	r30, 0x2D	; 45
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	84 60       	ori	r24, 0x04	; 4
    17c0:	8c 93       	st	X, r24
#endif
	if(Copy_U8ClkRate<DOUBLE_F2){
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	84 30       	cpi	r24, 0x04	; 4
    17c6:	48 f4       	brcc	.+18     	; 0x17da <SPI_VidInitMaster+0x70>
		SPCR|=Copy_U8ClkRate;
    17c8:	ad e2       	ldi	r26, 0x2D	; 45
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	ed e2       	ldi	r30, 0x2D	; 45
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	90 81       	ld	r25, Z
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	89 2b       	or	r24, r25
    17d6:	8c 93       	st	X, r24
    17d8:	11 c0       	rjmp	.+34     	; 0x17fc <SPI_VidInitMaster+0x92>
	}else{
		SPCR|=(Copy_U8ClkRate-DOUBLE_F2);
    17da:	ad e2       	ldi	r26, 0x2D	; 45
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	ed e2       	ldi	r30, 0x2D	; 45
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	98 2f       	mov	r25, r24
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	84 50       	subi	r24, 0x04	; 4
    17ea:	89 2b       	or	r24, r25
    17ec:	8c 93       	st	X, r24
		SET_BIT(SPSR,SPI2X);
    17ee:	ae e2       	ldi	r26, 0x2E	; 46
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	ee e2       	ldi	r30, 0x2E	; 46
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	81 60       	ori	r24, 0x01	; 1
    17fa:	8c 93       	st	X, r24
	}

}
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <SPI_VidInitSlave>:

void SPI_VidInitSlave(ClkRate Copy_U8ClkRate)
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	0f 92       	push	r0
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	89 83       	std	Y+1, r24	; 0x01
	DIO_VidSetPinDirection(PortB, SS ,Input);
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	64 e0       	ldi	r22, 0x04	; 4
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PortB, MOSI ,Input);
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	65 e0       	ldi	r22, 0x05	; 5
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PortB, MISO ,Output);
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	66 e0       	ldi	r22, 0x06	; 6
    1828:	41 e0       	ldi	r20, 0x01	; 1
    182a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PortB, SCK  ,Input);
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	67 e0       	ldi	r22, 0x07	; 7
    1832:	40 e0       	ldi	r20, 0x00	; 0
    1834:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <DIO_VidSetPinDirection>

	SPCR=(1<<SPE)|(1<<DORD);
    1838:	ed e2       	ldi	r30, 0x2D	; 45
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 e6       	ldi	r24, 0x60	; 96
    183e:	80 83       	st	Z, r24
	#if CLOCK_POL==LEADING_RIS
			CLR_BIT(SPCR,CPOL);
    1840:	ad e2       	ldi	r26, 0x2D	; 45
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	ed e2       	ldi	r30, 0x2D	; 45
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	87 7f       	andi	r24, 0xF7	; 247
    184c:	8c 93       	st	X, r24
			SET_BIT(SPCR,CPOL);
	#endif
	#if CLOCK_PHA==LEADING_SAMPLE
			CLR_BIT(SPCR,CPH);
	#elif CLOCK_PHA==LEADING_SETUP
			SET_BIT(SPCR,CPH);
    184e:	ad e2       	ldi	r26, 0x2D	; 45
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	ed e2       	ldi	r30, 0x2D	; 45
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	84 60       	ori	r24, 0x04	; 4
    185a:	8c 93       	st	X, r24
	#endif
		if(Copy_U8ClkRate<DOUBLE_F2){
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	84 30       	cpi	r24, 0x04	; 4
    1860:	48 f4       	brcc	.+18     	; 0x1874 <SPI_VidInitSlave+0x70>
			SPCR|=Copy_U8ClkRate;
    1862:	ad e2       	ldi	r26, 0x2D	; 45
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	ed e2       	ldi	r30, 0x2D	; 45
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	90 81       	ld	r25, Z
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	89 2b       	or	r24, r25
    1870:	8c 93       	st	X, r24
    1872:	11 c0       	rjmp	.+34     	; 0x1896 <SPI_VidInitSlave+0x92>
		}else{
			SPCR|=(Copy_U8ClkRate-DOUBLE_F2);
    1874:	ad e2       	ldi	r26, 0x2D	; 45
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	ed e2       	ldi	r30, 0x2D	; 45
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	98 2f       	mov	r25, r24
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	84 50       	subi	r24, 0x04	; 4
    1884:	89 2b       	or	r24, r25
    1886:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
    1888:	ae e2       	ldi	r26, 0x2E	; 46
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	ee e2       	ldi	r30, 0x2E	; 46
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	81 60       	ori	r24, 0x01	; 1
    1894:	8c 93       	st	X, r24
		}

 }
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <SPI_VidSend>:


u8 SPI_VidSend(u8 Copy_U8Data)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	0f 92       	push	r0
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Copy_U8Data;
    18aa:	ef e2       	ldi	r30, 0x2F	; 47
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,SPIF));
    18b2:	ee e2       	ldi	r30, 0x2E	; 46
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	88 23       	and	r24, r24
    18ba:	dc f7       	brge	.-10     	; 0x18b2 <SPI_VidSend+0x14>
	return SPDR;
    18bc:	ef e2       	ldi	r30, 0x2F	; 47
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z

}
    18c2:	0f 90       	pop	r0
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <SPI_VidReceive>:
u8 SPI_VidReceive()
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(SPSR,SPIF));
    18d2:	ee e2       	ldi	r30, 0x2E	; 46
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	88 23       	and	r24, r24
    18da:	dc f7       	brge	.-10     	; 0x18d2 <SPI_VidReceive+0x8>
    return SPDR;
    18dc:	ef e2       	ldi	r30, 0x2F	; 47
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
}
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <Power>:
#include"../../lib/BIT_MATH.h"
#include"../../lib/AVR32_REG.h"
#include "I2C_Private.h"

u8 Power(int base, int exp)
{
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <Power+0x6>
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <Power+0x8>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <Power+0xa>
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	9c 83       	std	Y+4, r25	; 0x04
    18f8:	8b 83       	std	Y+3, r24	; 0x03
    18fa:	7e 83       	std	Y+6, r23	; 0x06
    18fc:	6d 83       	std	Y+5, r22	; 0x05
    int result = 1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	9a 83       	std	Y+2, r25	; 0x02
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	13 c0       	rjmp	.+38     	; 0x192e <Power+0x46>
    while(exp)
    {
        result = result * base;
    1908:	29 81       	ldd	r18, Y+1	; 0x01
    190a:	3a 81       	ldd	r19, Y+2	; 0x02
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	9c 81       	ldd	r25, Y+4	; 0x04
    1910:	ac 01       	movw	r20, r24
    1912:	24 9f       	mul	r18, r20
    1914:	c0 01       	movw	r24, r0
    1916:	25 9f       	mul	r18, r21
    1918:	90 0d       	add	r25, r0
    191a:	34 9f       	mul	r19, r20
    191c:	90 0d       	add	r25, r0
    191e:	11 24       	eor	r1, r1
    1920:	9a 83       	std	Y+2, r25	; 0x02
    1922:	89 83       	std	Y+1, r24	; 0x01
        exp--;
    1924:	8d 81       	ldd	r24, Y+5	; 0x05
    1926:	9e 81       	ldd	r25, Y+6	; 0x06
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	9e 83       	std	Y+6, r25	; 0x06
    192c:	8d 83       	std	Y+5, r24	; 0x05
#include "I2C_Private.h"

u8 Power(int base, int exp)
{
    int result = 1;
    while(exp)
    192e:	8d 81       	ldd	r24, Y+5	; 0x05
    1930:	9e 81       	ldd	r25, Y+6	; 0x06
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	49 f7       	brne	.-46     	; 0x1908 <Power+0x20>
    {
        result = result * base;
        exp--;
    }
    return result;}
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	26 96       	adiw	r28, 0x06	; 6
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <I2C_InitMaster>:

void I2C_InitMaster(u16 Copy_U8Freq,I2C_PRE Copy_U8Prescaller,u8 Copy_U8Address)
{
    194a:	cf 92       	push	r12
    194c:	df 92       	push	r13
    194e:	ef 92       	push	r14
    1950:	ff 92       	push	r15
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <I2C_InitMaster+0x12>
    195c:	00 d0       	rcall	.+0      	; 0x195e <I2C_InitMaster+0x14>
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	6b 83       	std	Y+3, r22	; 0x03
    1968:	4c 83       	std	Y+4, r20	; 0x04

	TWBR= ((F_CPU/Copy_U8Freq)-16)/(2*Power(4,Copy_U8Prescaller));
    196a:	cc 24       	eor	r12, r12
    196c:	dd 24       	eor	r13, r13
    196e:	68 94       	set
    1970:	c5 f8       	bld	r12, 5
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	9a 81       	ldd	r25, Y+2	; 0x02
    1976:	9c 01       	movw	r18, r24
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	92 e1       	ldi	r25, 0x12	; 18
    1980:	aa e7       	ldi	r26, 0x7A	; 122
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	bc 01       	movw	r22, r24
    1986:	cd 01       	movw	r24, r26
    1988:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__divmodsi4>
    198c:	da 01       	movw	r26, r20
    198e:	c9 01       	movw	r24, r18
    1990:	0f 2e       	mov	r0, r31
    1992:	f0 ef       	ldi	r31, 0xF0	; 240
    1994:	ef 2e       	mov	r14, r31
    1996:	ff ef       	ldi	r31, 0xFF	; 255
    1998:	ff 2e       	mov	r15, r31
    199a:	ff ef       	ldi	r31, 0xFF	; 255
    199c:	0f 2f       	mov	r16, r31
    199e:	ff ef       	ldi	r31, 0xFF	; 255
    19a0:	1f 2f       	mov	r17, r31
    19a2:	f0 2d       	mov	r31, r0
    19a4:	e8 0e       	add	r14, r24
    19a6:	f9 1e       	adc	r15, r25
    19a8:	0a 1f       	adc	r16, r26
    19aa:	1b 1f       	adc	r17, r27
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	84 e0       	ldi	r24, 0x04	; 4
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	b9 01       	movw	r22, r18
    19b8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <Power>
    19bc:	88 2f       	mov	r24, r24
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	9c 01       	movw	r18, r24
    19c6:	44 27       	eor	r20, r20
    19c8:	37 fd       	sbrc	r19, 7
    19ca:	40 95       	com	r20
    19cc:	54 2f       	mov	r21, r20
    19ce:	c8 01       	movw	r24, r16
    19d0:	b7 01       	movw	r22, r14
    19d2:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__divmodsi4>
    19d6:	da 01       	movw	r26, r20
    19d8:	c9 01       	movw	r24, r18
    19da:	f6 01       	movw	r30, r12
    19dc:	80 83       	st	Z, r24
 	//TWBR=0X02;
	SET_BIT(TWCR,ACK);
    19de:	a6 e5       	ldi	r26, 0x56	; 86
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e6 e5       	ldi	r30, 0x56	; 86
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	80 64       	ori	r24, 0x40	; 64
    19ea:	8c 93       	st	X, r24
	TWSR|=Copy_U8Prescaller;
    19ec:	a1 e2       	ldi	r26, 0x21	; 33
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e1 e2       	ldi	r30, 0x21	; 33
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	90 81       	ld	r25, Z
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	89 2b       	or	r24, r25
    19fa:	8c 93       	st	X, r24
	TWAR=Copy_U8Address<<1;
    19fc:	e2 e2       	ldi	r30, 0x22	; 34
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	88 0f       	add	r24, r24
    1a04:	80 83       	st	Z, r24


}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	ff 90       	pop	r15
    1a18:	ef 90       	pop	r14
    1a1a:	df 90       	pop	r13
    1a1c:	cf 90       	pop	r12
    1a1e:	08 95       	ret

00001a20 <I2C_InitSlave>:
void I2C_InitSlave(u8 Copy_U8Address)
{
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	0f 92       	push	r0
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	89 83       	std	Y+1, r24	; 0x01
	TWAR=Copy_U8Address<<1;
    1a2c:	e2 e2       	ldi	r30, 0x22	; 34
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	88 0f       	add	r24, r24
    1a34:	80 83       	st	Z, r24


}
    1a36:	0f 90       	pop	r0
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <I2C_VidEnableGeneralCall>:


void I2C_VidEnableGeneralCall()
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWAR,TWGCE);
    1a46:	a2 e2       	ldi	r26, 0x22	; 34
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e2 e2       	ldi	r30, 0x22	; 34
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	81 60       	ori	r24, 0x01	; 1
    1a52:	8c 93       	st	X, r24
}
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <I2C_VidDisableGeneralCall>:

void I2C_VidDisableGeneralCall()
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TWAR,TWGCE);
    1a62:	a2 e2       	ldi	r26, 0x22	; 34
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e2 e2       	ldi	r30, 0x22	; 34
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	8e 7f       	andi	r24, 0xFE	; 254
    1a6e:	8c 93       	st	X, r24
}
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <I2C_Start>:

u8 I2C_Start()
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	0f 92       	push	r0
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
	TWCR|= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1a80:	a6 e5       	ldi	r26, 0x56	; 86
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e6 e5       	ldi	r30, 0x56	; 86
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	84 6a       	ori	r24, 0xA4	; 164
    1a8c:	8c 93       	st	X, r24
	while (!(TWCR & (1<<TWINT)));
    1a8e:	e6 e5       	ldi	r30, 0x56	; 86
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	88 23       	and	r24, r24
    1a96:	dc f7       	brge	.-10     	; 0x1a8e <I2C_Start+0x18>
	if ((TWSR & PSC_STATUS) != START)
    1a98:	e1 e2       	ldi	r30, 0x21	; 33
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	88 2f       	mov	r24, r24
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	88 7f       	andi	r24, 0xF8	; 248
    1aa4:	90 70       	andi	r25, 0x00	; 0
    1aa6:	88 30       	cpi	r24, 0x08	; 8
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	11 f0       	breq	.+4      	; 0x1ab0 <I2C_Start+0x3a>
		return 0;
    1aac:	19 82       	std	Y+1, r1	; 0x01
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <I2C_Start+0x3e>
	return 1;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <I2C_RepeatedStart>:

u8 I2C_RepeatedStart()
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	0f 92       	push	r0
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
	TWCR|= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1ac8:	a6 e5       	ldi	r26, 0x56	; 86
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e6 e5       	ldi	r30, 0x56	; 86
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	84 6a       	ori	r24, 0xA4	; 164
    1ad4:	8c 93       	st	X, r24
	while (!(TWCR & (1<<TWINT)));
    1ad6:	e6 e5       	ldi	r30, 0x56	; 86
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	88 23       	and	r24, r24
    1ade:	dc f7       	brge	.-10     	; 0x1ad6 <I2C_RepeatedStart+0x18>
	if ((TWSR & PSC_STATUS) != REPATED_START)
    1ae0:	e1 e2       	ldi	r30, 0x21	; 33
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	88 7f       	andi	r24, 0xF8	; 248
    1aec:	90 70       	andi	r25, 0x00	; 0
    1aee:	80 31       	cpi	r24, 0x10	; 16
    1af0:	91 05       	cpc	r25, r1
    1af2:	11 f0       	breq	.+4      	; 0x1af8 <I2C_RepeatedStart+0x3a>
		return 0;
    1af4:	19 82       	std	Y+1, r1	; 0x01
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <I2C_RepeatedStart+0x3e>
	return 1;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1afe:	0f 90       	pop	r0
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <I2C_SendAddress>:

u8 I2C_SendAddress(u8 Copy_U8Addresss,u8 Copy_U8RW){
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <I2C_SendAddress+0x6>
    1b0c:	0f 92       	push	r0
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	6a 83       	std	Y+2, r22	; 0x02
	TWDR=(Copy_U8Addresss<<1)|Copy_U8RW;
    1b16:	e3 e2       	ldi	r30, 0x23	; 35
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	98 2f       	mov	r25, r24
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	89 2b       	or	r24, r25
    1b2a:	80 83       	st	Z, r24
	CLR_BIT(TWCR,5);//to clear start bit
    1b2c:	a6 e5       	ldi	r26, 0x56	; 86
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e6 e5       	ldi	r30, 0x56	; 86
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	8f 7d       	andi	r24, 0xDF	; 223
    1b38:	8c 93       	st	X, r24
	TWCR|=(1<<TWINT);//this start send address
    1b3a:	a6 e5       	ldi	r26, 0x56	; 86
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e6 e5       	ldi	r30, 0x56	; 86
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	80 68       	ori	r24, 0x80	; 128
    1b46:	8c 93       	st	X, r24
	while (!(TWCR & (1<<7)));
    1b48:	e6 e5       	ldi	r30, 0x56	; 86
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	88 23       	and	r24, r24
    1b50:	dc f7       	brge	.-10     	; 0x1b48 <I2C_SendAddress+0x42>
	if(((TWSR&PSC_STATUS)==TRANS_ACK)||((TWSR&0xf8)==REC_ACK))
    1b52:	e1 e2       	ldi	r30, 0x21	; 33
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	88 2f       	mov	r24, r24
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	88 7f       	andi	r24, 0xF8	; 248
    1b5e:	90 70       	andi	r25, 0x00	; 0
    1b60:	88 31       	cpi	r24, 0x18	; 24
    1b62:	91 05       	cpc	r25, r1
    1b64:	51 f0       	breq	.+20     	; 0x1b7a <I2C_SendAddress+0x74>
    1b66:	e1 e2       	ldi	r30, 0x21	; 33
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	88 2f       	mov	r24, r24
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	88 7f       	andi	r24, 0xF8	; 248
    1b72:	90 70       	andi	r25, 0x00	; 0
    1b74:	80 34       	cpi	r24, 0x40	; 64
    1b76:	91 05       	cpc	r25, r1
    1b78:	19 f4       	brne	.+6      	; 0x1b80 <I2C_SendAddress+0x7a>
	{
		return 1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	8b 83       	std	Y+3, r24	; 0x03
    1b7e:	01 c0       	rjmp	.+2      	; 0x1b82 <I2C_SendAddress+0x7c>
	}
	return 0;
    1b80:	1b 82       	std	Y+3, r1	; 0x03
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <I2C_U8MasterSend>:

u8 I2C_U8MasterSend(u8 Copy_U8Data){
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <I2C_U8MasterSend+0x6>
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	89 83       	std	Y+1, r24	; 0x01

	TWDR=Copy_U8Data;
    1b9c:	e3 e2       	ldi	r30, 0x23	; 35
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	80 83       	st	Z, r24
	TWCR|=(1<<TWINT);
    1ba4:	a6 e5       	ldi	r26, 0x56	; 86
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e6 e5       	ldi	r30, 0x56	; 86
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	80 68       	ori	r24, 0x80	; 128
    1bb0:	8c 93       	st	X, r24
	while (!(TWCR & (1<<TWINT)));
    1bb2:	e6 e5       	ldi	r30, 0x56	; 86
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	88 23       	and	r24, r24
    1bba:	dc f7       	brge	.-10     	; 0x1bb2 <I2C_U8MasterSend+0x22>
	if(((TWSR&PSC_STATUS)==MASTER_TRANS))
    1bbc:	e1 e2       	ldi	r30, 0x21	; 33
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	88 2f       	mov	r24, r24
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	88 7f       	andi	r24, 0xF8	; 248
    1bc8:	90 70       	andi	r25, 0x00	; 0
    1bca:	88 32       	cpi	r24, 0x28	; 40
    1bcc:	91 05       	cpc	r25, r1
    1bce:	19 f4       	brne	.+6      	; 0x1bd6 <I2C_U8MasterSend+0x46>
			{
				return 1;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	8a 83       	std	Y+2, r24	; 0x02
    1bd4:	01 c0       	rjmp	.+2      	; 0x1bd8 <I2C_U8MasterSend+0x48>
			}
			return 0;
    1bd6:	1a 82       	std	Y+2, r1	; 0x02
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <I2C_U8SlaveReceive>:
u8 I2C_U8SlaveReceive(u8 *Copy_U8Data){
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <I2C_U8SlaveReceive+0x6>
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	9a 83       	std	Y+2, r25	; 0x02
    1bf2:	89 83       	std	Y+1, r24	; 0x01
	TWCR|=(1<<7)|(1<<TWEN)|(1<<ACK);
    1bf4:	a6 e5       	ldi	r26, 0x56	; 86
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e6 e5       	ldi	r30, 0x56	; 86
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	84 6c       	ori	r24, 0xC4	; 196
    1c00:	8c 93       	st	X, r24
		while (!(TWCR & (1<<7)));
    1c02:	e6 e5       	ldi	r30, 0x56	; 86
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	88 23       	and	r24, r24
    1c0a:	dc f7       	brge	.-10     	; 0x1c02 <I2C_U8SlaveReceive+0x1e>
		if(((TWSR&0xf8)==SLAVE_REC))
    1c0c:	e1 e2       	ldi	r30, 0x21	; 33
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	88 7f       	andi	r24, 0xF8	; 248
    1c18:	90 70       	andi	r25, 0x00	; 0
    1c1a:	80 38       	cpi	r24, 0x80	; 128
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	49 f4       	brne	.+18     	; 0x1c32 <I2C_U8SlaveReceive+0x4e>
				{
					*Copy_U8Data=TWDR;
    1c20:	e3 e2       	ldi	r30, 0x23	; 35
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	e9 81       	ldd	r30, Y+1	; 0x01
    1c28:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2a:	80 83       	st	Z, r24
					return 1;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	8b 83       	std	Y+3, r24	; 0x03
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <I2C_U8SlaveReceive+0x50>
				}
				return 0;
    1c32:	1b 82       	std	Y+3, r1	; 0x03
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <I2C_U8SlaveSend>:
u8 I2C_U8SlaveSend(u8 Copy_U8Data){
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <I2C_U8SlaveSend+0x6>
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	89 83       	std	Y+1, r24	; 0x01
	TWDR=Copy_U8Data;
    1c4e:	e3 e2       	ldi	r30, 0x23	; 35
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	80 83       	st	Z, r24
		TWCR=(1<<7);
    1c56:	e6 e5       	ldi	r30, 0x56	; 86
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 e8       	ldi	r24, 0x80	; 128
    1c5c:	80 83       	st	Z, r24
		while (!(TWCR & (1<<7)));
    1c5e:	e6 e5       	ldi	r30, 0x56	; 86
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	88 23       	and	r24, r24
    1c66:	dc f7       	brge	.-10     	; 0x1c5e <I2C_U8SlaveSend+0x1c>
		if(((TWSR&0xf8)==SLAVE_TRANS))
    1c68:	e1 e2       	ldi	r30, 0x21	; 33
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	88 2f       	mov	r24, r24
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	88 7f       	andi	r24, 0xF8	; 248
    1c74:	90 70       	andi	r25, 0x00	; 0
    1c76:	88 3c       	cpi	r24, 0xC8	; 200
    1c78:	91 05       	cpc	r25, r1
    1c7a:	19 f4       	brne	.+6      	; 0x1c82 <I2C_U8SlaveSend+0x40>
				{
					return 1;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	8a 83       	std	Y+2, r24	; 0x02
    1c80:	01 c0       	rjmp	.+2      	; 0x1c84 <I2C_U8SlaveSend+0x42>
				}
				return 0;
    1c82:	1a 82       	std	Y+2, r1	; 0x02
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	08 95       	ret

00001c90 <I2C_U8MasterReceive>:

u8 I2C_U8MasterReceive(u8 *Copy_U8Data){
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <I2C_U8MasterReceive+0x6>
    1c96:	0f 92       	push	r0
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	89 83       	std	Y+1, r24	; 0x01
	TWCR|=(1<<7);
    1ca0:	a6 e5       	ldi	r26, 0x56	; 86
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e6 e5       	ldi	r30, 0x56	; 86
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	80 68       	ori	r24, 0x80	; 128
    1cac:	8c 93       	st	X, r24
		while (!(TWCR & (1<<7)));
    1cae:	e6 e5       	ldi	r30, 0x56	; 86
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	88 23       	and	r24, r24
    1cb6:	dc f7       	brge	.-10     	; 0x1cae <I2C_U8MasterReceive+0x1e>
		if(((TWSR&0xf8)==MASTER_REC))
    1cb8:	e1 e2       	ldi	r30, 0x21	; 33
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	88 2f       	mov	r24, r24
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	88 7f       	andi	r24, 0xF8	; 248
    1cc4:	90 70       	andi	r25, 0x00	; 0
    1cc6:	80 35       	cpi	r24, 0x50	; 80
    1cc8:	91 05       	cpc	r25, r1
    1cca:	49 f4       	brne	.+18     	; 0x1cde <I2C_U8MasterReceive+0x4e>
				{
					*Copy_U8Data=TWDR;
    1ccc:	e3 e2       	ldi	r30, 0x23	; 35
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd6:	80 83       	st	Z, r24
					return 1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	8b 83       	std	Y+3, r24	; 0x03
    1cdc:	01 c0       	rjmp	.+2      	; 0x1ce0 <I2C_U8MasterReceive+0x50>
				}
				return 0;
    1cde:	1b 82       	std	Y+3, r1	; 0x03
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <I2C_VidStop>:



void I2C_VidStop(){
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
	TWCR|=(1<<TWINT)|(1<<TWSTO);
    1cf6:	a6 e5       	ldi	r26, 0x56	; 86
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e6 e5       	ldi	r30, 0x56	; 86
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	80 69       	ori	r24, 0x90	; 144
    1d02:	8c 93       	st	X, r24
}
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <GIE_VidEnable>:
#include"../../lib/STD_Types.h"
#include"../../lib/BIT_MATH.h"
#include"../../lib/AVR32_REG.h"
#include "GIE_private.h"
 void GIE_VidEnable(){
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SRIG,GLOBALINT);
    1d12:	af e5       	ldi	r26, 0x5F	; 95
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	ef e5       	ldi	r30, 0x5F	; 95
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	80 68       	ori	r24, 0x80	; 128
    1d1e:	8c 93       	st	X, r24
}
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <GIE_VidDisable>:
void GIE_VidDisable(){
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SRIG,GLOBALINT);
    1d2e:	af e5       	ldi	r26, 0x5F	; 95
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	ef e5       	ldi	r30, 0x5F	; 95
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	8f 77       	andi	r24, 0x7F	; 127
    1d3a:	8c 93       	st	X, r24
}
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <EXIT_VidCallback>:

static void (*PVidCallback)(void*)=NULL;
 void*Gptr=NULL;

void EXIT_VidCallback(void (*Copy_PVidCallback)(void*),void * Copy_VoidPtr)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <EXIT_VidCallback+0x6>
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <EXIT_VidCallback+0x8>
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	7c 83       	std	Y+4, r23	; 0x04
    1d54:	6b 83       	std	Y+3, r22	; 0x03
	 PVidCallback=Copy_PVidCallback;
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	90 93 92 01 	sts	0x0192, r25
    1d5e:	80 93 91 01 	sts	0x0191, r24
	 Gptr=Copy_VoidPtr;
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	9c 81       	ldd	r25, Y+4	; 0x04
    1d66:	90 93 94 01 	sts	0x0194, r25
    1d6a:	80 93 93 01 	sts	0x0193, r24
}
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <ExIt_VidInit0>:


void ExIt_VidInit0(SenseControl Copy_SenseControl){
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	0f 92       	push	r0
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	89 83       	std	Y+1, r24	; 0x01

	MCUCR|=(Copy_SenseControl);
    1d88:	a5 e5       	ldi	r26, 0x55	; 85
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e5 e5       	ldi	r30, 0x55	; 85
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	90 81       	ld	r25, Z
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	89 2b       	or	r24, r25
    1d96:	8c 93       	st	X, r24
 }
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <ExIt_VidInit1>:

void ExIt_VidInit1(SenseControl Copy_U8SenseControl){
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	0f 92       	push	r0
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	89 83       	std	Y+1, r24	; 0x01

	MCUCR|=(Copy_U8SenseControl<<ISC10);
    1dac:	a5 e5       	ldi	r26, 0x55	; 85
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e5 e5       	ldi	r30, 0x55	; 85
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	28 2f       	mov	r18, r24
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	82 2b       	or	r24, r18
    1dc8:	8c 93       	st	X, r24
}
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <ExIt_VidInit2>:

void ExIt_VidInit2(Int2_SenseControl Copy_SenseControl){
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	0f 92       	push	r0
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_SenseControl==FALL){
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	88 23       	and	r24, r24
    1de2:	41 f4       	brne	.+16     	; 0x1df4 <ExIt_VidInit2+0x22>
		CLR_BIT(MCUCSR,ISC2);}
    1de4:	a4 e5       	ldi	r26, 0x54	; 84
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e4 e5       	ldi	r30, 0x54	; 84
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	8f 7b       	andi	r24, 0xBF	; 191
    1df0:	8c 93       	st	X, r24
    1df2:	0a c0       	rjmp	.+20     	; 0x1e08 <ExIt_VidInit2+0x36>
	else if (Copy_SenseControl==RIS){
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	39 f4       	brne	.+14     	; 0x1e08 <ExIt_VidInit2+0x36>
		SET_BIT(MCUCSR,ISC2);}
    1dfa:	a4 e5       	ldi	r26, 0x54	; 84
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e4 e5       	ldi	r30, 0x54	; 84
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	80 64       	ori	r24, 0x40	; 64
    1e06:	8c 93       	st	X, r24


}
    1e08:	0f 90       	pop	r0
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <ExIt_VidEnable>:

void ExIt_VidEnable(u8 Copy_U8IntNum){
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	0f 92       	push	r0
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_U8IntNum==0){
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	88 23       	and	r24, r24
    1e20:	41 f4       	brne	.+16     	; 0x1e32 <ExIt_VidEnable+0x22>
	SET_BIT(GICR,EX_INT0);}
    1e22:	ab e5       	ldi	r26, 0x5B	; 91
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	eb e5       	ldi	r30, 0x5B	; 91
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	80 64       	ori	r24, 0x40	; 64
    1e2e:	8c 93       	st	X, r24
    1e30:	15 c0       	rjmp	.+42     	; 0x1e5c <ExIt_VidEnable+0x4c>
	else if(Copy_U8IntNum==0){
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	88 23       	and	r24, r24
    1e36:	41 f4       	brne	.+16     	; 0x1e48 <ExIt_VidEnable+0x38>
		SET_BIT(GICR,EX_INT1);}
    1e38:	ab e5       	ldi	r26, 0x5B	; 91
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	eb e5       	ldi	r30, 0x5B	; 91
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	80 68       	ori	r24, 0x80	; 128
    1e44:	8c 93       	st	X, r24
    1e46:	0a c0       	rjmp	.+20     	; 0x1e5c <ExIt_VidEnable+0x4c>
	else if(Copy_U8IntNum==0){
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	88 23       	and	r24, r24
    1e4c:	39 f4       	brne	.+14     	; 0x1e5c <ExIt_VidEnable+0x4c>
		SET_BIT(GICR,EX_INT2);}
    1e4e:	ab e5       	ldi	r26, 0x5B	; 91
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	eb e5       	ldi	r30, 0x5B	; 91
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	80 62       	ori	r24, 0x20	; 32
    1e5a:	8c 93       	st	X, r24

}
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <ExIt_VidDisable>:

void ExIt_VidDisable(u8 Copy_U8IntNum){
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	0f 92       	push	r0
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_U8IntNum==0){
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	88 23       	and	r24, r24
    1e74:	41 f4       	brne	.+16     	; 0x1e86 <ExIt_VidDisable+0x22>
	CLR_BIT(GICR,EX_INT0);}
    1e76:	ab e5       	ldi	r26, 0x5B	; 91
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	eb e5       	ldi	r30, 0x5B	; 91
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	8f 7b       	andi	r24, 0xBF	; 191
    1e82:	8c 93       	st	X, r24
    1e84:	15 c0       	rjmp	.+42     	; 0x1eb0 <ExIt_VidDisable+0x4c>
	else if(Copy_U8IntNum==0){
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	88 23       	and	r24, r24
    1e8a:	41 f4       	brne	.+16     	; 0x1e9c <ExIt_VidDisable+0x38>
		CLR_BIT(GICR,EX_INT1);}
    1e8c:	ab e5       	ldi	r26, 0x5B	; 91
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	eb e5       	ldi	r30, 0x5B	; 91
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	8f 77       	andi	r24, 0x7F	; 127
    1e98:	8c 93       	st	X, r24
    1e9a:	0a c0       	rjmp	.+20     	; 0x1eb0 <ExIt_VidDisable+0x4c>
	else if(Copy_U8IntNum==0){
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	88 23       	and	r24, r24
    1ea0:	39 f4       	brne	.+14     	; 0x1eb0 <ExIt_VidDisable+0x4c>
		CLR_BIT(GICR,EX_INT2);}
    1ea2:	ab e5       	ldi	r26, 0x5B	; 91
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	eb e5       	ldi	r30, 0x5B	; 91
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	8f 7d       	andi	r24, 0xDF	; 223
    1eae:	8c 93       	st	X, r24
}
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <__vector_1>:

//ISR for int0 ID=1 for led
void __vector_1(void)
{	  if(PVidCallback!=NULL)
    1eb8:	1f 92       	push	r1
    1eba:	0f 92       	push	r0
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	0f 92       	push	r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	2f 93       	push	r18
    1ec4:	3f 93       	push	r19
    1ec6:	4f 93       	push	r20
    1ec8:	5f 93       	push	r21
    1eca:	6f 93       	push	r22
    1ecc:	7f 93       	push	r23
    1ece:	8f 93       	push	r24
    1ed0:	9f 93       	push	r25
    1ed2:	af 93       	push	r26
    1ed4:	bf 93       	push	r27
    1ed6:	ef 93       	push	r30
    1ed8:	ff 93       	push	r31
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	80 91 91 01 	lds	r24, 0x0191
    1ee6:	90 91 92 01 	lds	r25, 0x0192
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	49 f0       	breq	.+18     	; 0x1f00 <__vector_1+0x48>
{
	PVidCallback(Gptr);}
    1eee:	e0 91 91 01 	lds	r30, 0x0191
    1ef2:	f0 91 92 01 	lds	r31, 0x0192
    1ef6:	80 91 93 01 	lds	r24, 0x0193
    1efa:	90 91 94 01 	lds	r25, 0x0194
    1efe:	09 95       	icall
 }
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	ff 91       	pop	r31
    1f06:	ef 91       	pop	r30
    1f08:	bf 91       	pop	r27
    1f0a:	af 91       	pop	r26
    1f0c:	9f 91       	pop	r25
    1f0e:	8f 91       	pop	r24
    1f10:	7f 91       	pop	r23
    1f12:	6f 91       	pop	r22
    1f14:	5f 91       	pop	r21
    1f16:	4f 91       	pop	r20
    1f18:	3f 91       	pop	r19
    1f1a:	2f 91       	pop	r18
    1f1c:	0f 90       	pop	r0
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	0f 90       	pop	r0
    1f22:	1f 90       	pop	r1
    1f24:	18 95       	reti

00001f26 <DIO_VidSetPinDirection>:
#include"../../lib/AVR32_REG.h"
#include "DIO_Private.h"


void DIO_VidSetPinDirection(u8 Copy_U8port,u8 Copy_U8Pin,u8 Copy_U8Direction)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	27 97       	sbiw	r28, 0x07	; 7
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	6a 83       	std	Y+2, r22	; 0x02
    1f3e:	4b 83       	std	Y+3, r20	; 0x03
	/*check if dir is output*/
	if(Output == Copy_U8Direction)
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <DIO_VidSetPinDirection+0x22>
    1f46:	6f c0       	rjmp	.+222    	; 0x2026 <DIO_VidSetPinDirection+0x100>
	{
		switch(Copy_U8port)
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	3f 83       	std	Y+7, r19	; 0x07
    1f50:	2e 83       	std	Y+6, r18	; 0x06
    1f52:	8e 81       	ldd	r24, Y+6	; 0x06
    1f54:	9f 81       	ldd	r25, Y+7	; 0x07
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	91 05       	cpc	r25, r1
    1f5a:	49 f1       	breq	.+82     	; 0x1fae <DIO_VidSetPinDirection+0x88>
    1f5c:	2e 81       	ldd	r18, Y+6	; 0x06
    1f5e:	3f 81       	ldd	r19, Y+7	; 0x07
    1f60:	22 30       	cpi	r18, 0x02	; 2
    1f62:	31 05       	cpc	r19, r1
    1f64:	2c f4       	brge	.+10     	; 0x1f70 <DIO_VidSetPinDirection+0x4a>
    1f66:	8e 81       	ldd	r24, Y+6	; 0x06
    1f68:	9f 81       	ldd	r25, Y+7	; 0x07
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	61 f0       	breq	.+24     	; 0x1f86 <DIO_VidSetPinDirection+0x60>
    1f6e:	d2 c0       	rjmp	.+420    	; 0x2114 <DIO_VidSetPinDirection+0x1ee>
    1f70:	2e 81       	ldd	r18, Y+6	; 0x06
    1f72:	3f 81       	ldd	r19, Y+7	; 0x07
    1f74:	22 30       	cpi	r18, 0x02	; 2
    1f76:	31 05       	cpc	r19, r1
    1f78:	71 f1       	breq	.+92     	; 0x1fd6 <DIO_VidSetPinDirection+0xb0>
    1f7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f7e:	83 30       	cpi	r24, 0x03	; 3
    1f80:	91 05       	cpc	r25, r1
    1f82:	e9 f1       	breq	.+122    	; 0x1ffe <DIO_VidSetPinDirection+0xd8>
    1f84:	c7 c0       	rjmp	.+398    	; 0x2114 <DIO_VidSetPinDirection+0x1ee>
		{
		case PortA :	SET_BIT(DDRA,Copy_U8Pin);	break;
    1f86:	aa e3       	ldi	r26, 0x3A	; 58
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	ea e3       	ldi	r30, 0x3A	; 58
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	48 2f       	mov	r20, r24
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	02 2e       	mov	r0, r18
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <DIO_VidSetPinDirection+0x7e>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	0a 94       	dec	r0
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <DIO_VidSetPinDirection+0x7a>
    1fa8:	84 2b       	or	r24, r20
    1faa:	8c 93       	st	X, r24
    1fac:	b3 c0       	rjmp	.+358    	; 0x2114 <DIO_VidSetPinDirection+0x1ee>
		case PortB :	SET_BIT(DDRB,Copy_U8Pin);	break;
    1fae:	a7 e3       	ldi	r26, 0x37	; 55
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e7 e3       	ldi	r30, 0x37	; 55
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	48 2f       	mov	r20, r24
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	02 2e       	mov	r0, r18
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <DIO_VidSetPinDirection+0xa6>
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	0a 94       	dec	r0
    1fce:	e2 f7       	brpl	.-8      	; 0x1fc8 <DIO_VidSetPinDirection+0xa2>
    1fd0:	84 2b       	or	r24, r20
    1fd2:	8c 93       	st	X, r24
    1fd4:	9f c0       	rjmp	.+318    	; 0x2114 <DIO_VidSetPinDirection+0x1ee>
		case PortC :	SET_BIT(DDRC,Copy_U8Pin);	break;
    1fd6:	a4 e3       	ldi	r26, 0x34	; 52
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e4 e3       	ldi	r30, 0x34	; 52
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	02 2e       	mov	r0, r18
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <DIO_VidSetPinDirection+0xce>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	0a 94       	dec	r0
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <DIO_VidSetPinDirection+0xca>
    1ff8:	84 2b       	or	r24, r20
    1ffa:	8c 93       	st	X, r24
    1ffc:	8b c0       	rjmp	.+278    	; 0x2114 <DIO_VidSetPinDirection+0x1ee>
		case PortD :	SET_BIT(DDRD,Copy_U8Pin);	break;
    1ffe:	a1 e3       	ldi	r26, 0x31	; 49
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e1 e3       	ldi	r30, 0x31	; 49
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	48 2f       	mov	r20, r24
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	02 2e       	mov	r0, r18
    2016:	02 c0       	rjmp	.+4      	; 0x201c <DIO_VidSetPinDirection+0xf6>
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	0a 94       	dec	r0
    201e:	e2 f7       	brpl	.-8      	; 0x2018 <DIO_VidSetPinDirection+0xf2>
    2020:	84 2b       	or	r24, r20
    2022:	8c 93       	st	X, r24
    2024:	77 c0       	rjmp	.+238    	; 0x2114 <DIO_VidSetPinDirection+0x1ee>
		default:									break;
		}
	}
	else if(Input == Copy_U8Direction)	/*check if dir is input*/
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	88 23       	and	r24, r24
    202a:	09 f0       	breq	.+2      	; 0x202e <DIO_VidSetPinDirection+0x108>
    202c:	73 c0       	rjmp	.+230    	; 0x2114 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(Copy_U8port)
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	3d 83       	std	Y+5, r19	; 0x05
    2036:	2c 83       	std	Y+4, r18	; 0x04
    2038:	8c 81       	ldd	r24, Y+4	; 0x04
    203a:	9d 81       	ldd	r25, Y+5	; 0x05
    203c:	81 30       	cpi	r24, 0x01	; 1
    203e:	91 05       	cpc	r25, r1
    2040:	59 f1       	breq	.+86     	; 0x2098 <DIO_VidSetPinDirection+0x172>
    2042:	2c 81       	ldd	r18, Y+4	; 0x04
    2044:	3d 81       	ldd	r19, Y+5	; 0x05
    2046:	22 30       	cpi	r18, 0x02	; 2
    2048:	31 05       	cpc	r19, r1
    204a:	2c f4       	brge	.+10     	; 0x2056 <DIO_VidSetPinDirection+0x130>
    204c:	8c 81       	ldd	r24, Y+4	; 0x04
    204e:	9d 81       	ldd	r25, Y+5	; 0x05
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	69 f0       	breq	.+26     	; 0x206e <DIO_VidSetPinDirection+0x148>
    2054:	5f c0       	rjmp	.+190    	; 0x2114 <DIO_VidSetPinDirection+0x1ee>
    2056:	2c 81       	ldd	r18, Y+4	; 0x04
    2058:	3d 81       	ldd	r19, Y+5	; 0x05
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 05       	cpc	r19, r1
    205e:	89 f1       	breq	.+98     	; 0x20c2 <DIO_VidSetPinDirection+0x19c>
    2060:	8c 81       	ldd	r24, Y+4	; 0x04
    2062:	9d 81       	ldd	r25, Y+5	; 0x05
    2064:	83 30       	cpi	r24, 0x03	; 3
    2066:	91 05       	cpc	r25, r1
    2068:	09 f4       	brne	.+2      	; 0x206c <DIO_VidSetPinDirection+0x146>
    206a:	40 c0       	rjmp	.+128    	; 0x20ec <DIO_VidSetPinDirection+0x1c6>
    206c:	53 c0       	rjmp	.+166    	; 0x2114 <DIO_VidSetPinDirection+0x1ee>
		{
		case PortA :	CLR_BIT(DDRA,Copy_U8Pin);	 break;
    206e:	aa e3       	ldi	r26, 0x3A	; 58
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	ea e3       	ldi	r30, 0x3A	; 58
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	48 2f       	mov	r20, r24
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	02 2e       	mov	r0, r18
    2086:	02 c0       	rjmp	.+4      	; 0x208c <DIO_VidSetPinDirection+0x166>
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	0a 94       	dec	r0
    208e:	e2 f7       	brpl	.-8      	; 0x2088 <DIO_VidSetPinDirection+0x162>
    2090:	80 95       	com	r24
    2092:	84 23       	and	r24, r20
    2094:	8c 93       	st	X, r24
    2096:	3e c0       	rjmp	.+124    	; 0x2114 <DIO_VidSetPinDirection+0x1ee>
		case PortB :	CLR_BIT(DDRB,Copy_U8Pin);	 break;
    2098:	a7 e3       	ldi	r26, 0x37	; 55
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e7 e3       	ldi	r30, 0x37	; 55
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	48 2f       	mov	r20, r24
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	02 2e       	mov	r0, r18
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <DIO_VidSetPinDirection+0x190>
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	0a 94       	dec	r0
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <DIO_VidSetPinDirection+0x18c>
    20ba:	80 95       	com	r24
    20bc:	84 23       	and	r24, r20
    20be:	8c 93       	st	X, r24
    20c0:	29 c0       	rjmp	.+82     	; 0x2114 <DIO_VidSetPinDirection+0x1ee>
		case PortC :	CLR_BIT(DDRC,Copy_U8Pin);	 break;
    20c2:	a4 e3       	ldi	r26, 0x34	; 52
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e4 e3       	ldi	r30, 0x34	; 52
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	48 2f       	mov	r20, r24
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	02 2e       	mov	r0, r18
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <DIO_VidSetPinDirection+0x1ba>
    20dc:	88 0f       	add	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	0a 94       	dec	r0
    20e2:	e2 f7       	brpl	.-8      	; 0x20dc <DIO_VidSetPinDirection+0x1b6>
    20e4:	80 95       	com	r24
    20e6:	84 23       	and	r24, r20
    20e8:	8c 93       	st	X, r24
    20ea:	14 c0       	rjmp	.+40     	; 0x2114 <DIO_VidSetPinDirection+0x1ee>
		case PortD :	CLR_BIT(DDRD,Copy_U8Pin);    break;
    20ec:	a1 e3       	ldi	r26, 0x31	; 49
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e1 e3       	ldi	r30, 0x31	; 49
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	48 2f       	mov	r20, r24
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	02 2e       	mov	r0, r18
    2104:	02 c0       	rjmp	.+4      	; 0x210a <DIO_VidSetPinDirection+0x1e4>
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	0a 94       	dec	r0
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <DIO_VidSetPinDirection+0x1e0>
    210e:	80 95       	com	r24
    2110:	84 23       	and	r24, r20
    2112:	8c 93       	st	X, r24
		}
	}
	else
	{
	}
 }
    2114:	27 96       	adiw	r28, 0x07	; 7
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <DIO_VidSetPinValue>:


void DIO_VidSetPinValue(u8 Copy_U8port,u8 Copy_U8Pin,u8 Copy_U8Value)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	27 97       	sbiw	r28, 0x07	; 7
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	6a 83       	std	Y+2, r22	; 0x02
    213e:	4b 83       	std	Y+3, r20	; 0x03

	if(High== Copy_U8Value)
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	09 f0       	breq	.+2      	; 0x2148 <DIO_VidSetPinValue+0x22>
    2146:	6f c0       	rjmp	.+222    	; 0x2226 <DIO_VidSetPinValue+0x100>
	{
		switch(Copy_U8port)
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	3f 83       	std	Y+7, r19	; 0x07
    2150:	2e 83       	std	Y+6, r18	; 0x06
    2152:	8e 81       	ldd	r24, Y+6	; 0x06
    2154:	9f 81       	ldd	r25, Y+7	; 0x07
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	91 05       	cpc	r25, r1
    215a:	49 f1       	breq	.+82     	; 0x21ae <DIO_VidSetPinValue+0x88>
    215c:	2e 81       	ldd	r18, Y+6	; 0x06
    215e:	3f 81       	ldd	r19, Y+7	; 0x07
    2160:	22 30       	cpi	r18, 0x02	; 2
    2162:	31 05       	cpc	r19, r1
    2164:	2c f4       	brge	.+10     	; 0x2170 <DIO_VidSetPinValue+0x4a>
    2166:	8e 81       	ldd	r24, Y+6	; 0x06
    2168:	9f 81       	ldd	r25, Y+7	; 0x07
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	61 f0       	breq	.+24     	; 0x2186 <DIO_VidSetPinValue+0x60>
    216e:	d2 c0       	rjmp	.+420    	; 0x2314 <DIO_VidSetPinValue+0x1ee>
    2170:	2e 81       	ldd	r18, Y+6	; 0x06
    2172:	3f 81       	ldd	r19, Y+7	; 0x07
    2174:	22 30       	cpi	r18, 0x02	; 2
    2176:	31 05       	cpc	r19, r1
    2178:	71 f1       	breq	.+92     	; 0x21d6 <DIO_VidSetPinValue+0xb0>
    217a:	8e 81       	ldd	r24, Y+6	; 0x06
    217c:	9f 81       	ldd	r25, Y+7	; 0x07
    217e:	83 30       	cpi	r24, 0x03	; 3
    2180:	91 05       	cpc	r25, r1
    2182:	e9 f1       	breq	.+122    	; 0x21fe <DIO_VidSetPinValue+0xd8>
    2184:	c7 c0       	rjmp	.+398    	; 0x2314 <DIO_VidSetPinValue+0x1ee>
		{
		case PortA :	SET_BIT(PORTA,Copy_U8Pin);	break;
    2186:	ab e3       	ldi	r26, 0x3B	; 59
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	eb e3       	ldi	r30, 0x3B	; 59
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	48 2f       	mov	r20, r24
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	02 2e       	mov	r0, r18
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <DIO_VidSetPinValue+0x7e>
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	0a 94       	dec	r0
    21a6:	e2 f7       	brpl	.-8      	; 0x21a0 <DIO_VidSetPinValue+0x7a>
    21a8:	84 2b       	or	r24, r20
    21aa:	8c 93       	st	X, r24
    21ac:	b3 c0       	rjmp	.+358    	; 0x2314 <DIO_VidSetPinValue+0x1ee>
		case PortB :	SET_BIT(PORTB,Copy_U8Pin);	break;
    21ae:	a8 e3       	ldi	r26, 0x38	; 56
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e8 e3       	ldi	r30, 0x38	; 56
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	48 2f       	mov	r20, r24
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	02 2e       	mov	r0, r18
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <DIO_VidSetPinValue+0xa6>
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	0a 94       	dec	r0
    21ce:	e2 f7       	brpl	.-8      	; 0x21c8 <DIO_VidSetPinValue+0xa2>
    21d0:	84 2b       	or	r24, r20
    21d2:	8c 93       	st	X, r24
    21d4:	9f c0       	rjmp	.+318    	; 0x2314 <DIO_VidSetPinValue+0x1ee>
		case PortC :	SET_BIT(PORTC,Copy_U8Pin);	break;
    21d6:	a5 e3       	ldi	r26, 0x35	; 53
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e5 e3       	ldi	r30, 0x35	; 53
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	48 2f       	mov	r20, r24
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	02 2e       	mov	r0, r18
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <DIO_VidSetPinValue+0xce>
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	0a 94       	dec	r0
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <DIO_VidSetPinValue+0xca>
    21f8:	84 2b       	or	r24, r20
    21fa:	8c 93       	st	X, r24
    21fc:	8b c0       	rjmp	.+278    	; 0x2314 <DIO_VidSetPinValue+0x1ee>
		case PortD :	SET_BIT(PORTD,Copy_U8Pin);	break;
    21fe:	a2 e3       	ldi	r26, 0x32	; 50
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e2 e3       	ldi	r30, 0x32	; 50
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	48 2f       	mov	r20, r24
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	02 2e       	mov	r0, r18
    2216:	02 c0       	rjmp	.+4      	; 0x221c <DIO_VidSetPinValue+0xf6>
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	0a 94       	dec	r0
    221e:	e2 f7       	brpl	.-8      	; 0x2218 <DIO_VidSetPinValue+0xf2>
    2220:	84 2b       	or	r24, r20
    2222:	8c 93       	st	X, r24
    2224:	77 c0       	rjmp	.+238    	; 0x2314 <DIO_VidSetPinValue+0x1ee>
		default:									break;
		}
	}
	else if(Low == Copy_U8Value)
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	88 23       	and	r24, r24
    222a:	09 f0       	breq	.+2      	; 0x222e <DIO_VidSetPinValue+0x108>
    222c:	73 c0       	rjmp	.+230    	; 0x2314 <DIO_VidSetPinValue+0x1ee>
	{
		switch(Copy_U8port)
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	3d 83       	std	Y+5, r19	; 0x05
    2236:	2c 83       	std	Y+4, r18	; 0x04
    2238:	8c 81       	ldd	r24, Y+4	; 0x04
    223a:	9d 81       	ldd	r25, Y+5	; 0x05
    223c:	81 30       	cpi	r24, 0x01	; 1
    223e:	91 05       	cpc	r25, r1
    2240:	59 f1       	breq	.+86     	; 0x2298 <DIO_VidSetPinValue+0x172>
    2242:	2c 81       	ldd	r18, Y+4	; 0x04
    2244:	3d 81       	ldd	r19, Y+5	; 0x05
    2246:	22 30       	cpi	r18, 0x02	; 2
    2248:	31 05       	cpc	r19, r1
    224a:	2c f4       	brge	.+10     	; 0x2256 <DIO_VidSetPinValue+0x130>
    224c:	8c 81       	ldd	r24, Y+4	; 0x04
    224e:	9d 81       	ldd	r25, Y+5	; 0x05
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	69 f0       	breq	.+26     	; 0x226e <DIO_VidSetPinValue+0x148>
    2254:	5f c0       	rjmp	.+190    	; 0x2314 <DIO_VidSetPinValue+0x1ee>
    2256:	2c 81       	ldd	r18, Y+4	; 0x04
    2258:	3d 81       	ldd	r19, Y+5	; 0x05
    225a:	22 30       	cpi	r18, 0x02	; 2
    225c:	31 05       	cpc	r19, r1
    225e:	89 f1       	breq	.+98     	; 0x22c2 <DIO_VidSetPinValue+0x19c>
    2260:	8c 81       	ldd	r24, Y+4	; 0x04
    2262:	9d 81       	ldd	r25, Y+5	; 0x05
    2264:	83 30       	cpi	r24, 0x03	; 3
    2266:	91 05       	cpc	r25, r1
    2268:	09 f4       	brne	.+2      	; 0x226c <DIO_VidSetPinValue+0x146>
    226a:	40 c0       	rjmp	.+128    	; 0x22ec <DIO_VidSetPinValue+0x1c6>
    226c:	53 c0       	rjmp	.+166    	; 0x2314 <DIO_VidSetPinValue+0x1ee>
		{
		case PortA :	CLR_BIT(PORTA,Copy_U8Pin);	 break;
    226e:	ab e3       	ldi	r26, 0x3B	; 59
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	eb e3       	ldi	r30, 0x3B	; 59
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	48 2f       	mov	r20, r24
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	02 2e       	mov	r0, r18
    2286:	02 c0       	rjmp	.+4      	; 0x228c <DIO_VidSetPinValue+0x166>
    2288:	88 0f       	add	r24, r24
    228a:	99 1f       	adc	r25, r25
    228c:	0a 94       	dec	r0
    228e:	e2 f7       	brpl	.-8      	; 0x2288 <DIO_VidSetPinValue+0x162>
    2290:	80 95       	com	r24
    2292:	84 23       	and	r24, r20
    2294:	8c 93       	st	X, r24
    2296:	3e c0       	rjmp	.+124    	; 0x2314 <DIO_VidSetPinValue+0x1ee>
		case PortB :	CLR_BIT(PORTB,Copy_U8Pin);	 break;
    2298:	a8 e3       	ldi	r26, 0x38	; 56
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e8 e3       	ldi	r30, 0x38	; 56
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	48 2f       	mov	r20, r24
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	02 2e       	mov	r0, r18
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <DIO_VidSetPinValue+0x190>
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	0a 94       	dec	r0
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <DIO_VidSetPinValue+0x18c>
    22ba:	80 95       	com	r24
    22bc:	84 23       	and	r24, r20
    22be:	8c 93       	st	X, r24
    22c0:	29 c0       	rjmp	.+82     	; 0x2314 <DIO_VidSetPinValue+0x1ee>
		case PortC :	CLR_BIT(PORTC,Copy_U8Pin);	 break;
    22c2:	a5 e3       	ldi	r26, 0x35	; 53
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e5 e3       	ldi	r30, 0x35	; 53
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	48 2f       	mov	r20, r24
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	28 2f       	mov	r18, r24
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	02 2e       	mov	r0, r18
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <DIO_VidSetPinValue+0x1ba>
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	0a 94       	dec	r0
    22e2:	e2 f7       	brpl	.-8      	; 0x22dc <DIO_VidSetPinValue+0x1b6>
    22e4:	80 95       	com	r24
    22e6:	84 23       	and	r24, r20
    22e8:	8c 93       	st	X, r24
    22ea:	14 c0       	rjmp	.+40     	; 0x2314 <DIO_VidSetPinValue+0x1ee>
		case PortD :	CLR_BIT(PORTD,Copy_U8Pin);   break;
    22ec:	a2 e3       	ldi	r26, 0x32	; 50
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e2 e3       	ldi	r30, 0x32	; 50
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	48 2f       	mov	r20, r24
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	02 2e       	mov	r0, r18
    2304:	02 c0       	rjmp	.+4      	; 0x230a <DIO_VidSetPinValue+0x1e4>
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	0a 94       	dec	r0
    230c:	e2 f7       	brpl	.-8      	; 0x2306 <DIO_VidSetPinValue+0x1e0>
    230e:	80 95       	com	r24
    2310:	84 23       	and	r24, r20
    2312:	8c 93       	st	X, r24
		}
	}
	else
	{
	}
}
    2314:	27 96       	adiw	r28, 0x07	; 7
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <DIO_VidSetPortDirection>:


void DIO_VidSetPortDirection(u8 Copy_U8port,u8 Copy_U8Direction)
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	00 d0       	rcall	.+0      	; 0x232c <DIO_VidSetPortDirection+0x6>
    232c:	00 d0       	rcall	.+0      	; 0x232e <DIO_VidSetPortDirection+0x8>
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_U8port)
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	3c 83       	std	Y+4, r19	; 0x04
    233e:	2b 83       	std	Y+3, r18	; 0x03
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	81 30       	cpi	r24, 0x01	; 1
    2346:	91 05       	cpc	r25, r1
    2348:	d1 f0       	breq	.+52     	; 0x237e <DIO_VidSetPortDirection+0x58>
    234a:	2b 81       	ldd	r18, Y+3	; 0x03
    234c:	3c 81       	ldd	r19, Y+4	; 0x04
    234e:	22 30       	cpi	r18, 0x02	; 2
    2350:	31 05       	cpc	r19, r1
    2352:	2c f4       	brge	.+10     	; 0x235e <DIO_VidSetPortDirection+0x38>
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	61 f0       	breq	.+24     	; 0x2374 <DIO_VidSetPortDirection+0x4e>
    235c:	1e c0       	rjmp	.+60     	; 0x239a <DIO_VidSetPortDirection+0x74>
    235e:	2b 81       	ldd	r18, Y+3	; 0x03
    2360:	3c 81       	ldd	r19, Y+4	; 0x04
    2362:	22 30       	cpi	r18, 0x02	; 2
    2364:	31 05       	cpc	r19, r1
    2366:	81 f0       	breq	.+32     	; 0x2388 <DIO_VidSetPortDirection+0x62>
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	83 30       	cpi	r24, 0x03	; 3
    236e:	91 05       	cpc	r25, r1
    2370:	81 f0       	breq	.+32     	; 0x2392 <DIO_VidSetPortDirection+0x6c>
    2372:	13 c0       	rjmp	.+38     	; 0x239a <DIO_VidSetPortDirection+0x74>
	{
	case PortA :	DDRA=Copy_U8Direction;	break;
    2374:	ea e3       	ldi	r30, 0x3A	; 58
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	80 83       	st	Z, r24
    237c:	0e c0       	rjmp	.+28     	; 0x239a <DIO_VidSetPortDirection+0x74>
	case PortB :	DDRB=Copy_U8Direction;	break;
    237e:	e7 e3       	ldi	r30, 0x37	; 55
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	80 83       	st	Z, r24
    2386:	09 c0       	rjmp	.+18     	; 0x239a <DIO_VidSetPortDirection+0x74>
	case PortC :	DDRC=Copy_U8Direction;	break;
    2388:	e4 e3       	ldi	r30, 0x34	; 52
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	80 83       	st	Z, r24
    2390:	04 c0       	rjmp	.+8      	; 0x239a <DIO_VidSetPortDirection+0x74>
	case PortD :	DDRD=Copy_U8Direction;	break;
    2392:	e1 e3       	ldi	r30, 0x31	; 49
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	80 83       	st	Z, r24
	default:								break;
	}


}
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <DIO_VidSetPortValue>:


void DIO_VidSetPortValue(u8 Copy_U8port,u8 Copy_U8Value)
{
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <DIO_VidSetPortValue+0x6>
    23ae:	00 d0       	rcall	.+0      	; 0x23b0 <DIO_VidSetPortValue+0x8>
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	89 83       	std	Y+1, r24	; 0x01
    23b6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8port)
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	3c 83       	std	Y+4, r19	; 0x04
    23c0:	2b 83       	std	Y+3, r18	; 0x03
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	9c 81       	ldd	r25, Y+4	; 0x04
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	91 05       	cpc	r25, r1
    23ca:	d1 f0       	breq	.+52     	; 0x2400 <DIO_VidSetPortValue+0x58>
    23cc:	2b 81       	ldd	r18, Y+3	; 0x03
    23ce:	3c 81       	ldd	r19, Y+4	; 0x04
    23d0:	22 30       	cpi	r18, 0x02	; 2
    23d2:	31 05       	cpc	r19, r1
    23d4:	2c f4       	brge	.+10     	; 0x23e0 <DIO_VidSetPortValue+0x38>
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	61 f0       	breq	.+24     	; 0x23f6 <DIO_VidSetPortValue+0x4e>
    23de:	1e c0       	rjmp	.+60     	; 0x241c <DIO_VidSetPortValue+0x74>
    23e0:	2b 81       	ldd	r18, Y+3	; 0x03
    23e2:	3c 81       	ldd	r19, Y+4	; 0x04
    23e4:	22 30       	cpi	r18, 0x02	; 2
    23e6:	31 05       	cpc	r19, r1
    23e8:	81 f0       	breq	.+32     	; 0x240a <DIO_VidSetPortValue+0x62>
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	83 30       	cpi	r24, 0x03	; 3
    23f0:	91 05       	cpc	r25, r1
    23f2:	81 f0       	breq	.+32     	; 0x2414 <DIO_VidSetPortValue+0x6c>
    23f4:	13 c0       	rjmp	.+38     	; 0x241c <DIO_VidSetPortValue+0x74>
	{
	case PortA :	PORTA=Copy_U8Value;	break;
    23f6:	eb e3       	ldi	r30, 0x3B	; 59
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	80 83       	st	Z, r24
    23fe:	0e c0       	rjmp	.+28     	; 0x241c <DIO_VidSetPortValue+0x74>
	case PortB :	PORTB=Copy_U8Value;	break;
    2400:	e8 e3       	ldi	r30, 0x38	; 56
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	80 83       	st	Z, r24
    2408:	09 c0       	rjmp	.+18     	; 0x241c <DIO_VidSetPortValue+0x74>
	case PortC :	PORTC=Copy_U8Value;	break;
    240a:	e5 e3       	ldi	r30, 0x35	; 53
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	80 83       	st	Z, r24
    2412:	04 c0       	rjmp	.+8      	; 0x241c <DIO_VidSetPortValue+0x74>
	case PortD :	PORTD=Copy_U8Value;	break;
    2414:	e2 e3       	ldi	r30, 0x32	; 50
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	80 83       	st	Z, r24
	default:							break;
	}
}
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <DIO_U8GetPinValue>:


u8 DIO_U8GetPinValue(u8 Copy_U8port,u8 Copy_U8Pin)
{	u8 Local_U8PinValue;
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	00 d0       	rcall	.+0      	; 0x2430 <DIO_U8GetPinValue+0x6>
    2430:	00 d0       	rcall	.+0      	; 0x2432 <DIO_U8GetPinValue+0x8>
    2432:	0f 92       	push	r0
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
    2438:	8a 83       	std	Y+2, r24	; 0x02
    243a:	6b 83       	std	Y+3, r22	; 0x03
switch(Copy_U8port)
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	28 2f       	mov	r18, r24
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	3d 83       	std	Y+5, r19	; 0x05
    2444:	2c 83       	std	Y+4, r18	; 0x04
    2446:	4c 81       	ldd	r20, Y+4	; 0x04
    2448:	5d 81       	ldd	r21, Y+5	; 0x05
    244a:	41 30       	cpi	r20, 0x01	; 1
    244c:	51 05       	cpc	r21, r1
    244e:	41 f1       	breq	.+80     	; 0x24a0 <DIO_U8GetPinValue+0x76>
    2450:	8c 81       	ldd	r24, Y+4	; 0x04
    2452:	9d 81       	ldd	r25, Y+5	; 0x05
    2454:	82 30       	cpi	r24, 0x02	; 2
    2456:	91 05       	cpc	r25, r1
    2458:	34 f4       	brge	.+12     	; 0x2466 <DIO_U8GetPinValue+0x3c>
    245a:	2c 81       	ldd	r18, Y+4	; 0x04
    245c:	3d 81       	ldd	r19, Y+5	; 0x05
    245e:	21 15       	cp	r18, r1
    2460:	31 05       	cpc	r19, r1
    2462:	61 f0       	breq	.+24     	; 0x247c <DIO_U8GetPinValue+0x52>
    2464:	52 c0       	rjmp	.+164    	; 0x250a <DIO_U8GetPinValue+0xe0>
    2466:	4c 81       	ldd	r20, Y+4	; 0x04
    2468:	5d 81       	ldd	r21, Y+5	; 0x05
    246a:	42 30       	cpi	r20, 0x02	; 2
    246c:	51 05       	cpc	r21, r1
    246e:	51 f1       	breq	.+84     	; 0x24c4 <DIO_U8GetPinValue+0x9a>
    2470:	8c 81       	ldd	r24, Y+4	; 0x04
    2472:	9d 81       	ldd	r25, Y+5	; 0x05
    2474:	83 30       	cpi	r24, 0x03	; 3
    2476:	91 05       	cpc	r25, r1
    2478:	b9 f1       	breq	.+110    	; 0x24e8 <DIO_U8GetPinValue+0xbe>
    247a:	47 c0       	rjmp	.+142    	; 0x250a <DIO_U8GetPinValue+0xe0>
{
case PortA :	Local_U8PinValue=GET_BIT(PINA,Copy_U8Pin);	 break;
    247c:	e9 e3       	ldi	r30, 0x39	; 57
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	88 2f       	mov	r24, r24
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	a9 01       	movw	r20, r18
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <DIO_U8GetPinValue+0x6a>
    2490:	55 95       	asr	r21
    2492:	47 95       	ror	r20
    2494:	8a 95       	dec	r24
    2496:	e2 f7       	brpl	.-8      	; 0x2490 <DIO_U8GetPinValue+0x66>
    2498:	ca 01       	movw	r24, r20
    249a:	81 70       	andi	r24, 0x01	; 1
    249c:	89 83       	std	Y+1, r24	; 0x01
    249e:	35 c0       	rjmp	.+106    	; 0x250a <DIO_U8GetPinValue+0xe0>
case PortB :	Local_U8PinValue=GET_BIT(PINB,Copy_U8Pin);	 break;
    24a0:	e6 e3       	ldi	r30, 0x36	; 54
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	88 2f       	mov	r24, r24
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a9 01       	movw	r20, r18
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <DIO_U8GetPinValue+0x8e>
    24b4:	55 95       	asr	r21
    24b6:	47 95       	ror	r20
    24b8:	8a 95       	dec	r24
    24ba:	e2 f7       	brpl	.-8      	; 0x24b4 <DIO_U8GetPinValue+0x8a>
    24bc:	ca 01       	movw	r24, r20
    24be:	81 70       	andi	r24, 0x01	; 1
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	23 c0       	rjmp	.+70     	; 0x250a <DIO_U8GetPinValue+0xe0>
case PortC :	Local_U8PinValue=GET_BIT(PINC,Copy_U8Pin);	 break;
    24c4:	e3 e3       	ldi	r30, 0x33	; 51
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	88 2f       	mov	r24, r24
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	a9 01       	movw	r20, r18
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <DIO_U8GetPinValue+0xb2>
    24d8:	55 95       	asr	r21
    24da:	47 95       	ror	r20
    24dc:	8a 95       	dec	r24
    24de:	e2 f7       	brpl	.-8      	; 0x24d8 <DIO_U8GetPinValue+0xae>
    24e0:	ca 01       	movw	r24, r20
    24e2:	81 70       	andi	r24, 0x01	; 1
    24e4:	89 83       	std	Y+1, r24	; 0x01
    24e6:	11 c0       	rjmp	.+34     	; 0x250a <DIO_U8GetPinValue+0xe0>
case PortD: 	Local_U8PinValue=GET_BIT(PIND,Copy_U8Pin);	 break;
    24e8:	e0 e3       	ldi	r30, 0x30	; 48
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	88 2f       	mov	r24, r24
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a9 01       	movw	r20, r18
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <DIO_U8GetPinValue+0xd6>
    24fc:	55 95       	asr	r21
    24fe:	47 95       	ror	r20
    2500:	8a 95       	dec	r24
    2502:	e2 f7       	brpl	.-8      	; 0x24fc <DIO_U8GetPinValue+0xd2>
    2504:	ca 01       	movw	r24, r20
    2506:	81 70       	andi	r24, 0x01	; 1
    2508:	89 83       	std	Y+1, r24	; 0x01
default:													 break;

}
return Local_U8PinValue;
    250a:	89 81       	ldd	r24, Y+1	; 0x01
}
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <DIO_VidTogglePin>:



void DIO_VidTogglePin(u8 Copy_U8port,u8 Copy_U8Pin)
{
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	00 d0       	rcall	.+0      	; 0x2522 <DIO_VidTogglePin+0x6>
    2522:	00 d0       	rcall	.+0      	; 0x2524 <DIO_VidTogglePin+0x8>
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8port)
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	28 2f       	mov	r18, r24
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	3c 83       	std	Y+4, r19	; 0x04
    2534:	2b 83       	std	Y+3, r18	; 0x03
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	81 30       	cpi	r24, 0x01	; 1
    253c:	91 05       	cpc	r25, r1
    253e:	49 f1       	breq	.+82     	; 0x2592 <DIO_VidTogglePin+0x76>
    2540:	2b 81       	ldd	r18, Y+3	; 0x03
    2542:	3c 81       	ldd	r19, Y+4	; 0x04
    2544:	22 30       	cpi	r18, 0x02	; 2
    2546:	31 05       	cpc	r19, r1
    2548:	2c f4       	brge	.+10     	; 0x2554 <DIO_VidTogglePin+0x38>
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	9c 81       	ldd	r25, Y+4	; 0x04
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	61 f0       	breq	.+24     	; 0x256a <DIO_VidTogglePin+0x4e>
    2552:	5a c0       	rjmp	.+180    	; 0x2608 <DIO_VidTogglePin+0xec>
    2554:	2b 81       	ldd	r18, Y+3	; 0x03
    2556:	3c 81       	ldd	r19, Y+4	; 0x04
    2558:	22 30       	cpi	r18, 0x02	; 2
    255a:	31 05       	cpc	r19, r1
    255c:	71 f1       	breq	.+92     	; 0x25ba <DIO_VidTogglePin+0x9e>
    255e:	8b 81       	ldd	r24, Y+3	; 0x03
    2560:	9c 81       	ldd	r25, Y+4	; 0x04
    2562:	83 30       	cpi	r24, 0x03	; 3
    2564:	91 05       	cpc	r25, r1
    2566:	e9 f1       	breq	.+122    	; 0x25e2 <DIO_VidTogglePin+0xc6>
    2568:	4f c0       	rjmp	.+158    	; 0x2608 <DIO_VidTogglePin+0xec>
	{
	case PortA :	TOGGLE_BIT(DDRA,Copy_U8Pin);	break;
    256a:	aa e3       	ldi	r26, 0x3A	; 58
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	ea e3       	ldi	r30, 0x3A	; 58
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	48 2f       	mov	r20, r24
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	02 2e       	mov	r0, r18
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <DIO_VidTogglePin+0x6c>
    2584:	88 0f       	add	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	0a 94       	dec	r0
    258a:	e2 f7       	brpl	.-8      	; 0x2584 <DIO_VidTogglePin+0x68>
    258c:	84 27       	eor	r24, r20
    258e:	8c 93       	st	X, r24
    2590:	3b c0       	rjmp	.+118    	; 0x2608 <DIO_VidTogglePin+0xec>
	case PortB :	TOGGLE_BIT(DDRB,Copy_U8Pin);	break;
    2592:	a7 e3       	ldi	r26, 0x37	; 55
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e7 e3       	ldi	r30, 0x37	; 55
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	48 2f       	mov	r20, r24
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	02 2e       	mov	r0, r18
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <DIO_VidTogglePin+0x94>
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	0a 94       	dec	r0
    25b2:	e2 f7       	brpl	.-8      	; 0x25ac <DIO_VidTogglePin+0x90>
    25b4:	84 27       	eor	r24, r20
    25b6:	8c 93       	st	X, r24
    25b8:	27 c0       	rjmp	.+78     	; 0x2608 <DIO_VidTogglePin+0xec>
	case PortC :	TOGGLE_BIT(DDRC,Copy_U8Pin);	break;
    25ba:	a4 e3       	ldi	r26, 0x34	; 52
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e4 e3       	ldi	r30, 0x34	; 52
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	48 2f       	mov	r20, r24
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	02 2e       	mov	r0, r18
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <DIO_VidTogglePin+0xbc>
    25d4:	88 0f       	add	r24, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	0a 94       	dec	r0
    25da:	e2 f7       	brpl	.-8      	; 0x25d4 <DIO_VidTogglePin+0xb8>
    25dc:	84 27       	eor	r24, r20
    25de:	8c 93       	st	X, r24
    25e0:	13 c0       	rjmp	.+38     	; 0x2608 <DIO_VidTogglePin+0xec>
	case PortD :	TOGGLE_BIT(DDRD,Copy_U8Pin);	break;
    25e2:	a1 e3       	ldi	r26, 0x31	; 49
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e1 e3       	ldi	r30, 0x31	; 49
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	48 2f       	mov	r20, r24
    25ee:	8a 81       	ldd	r24, Y+2	; 0x02
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	02 2e       	mov	r0, r18
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <DIO_VidTogglePin+0xe4>
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	0a 94       	dec	r0
    2602:	e2 f7       	brpl	.-8      	; 0x25fc <DIO_VidTogglePin+0xe0>
    2604:	84 27       	eor	r24, r20
    2606:	8c 93       	st	X, r24
	default:										break;
	}
}
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <DIO_VidTogglePinValue>:



void DIO_VidTogglePinValue(u8 Copy_U8port,u8 Copy_U8Pin)
{
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	00 d0       	rcall	.+0      	; 0x261c <DIO_VidTogglePinValue+0x6>
    261c:	00 d0       	rcall	.+0      	; 0x261e <DIO_VidTogglePinValue+0x8>
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8port)
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	28 2f       	mov	r18, r24
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	3c 83       	std	Y+4, r19	; 0x04
    262e:	2b 83       	std	Y+3, r18	; 0x03
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
    2632:	9c 81       	ldd	r25, Y+4	; 0x04
    2634:	81 30       	cpi	r24, 0x01	; 1
    2636:	91 05       	cpc	r25, r1
    2638:	49 f1       	breq	.+82     	; 0x268c <DIO_VidTogglePinValue+0x76>
    263a:	2b 81       	ldd	r18, Y+3	; 0x03
    263c:	3c 81       	ldd	r19, Y+4	; 0x04
    263e:	22 30       	cpi	r18, 0x02	; 2
    2640:	31 05       	cpc	r19, r1
    2642:	2c f4       	brge	.+10     	; 0x264e <DIO_VidTogglePinValue+0x38>
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	9c 81       	ldd	r25, Y+4	; 0x04
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	61 f0       	breq	.+24     	; 0x2664 <DIO_VidTogglePinValue+0x4e>
    264c:	5a c0       	rjmp	.+180    	; 0x2702 <DIO_VidTogglePinValue+0xec>
    264e:	2b 81       	ldd	r18, Y+3	; 0x03
    2650:	3c 81       	ldd	r19, Y+4	; 0x04
    2652:	22 30       	cpi	r18, 0x02	; 2
    2654:	31 05       	cpc	r19, r1
    2656:	71 f1       	breq	.+92     	; 0x26b4 <DIO_VidTogglePinValue+0x9e>
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	9c 81       	ldd	r25, Y+4	; 0x04
    265c:	83 30       	cpi	r24, 0x03	; 3
    265e:	91 05       	cpc	r25, r1
    2660:	e9 f1       	breq	.+122    	; 0x26dc <DIO_VidTogglePinValue+0xc6>
    2662:	4f c0       	rjmp	.+158    	; 0x2702 <DIO_VidTogglePinValue+0xec>
	{
	case PortA :	TOGGLE_BIT(PORTA,Copy_U8Pin);	break;
    2664:	ab e3       	ldi	r26, 0x3B	; 59
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	eb e3       	ldi	r30, 0x3B	; 59
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	48 2f       	mov	r20, r24
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	02 2e       	mov	r0, r18
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <DIO_VidTogglePinValue+0x6c>
    267e:	88 0f       	add	r24, r24
    2680:	99 1f       	adc	r25, r25
    2682:	0a 94       	dec	r0
    2684:	e2 f7       	brpl	.-8      	; 0x267e <DIO_VidTogglePinValue+0x68>
    2686:	84 27       	eor	r24, r20
    2688:	8c 93       	st	X, r24
    268a:	3b c0       	rjmp	.+118    	; 0x2702 <DIO_VidTogglePinValue+0xec>
	case PortB :	TOGGLE_BIT(PORTB,Copy_U8Pin);	break;
    268c:	a8 e3       	ldi	r26, 0x38	; 56
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	e8 e3       	ldi	r30, 0x38	; 56
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	48 2f       	mov	r20, r24
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	02 2e       	mov	r0, r18
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <DIO_VidTogglePinValue+0x94>
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	0a 94       	dec	r0
    26ac:	e2 f7       	brpl	.-8      	; 0x26a6 <DIO_VidTogglePinValue+0x90>
    26ae:	84 27       	eor	r24, r20
    26b0:	8c 93       	st	X, r24
    26b2:	27 c0       	rjmp	.+78     	; 0x2702 <DIO_VidTogglePinValue+0xec>
	case PortC :	TOGGLE_BIT(PORTC,Copy_U8Pin);	break;
    26b4:	a5 e3       	ldi	r26, 0x35	; 53
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	e5 e3       	ldi	r30, 0x35	; 53
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	48 2f       	mov	r20, r24
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	02 2e       	mov	r0, r18
    26cc:	02 c0       	rjmp	.+4      	; 0x26d2 <DIO_VidTogglePinValue+0xbc>
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	0a 94       	dec	r0
    26d4:	e2 f7       	brpl	.-8      	; 0x26ce <DIO_VidTogglePinValue+0xb8>
    26d6:	84 27       	eor	r24, r20
    26d8:	8c 93       	st	X, r24
    26da:	13 c0       	rjmp	.+38     	; 0x2702 <DIO_VidTogglePinValue+0xec>
	case PortD :	TOGGLE_BIT(PORTD,Copy_U8Pin);	break;
    26dc:	a2 e3       	ldi	r26, 0x32	; 50
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	e2 e3       	ldi	r30, 0x32	; 50
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	48 2f       	mov	r20, r24
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	28 2f       	mov	r18, r24
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	02 2e       	mov	r0, r18
    26f4:	02 c0       	rjmp	.+4      	; 0x26fa <DIO_VidTogglePinValue+0xe4>
    26f6:	88 0f       	add	r24, r24
    26f8:	99 1f       	adc	r25, r25
    26fa:	0a 94       	dec	r0
    26fc:	e2 f7       	brpl	.-8      	; 0x26f6 <DIO_VidTogglePinValue+0xe0>
    26fe:	84 27       	eor	r24, r20
    2700:	8c 93       	st	X, r24
	default:										break;
	}
}
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <ADC_VidInit>:
#include"../../lib/AVR32_REG.h"
#include"../DIO/DIO_Interface.h"
#include "ADC_Private.h"
#include "ADC_Config.h"
void ADC_VidInit()
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
#elif ADC_PRESCALER == PRESCALER_32
	SET_BIT(ADCSRA,0);
	CLR_BIT(ADCSRA,1);
	SET_BIT(ADCSRA,2);
#elif ADC_PRESCALER == PRESCALER_64
	CLR_BIT(ADCSRA,0);
    2718:	a6 e2       	ldi	r26, 0x26	; 38
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e6 e2       	ldi	r30, 0x26	; 38
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	8e 7f       	andi	r24, 0xFE	; 254
    2724:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
    2726:	a6 e2       	ldi	r26, 0x26	; 38
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e6 e2       	ldi	r30, 0x26	; 38
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	82 60       	ori	r24, 0x02	; 2
    2732:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,2);
    2734:	a6 e2       	ldi	r26, 0x26	; 38
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e6 e2       	ldi	r30, 0x26	; 38
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	84 60       	ori	r24, 0x04	; 4
    2740:	8c 93       	st	X, r24
	//Reference Selection
#if ADC_REF == AREF
	CLR_BIT(ADMUX,7);
	CLR_BIT(ADMUX,6);
#elif ADC_REF == AVCC
	CLR_BIT(ADMUX,7);
    2742:	a7 e2       	ldi	r26, 0x27	; 39
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	e7 e2       	ldi	r30, 0x27	; 39
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	8f 77       	andi	r24, 0x7F	; 127
    274e:	8c 93       	st	X, r24
	SET_BIT(ADMUX,6);
    2750:	a7 e2       	ldi	r26, 0x27	; 39
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	e7 e2       	ldi	r30, 0x27	; 39
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	80 64       	ori	r24, 0x40	; 64
    275c:	8c 93       	st	X, r24
#elif ADC_REF == INTERNAL2_5V
	SET_BIT(ADMUX,7);
	SET_BIT(ADMUX,6);
#endif

}
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <ADC_VidEnable>:

void ADC_VidEnable()
{
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADC_Enable);
    276c:	a6 e2       	ldi	r26, 0x26	; 38
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	e6 e2       	ldi	r30, 0x26	; 38
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	80 68       	ori	r24, 0x80	; 128
    2778:	8c 93       	st	X, r24
}
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <ADC_VidDisable>:

void ADC_VidDisable()
{
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADC_Enable);
    2788:	a6 e2       	ldi	r26, 0x26	; 38
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	e6 e2       	ldi	r30, 0x26	; 38
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	8f 77       	andi	r24, 0x7F	; 127
    2794:	8c 93       	st	X, r24
}
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <ADC_VidSelectChannel>:

void ADC_VidSelectChannel(u8 Copy_U8Channel)
{
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	0f 92       	push	r0
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0XE0;
    27a8:	a7 e2       	ldi	r26, 0x27	; 39
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	e7 e2       	ldi	r30, 0x27	; 39
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	80 7e       	andi	r24, 0xE0	; 224
    27b4:	8c 93       	st	X, r24
	ADMUX|=Copy_U8Channel;
    27b6:	a7 e2       	ldi	r26, 0x27	; 39
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	e7 e2       	ldi	r30, 0x27	; 39
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	90 81       	ld	r25, Z
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	89 2b       	or	r24, r25
    27c4:	8c 93       	st	X, r24

}
    27c6:	0f 90       	pop	r0
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	08 95       	ret

000027ce <ADC_VidStartConversion>:

void ADC_VidStartConversion()
{
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,Start_Conversion);
    27d6:	a6 e2       	ldi	r26, 0x26	; 38
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e6 e2       	ldi	r30, 0x26	; 38
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	80 64       	ori	r24, 0x40	; 64
    27e2:	8c 93       	st	X, r24
}
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <ADC_VidEnableAutoTriggerMode>:

void ADC_VidEnableAutoTriggerMode(u8 Copy_U8Mode)
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <ADC_VidEnableAutoTriggerMode+0x6>
    27f0:	0f 92       	push	r0
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8Mode){
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	28 2f       	mov	r18, r24
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	3b 83       	std	Y+3, r19	; 0x03
    2800:	2a 83       	std	Y+2, r18	; 0x02
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	9b 81       	ldd	r25, Y+3	; 0x03
    2806:	83 30       	cpi	r24, 0x03	; 3
    2808:	91 05       	cpc	r25, r1
    280a:	09 f4       	brne	.+2      	; 0x280e <ADC_VidEnableAutoTriggerMode+0x24>
    280c:	70 c0       	rjmp	.+224    	; 0x28ee <ADC_VidEnableAutoTriggerMode+0x104>
    280e:	2a 81       	ldd	r18, Y+2	; 0x02
    2810:	3b 81       	ldd	r19, Y+3	; 0x03
    2812:	24 30       	cpi	r18, 0x04	; 4
    2814:	31 05       	cpc	r19, r1
    2816:	84 f4       	brge	.+32     	; 0x2838 <ADC_VidEnableAutoTriggerMode+0x4e>
    2818:	8a 81       	ldd	r24, Y+2	; 0x02
    281a:	9b 81       	ldd	r25, Y+3	; 0x03
    281c:	81 30       	cpi	r24, 0x01	; 1
    281e:	91 05       	cpc	r25, r1
    2820:	d1 f1       	breq	.+116    	; 0x2896 <ADC_VidEnableAutoTriggerMode+0xac>
    2822:	2a 81       	ldd	r18, Y+2	; 0x02
    2824:	3b 81       	ldd	r19, Y+3	; 0x03
    2826:	22 30       	cpi	r18, 0x02	; 2
    2828:	31 05       	cpc	r19, r1
    282a:	0c f0       	brlt	.+2      	; 0x282e <ADC_VidEnableAutoTriggerMode+0x44>
    282c:	4a c0       	rjmp	.+148    	; 0x28c2 <ADC_VidEnableAutoTriggerMode+0xd8>
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	9b 81       	ldd	r25, Y+3	; 0x03
    2832:	00 97       	sbiw	r24, 0x00	; 0
    2834:	d1 f0       	breq	.+52     	; 0x286a <ADC_VidEnableAutoTriggerMode+0x80>
    2836:	c8 c0       	rjmp	.+400    	; 0x29c8 <ADC_VidEnableAutoTriggerMode+0x1de>
    2838:	2a 81       	ldd	r18, Y+2	; 0x02
    283a:	3b 81       	ldd	r19, Y+3	; 0x03
    283c:	25 30       	cpi	r18, 0x05	; 5
    283e:	31 05       	cpc	r19, r1
    2840:	09 f4       	brne	.+2      	; 0x2844 <ADC_VidEnableAutoTriggerMode+0x5a>
    2842:	81 c0       	rjmp	.+258    	; 0x2946 <ADC_VidEnableAutoTriggerMode+0x15c>
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
    2846:	9b 81       	ldd	r25, Y+3	; 0x03
    2848:	85 30       	cpi	r24, 0x05	; 5
    284a:	91 05       	cpc	r25, r1
    284c:	0c f4       	brge	.+2      	; 0x2850 <ADC_VidEnableAutoTriggerMode+0x66>
    284e:	65 c0       	rjmp	.+202    	; 0x291a <ADC_VidEnableAutoTriggerMode+0x130>
    2850:	2a 81       	ldd	r18, Y+2	; 0x02
    2852:	3b 81       	ldd	r19, Y+3	; 0x03
    2854:	26 30       	cpi	r18, 0x06	; 6
    2856:	31 05       	cpc	r19, r1
    2858:	09 f4       	brne	.+2      	; 0x285c <ADC_VidEnableAutoTriggerMode+0x72>
    285a:	8b c0       	rjmp	.+278    	; 0x2972 <ADC_VidEnableAutoTriggerMode+0x188>
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	9b 81       	ldd	r25, Y+3	; 0x03
    2860:	87 30       	cpi	r24, 0x07	; 7
    2862:	91 05       	cpc	r25, r1
    2864:	09 f4       	brne	.+2      	; 0x2868 <ADC_VidEnableAutoTriggerMode+0x7e>
    2866:	9b c0       	rjmp	.+310    	; 0x299e <ADC_VidEnableAutoTriggerMode+0x1b4>
    2868:	af c0       	rjmp	.+350    	; 0x29c8 <ADC_VidEnableAutoTriggerMode+0x1de>
	case 0: //free running mode
			CLR_BIT(SFIOR,5);
    286a:	a0 e5       	ldi	r26, 0x50	; 80
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	e0 e5       	ldi	r30, 0x50	; 80
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	8f 7d       	andi	r24, 0xDF	; 223
    2876:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,6);
    2878:	a0 e5       	ldi	r26, 0x50	; 80
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e0 e5       	ldi	r30, 0x50	; 80
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	8f 7b       	andi	r24, 0xBF	; 191
    2884:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,7);
    2886:	a0 e5       	ldi	r26, 0x50	; 80
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	e0 e5       	ldi	r30, 0x50	; 80
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	8f 77       	andi	r24, 0x7F	; 127
    2892:	8c 93       	st	X, r24
    2894:	99 c0       	rjmp	.+306    	; 0x29c8 <ADC_VidEnableAutoTriggerMode+0x1de>
			break;
	case 1://Analog Comparator
	        SET_BIT(SFIOR,5);
    2896:	a0 e5       	ldi	r26, 0x50	; 80
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e0 e5       	ldi	r30, 0x50	; 80
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	80 62       	ori	r24, 0x20	; 32
    28a2:	8c 93       	st	X, r24
	        CLR_BIT(SFIOR,6);
    28a4:	a0 e5       	ldi	r26, 0x50	; 80
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e0 e5       	ldi	r30, 0x50	; 80
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	8f 7b       	andi	r24, 0xBF	; 191
    28b0:	8c 93       	st	X, r24
	        CLR_BIT(SFIOR,7);
    28b2:	a0 e5       	ldi	r26, 0x50	; 80
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	e0 e5       	ldi	r30, 0x50	; 80
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	8f 77       	andi	r24, 0x7F	; 127
    28be:	8c 93       	st	X, r24
    28c0:	83 c0       	rjmp	.+262    	; 0x29c8 <ADC_VidEnableAutoTriggerMode+0x1de>
	        break;
	case 2://External Interrupt Request 0
			CLR_BIT(SFIOR,5);
    28c2:	a0 e5       	ldi	r26, 0x50	; 80
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e0 e5       	ldi	r30, 0x50	; 80
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	8f 7d       	andi	r24, 0xDF	; 223
    28ce:	8c 93       	st	X, r24
			SET_BIT(SFIOR,6);
    28d0:	a0 e5       	ldi	r26, 0x50	; 80
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	e0 e5       	ldi	r30, 0x50	; 80
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	80 64       	ori	r24, 0x40	; 64
    28dc:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,7);
    28de:	a0 e5       	ldi	r26, 0x50	; 80
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e0 e5       	ldi	r30, 0x50	; 80
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	8f 77       	andi	r24, 0x7F	; 127
    28ea:	8c 93       	st	X, r24
    28ec:	6d c0       	rjmp	.+218    	; 0x29c8 <ADC_VidEnableAutoTriggerMode+0x1de>
			break;
	case 3://Timer/Counter0 Compare Match
			SET_BIT(SFIOR,5);
    28ee:	a0 e5       	ldi	r26, 0x50	; 80
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	e0 e5       	ldi	r30, 0x50	; 80
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	80 62       	ori	r24, 0x20	; 32
    28fa:	8c 93       	st	X, r24
			SET_BIT(SFIOR,6);
    28fc:	a0 e5       	ldi	r26, 0x50	; 80
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e0 e5       	ldi	r30, 0x50	; 80
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	80 64       	ori	r24, 0x40	; 64
    2908:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,7);
    290a:	a0 e5       	ldi	r26, 0x50	; 80
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	e0 e5       	ldi	r30, 0x50	; 80
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	80 81       	ld	r24, Z
    2914:	8f 77       	andi	r24, 0x7F	; 127
    2916:	8c 93       	st	X, r24
    2918:	57 c0       	rjmp	.+174    	; 0x29c8 <ADC_VidEnableAutoTriggerMode+0x1de>
			break;
	case 4://Timer/Counter0 Overflow
			CLR_BIT(SFIOR,5);
    291a:	a0 e5       	ldi	r26, 0x50	; 80
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	e0 e5       	ldi	r30, 0x50	; 80
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	8f 7d       	andi	r24, 0xDF	; 223
    2926:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,6);
    2928:	a0 e5       	ldi	r26, 0x50	; 80
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e0 e5       	ldi	r30, 0x50	; 80
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	8f 7b       	andi	r24, 0xBF	; 191
    2934:	8c 93       	st	X, r24
			SET_BIT(SFIOR,7);
    2936:	a0 e5       	ldi	r26, 0x50	; 80
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e0 e5       	ldi	r30, 0x50	; 80
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	80 68       	ori	r24, 0x80	; 128
    2942:	8c 93       	st	X, r24
    2944:	41 c0       	rjmp	.+130    	; 0x29c8 <ADC_VidEnableAutoTriggerMode+0x1de>
			break;
	case 5://Timer/Counter1 Compare Match B
			SET_BIT(SFIOR,5);
    2946:	a0 e5       	ldi	r26, 0x50	; 80
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e0 e5       	ldi	r30, 0x50	; 80
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	80 62       	ori	r24, 0x20	; 32
    2952:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,6);
    2954:	a0 e5       	ldi	r26, 0x50	; 80
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e0 e5       	ldi	r30, 0x50	; 80
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	8f 7b       	andi	r24, 0xBF	; 191
    2960:	8c 93       	st	X, r24
			SET_BIT(SFIOR,7);
    2962:	a0 e5       	ldi	r26, 0x50	; 80
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e0 e5       	ldi	r30, 0x50	; 80
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	80 68       	ori	r24, 0x80	; 128
    296e:	8c 93       	st	X, r24
    2970:	2b c0       	rjmp	.+86     	; 0x29c8 <ADC_VidEnableAutoTriggerMode+0x1de>
			break;
	case 6://Timer/Counter1 Overflow
			CLR_BIT(SFIOR,5);
    2972:	a0 e5       	ldi	r26, 0x50	; 80
    2974:	b0 e0       	ldi	r27, 0x00	; 0
    2976:	e0 e5       	ldi	r30, 0x50	; 80
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	8f 7d       	andi	r24, 0xDF	; 223
    297e:	8c 93       	st	X, r24
			SET_BIT(SFIOR,6);
    2980:	a0 e5       	ldi	r26, 0x50	; 80
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	e0 e5       	ldi	r30, 0x50	; 80
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	80 64       	ori	r24, 0x40	; 64
    298c:	8c 93       	st	X, r24
			SET_BIT(SFIOR,7);
    298e:	a0 e5       	ldi	r26, 0x50	; 80
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e0 e5       	ldi	r30, 0x50	; 80
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	80 68       	ori	r24, 0x80	; 128
    299a:	8c 93       	st	X, r24
    299c:	15 c0       	rjmp	.+42     	; 0x29c8 <ADC_VidEnableAutoTriggerMode+0x1de>
			break;
	case 7://Timer/Counter1 Capture Event
			SET_BIT(SFIOR,5);
    299e:	a0 e5       	ldi	r26, 0x50	; 80
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e0 e5       	ldi	r30, 0x50	; 80
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	80 62       	ori	r24, 0x20	; 32
    29aa:	8c 93       	st	X, r24
			SET_BIT(SFIOR,6);
    29ac:	a0 e5       	ldi	r26, 0x50	; 80
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	e0 e5       	ldi	r30, 0x50	; 80
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	80 64       	ori	r24, 0x40	; 64
    29b8:	8c 93       	st	X, r24
			SET_BIT(SFIOR,7);
    29ba:	a0 e5       	ldi	r26, 0x50	; 80
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e0 e5       	ldi	r30, 0x50	; 80
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	80 68       	ori	r24, 0x80	; 128
    29c6:	8c 93       	st	X, r24
			break;
}
}
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <ADC_VidEnableInterrupt>:

void ADC_VidEnableInterrupt()
{
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADC_InterruptEnable);
    29dc:	a6 e2       	ldi	r26, 0x26	; 38
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	e6 e2       	ldi	r30, 0x26	; 38
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	88 60       	ori	r24, 0x08	; 8
    29e8:	8c 93       	st	X, r24
}
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <ADC_VidDisableInterrupt>:

void ADC_VidDisableInterrupt()
{
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADC_InterruptEnable);
    29f8:	a6 e2       	ldi	r26, 0x26	; 38
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	e6 e2       	ldi	r30, 0x26	; 38
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	87 7f       	andi	r24, 0xF7	; 247
    2a04:	8c 93       	st	X, r24
}
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	08 95       	ret

00002a0c <ADC_VidRead>:



u16 ADC_VidRead()
{
    2a0c:	df 93       	push	r29
    2a0e:	cf 93       	push	r28
    2a10:	00 d0       	rcall	.+0      	; 0x2a12 <ADC_VidRead+0x6>
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT( ADCSRA,ADC_InterruptFlag));
    2a16:	e6 e2       	ldi	r30, 0x26	; 38
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	82 95       	swap	r24
    2a1e:	8f 70       	andi	r24, 0x0F	; 15
    2a20:	88 23       	and	r24, r24
    2a22:	c9 f3       	breq	.-14     	; 0x2a16 <ADC_VidRead+0xa>
	SET_BIT(ADCSRA,ADC_InterruptEnable);		//to clear the flag set it to one
    2a24:	a6 e2       	ldi	r26, 0x26	; 38
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e6 e2       	ldi	r30, 0x26	; 38
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	88 60       	ori	r24, 0x08	; 8
    2a30:	8c 93       	st	X, r24
	u16 Copy_PU16ADC_Value = ADC;
    2a32:	e4 e2       	ldi	r30, 0x24	; 36
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	91 81       	ldd	r25, Z+1	; 0x01
    2a3a:	9a 83       	std	Y+2, r25	; 0x02
    2a3c:	89 83       	std	Y+1, r24	; 0x01
 	 return Copy_PU16ADC_Value;
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <LCD_VidSendData>:
#include "Lcd_Private.h"
#include "Lcd_Config.h"



void LCD_VidSendData(u8 Copy_U8Data){
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	0f 92       	push	r0
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
    2a56:	89 83       	std	Y+1, r24	; 0x01
	DIO_VidSetPinValue(PortC,Rs_Pin,Data);
    2a58:	82 e0       	ldi	r24, 0x02	; 2
    2a5a:	62 e0       	ldi	r22, 0x02	; 2
    2a5c:	41 e0       	ldi	r20, 0x01	; 1
    2a5e:	0e 94 93 10 	call	0x2126	; 0x2126 <DIO_VidSetPinValue>
	LCD_VidLatch(Copy_U8Data);
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_VidLatch>
}
    2a68:	0f 90       	pop	r0
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <LCD_VidSendCommand>:

void LCD_VidSendCommand(u8 Copy_U8Command){
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	0f 92       	push	r0
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	89 83       	std	Y+1, r24	; 0x01
	DIO_VidSetPinValue(PortC,Rs_Pin,Command);
    2a7c:	82 e0       	ldi	r24, 0x02	; 2
    2a7e:	62 e0       	ldi	r22, 0x02	; 2
    2a80:	40 e0       	ldi	r20, 0x00	; 0
    2a82:	0e 94 93 10 	call	0x2126	; 0x2126 <DIO_VidSetPinValue>
	LCD_VidLatch(Copy_U8Command);
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_VidLatch>
}
    2a8c:	0f 90       	pop	r0
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	08 95       	ret

00002a94 <LCD_VidLatch>:

static void LCD_VidLatch(u8 Copy_U8SendData){
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	6d 97       	sbiw	r28, 0x1d	; 29
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPinValue(PortC,Rw_Pin,Write);
    2aaa:	82 e0       	ldi	r24, 0x02	; 2
    2aac:	61 e0       	ldi	r22, 0x01	; 1
    2aae:	40 e0       	ldi	r20, 0x00	; 0
    2ab0:	0e 94 93 10 	call	0x2126	; 0x2126 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(PortD,Copy_U8SendData);
    2ab4:	83 e0       	ldi	r24, 0x03	; 3
    2ab6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2ab8:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(PortC,En_Pin,High);
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	41 e0       	ldi	r20, 0x01	; 1
    2ac2:	0e 94 93 10 	call	0x2126	; 0x2126 <DIO_VidSetPinValue>
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	a0 e8       	ldi	r26, 0x80	; 128
    2acc:	bf e3       	ldi	r27, 0x3F	; 63
    2ace:	89 8f       	std	Y+25, r24	; 0x19
    2ad0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ad2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ad4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ad8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ada:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2adc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	4a ef       	ldi	r20, 0xFA	; 250
    2ae4:	54 e4       	ldi	r21, 0x44	; 68
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	8d 8b       	std	Y+21, r24	; 0x15
    2af0:	9e 8b       	std	Y+22, r25	; 0x16
    2af2:	af 8b       	std	Y+23, r26	; 0x17
    2af4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2af6:	6d 89       	ldd	r22, Y+21	; 0x15
    2af8:	7e 89       	ldd	r23, Y+22	; 0x16
    2afa:	8f 89       	ldd	r24, Y+23	; 0x17
    2afc:	98 8d       	ldd	r25, Y+24	; 0x18
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e8       	ldi	r20, 0x80	; 128
    2b04:	5f e3       	ldi	r21, 0x3F	; 63
    2b06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b0a:	88 23       	and	r24, r24
    2b0c:	2c f4       	brge	.+10     	; 0x2b18 <LCD_VidLatch+0x84>
		__ticks = 1;
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	9c 8b       	std	Y+20, r25	; 0x14
    2b14:	8b 8b       	std	Y+19, r24	; 0x13
    2b16:	3f c0       	rjmp	.+126    	; 0x2b96 <LCD_VidLatch+0x102>
	else if (__tmp > 65535)
    2b18:	6d 89       	ldd	r22, Y+21	; 0x15
    2b1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	3f ef       	ldi	r19, 0xFF	; 255
    2b24:	4f e7       	ldi	r20, 0x7F	; 127
    2b26:	57 e4       	ldi	r21, 0x47	; 71
    2b28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b2c:	18 16       	cp	r1, r24
    2b2e:	4c f5       	brge	.+82     	; 0x2b82 <LCD_VidLatch+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b30:	69 8d       	ldd	r22, Y+25	; 0x19
    2b32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e2       	ldi	r20, 0x20	; 32
    2b3e:	51 e4       	ldi	r21, 0x41	; 65
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	9c 8b       	std	Y+20, r25	; 0x14
    2b56:	8b 8b       	std	Y+19, r24	; 0x13
    2b58:	0f c0       	rjmp	.+30     	; 0x2b78 <LCD_VidLatch+0xe4>
    2b5a:	88 ec       	ldi	r24, 0xC8	; 200
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	9a 8b       	std	Y+18, r25	; 0x12
    2b60:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b62:	89 89       	ldd	r24, Y+17	; 0x11
    2b64:	9a 89       	ldd	r25, Y+18	; 0x12
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <LCD_VidLatch+0xd2>
    2b6a:	9a 8b       	std	Y+18, r25	; 0x12
    2b6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b70:	9c 89       	ldd	r25, Y+20	; 0x14
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	9c 8b       	std	Y+20, r25	; 0x14
    2b76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b78:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7c:	00 97       	sbiw	r24, 0x00	; 0
    2b7e:	69 f7       	brne	.-38     	; 0x2b5a <LCD_VidLatch+0xc6>
    2b80:	14 c0       	rjmp	.+40     	; 0x2baa <LCD_VidLatch+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b82:	6d 89       	ldd	r22, Y+21	; 0x15
    2b84:	7e 89       	ldd	r23, Y+22	; 0x16
    2b86:	8f 89       	ldd	r24, Y+23	; 0x17
    2b88:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	9c 8b       	std	Y+20, r25	; 0x14
    2b94:	8b 8b       	std	Y+19, r24	; 0x13
    2b96:	8b 89       	ldd	r24, Y+19	; 0x13
    2b98:	9c 89       	ldd	r25, Y+20	; 0x14
    2b9a:	98 8b       	std	Y+16, r25	; 0x10
    2b9c:	8f 87       	std	Y+15, r24	; 0x0f
    2b9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba0:	98 89       	ldd	r25, Y+16	; 0x10
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <LCD_VidLatch+0x10e>
    2ba6:	98 8b       	std	Y+16, r25	; 0x10
    2ba8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(PortC,En_Pin,Low);
    2baa:	82 e0       	ldi	r24, 0x02	; 2
    2bac:	60 e0       	ldi	r22, 0x00	; 0
    2bae:	40 e0       	ldi	r20, 0x00	; 0
    2bb0:	0e 94 93 10 	call	0x2126	; 0x2126 <DIO_VidSetPinValue>
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	a8 e4       	ldi	r26, 0x48	; 72
    2bba:	b2 e4       	ldi	r27, 0x42	; 66
    2bbc:	8b 87       	std	Y+11, r24	; 0x0b
    2bbe:	9c 87       	std	Y+12, r25	; 0x0c
    2bc0:	ad 87       	std	Y+13, r26	; 0x0d
    2bc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	4a ef       	ldi	r20, 0xFA	; 250
    2bd2:	54 e4       	ldi	r21, 0x44	; 68
    2bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	8f 83       	std	Y+7, r24	; 0x07
    2bde:	98 87       	std	Y+8, r25	; 0x08
    2be0:	a9 87       	std	Y+9, r26	; 0x09
    2be2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2be4:	6f 81       	ldd	r22, Y+7	; 0x07
    2be6:	78 85       	ldd	r23, Y+8	; 0x08
    2be8:	89 85       	ldd	r24, Y+9	; 0x09
    2bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e8       	ldi	r20, 0x80	; 128
    2bf2:	5f e3       	ldi	r21, 0x3F	; 63
    2bf4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bf8:	88 23       	and	r24, r24
    2bfa:	2c f4       	brge	.+10     	; 0x2c06 <LCD_VidLatch+0x172>
		__ticks = 1;
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	9e 83       	std	Y+6, r25	; 0x06
    2c02:	8d 83       	std	Y+5, r24	; 0x05
    2c04:	3f c0       	rjmp	.+126    	; 0x2c84 <LCD_VidLatch+0x1f0>
	else if (__tmp > 65535)
    2c06:	6f 81       	ldd	r22, Y+7	; 0x07
    2c08:	78 85       	ldd	r23, Y+8	; 0x08
    2c0a:	89 85       	ldd	r24, Y+9	; 0x09
    2c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	3f ef       	ldi	r19, 0xFF	; 255
    2c12:	4f e7       	ldi	r20, 0x7F	; 127
    2c14:	57 e4       	ldi	r21, 0x47	; 71
    2c16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c1a:	18 16       	cp	r1, r24
    2c1c:	4c f5       	brge	.+82     	; 0x2c70 <LCD_VidLatch+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e2       	ldi	r20, 0x20	; 32
    2c2c:	51 e4       	ldi	r21, 0x41	; 65
    2c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	bc 01       	movw	r22, r24
    2c38:	cd 01       	movw	r24, r26
    2c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	9e 83       	std	Y+6, r25	; 0x06
    2c44:	8d 83       	std	Y+5, r24	; 0x05
    2c46:	0f c0       	rjmp	.+30     	; 0x2c66 <LCD_VidLatch+0x1d2>
    2c48:	88 ec       	ldi	r24, 0xC8	; 200
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	9c 83       	std	Y+4, r25	; 0x04
    2c4e:	8b 83       	std	Y+3, r24	; 0x03
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	9c 81       	ldd	r25, Y+4	; 0x04
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <LCD_VidLatch+0x1c0>
    2c58:	9c 83       	std	Y+4, r25	; 0x04
    2c5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	9e 83       	std	Y+6, r25	; 0x06
    2c64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c66:	8d 81       	ldd	r24, Y+5	; 0x05
    2c68:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	69 f7       	brne	.-38     	; 0x2c48 <LCD_VidLatch+0x1b4>
    2c6e:	14 c0       	rjmp	.+40     	; 0x2c98 <LCD_VidLatch+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c70:	6f 81       	ldd	r22, Y+7	; 0x07
    2c72:	78 85       	ldd	r23, Y+8	; 0x08
    2c74:	89 85       	ldd	r24, Y+9	; 0x09
    2c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	9e 83       	std	Y+6, r25	; 0x06
    2c82:	8d 83       	std	Y+5, r24	; 0x05
    2c84:	8d 81       	ldd	r24, Y+5	; 0x05
    2c86:	9e 81       	ldd	r25, Y+6	; 0x06
    2c88:	9a 83       	std	Y+2, r25	; 0x02
    2c8a:	89 83       	std	Y+1, r24	; 0x01
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <LCD_VidLatch+0x1fc>
    2c94:	9a 83       	std	Y+2, r25	; 0x02
    2c96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    2c98:	6d 96       	adiw	r28, 0x1d	; 29
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	de bf       	out	0x3e, r29	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	cf 91       	pop	r28
    2ca6:	df 91       	pop	r29
    2ca8:	08 95       	ret

00002caa <LCD_VidReadData>:

void LCD_VidReadData()
{
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
	LCD_VidGoToXY(1,0);//go to DDRAM
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_VidGoToXY>
	DIO_VidSetPinValue(PortC,Rs_Pin,Data);
    2cbe:	82 e0       	ldi	r24, 0x02	; 2
    2cc0:	62 e0       	ldi	r22, 0x02	; 2
    2cc2:	41 e0       	ldi	r20, 0x01	; 1
    2cc4:	0e 94 93 10 	call	0x2126	; 0x2126 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(PortC,Rw_Pin,Read);
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	61 e0       	ldi	r22, 0x01	; 1
    2ccc:	41 e0       	ldi	r20, 0x01	; 1
    2cce:	0e 94 93 10 	call	0x2126	; 0x2126 <DIO_VidSetPinValue>


}
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	08 95       	ret

00002cd8 <LCD_VIDPrintString>:
void LCD_VIDPrintString(u8 Copy_U8String[]){
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	00 d0       	rcall	.+0      	; 0x2cde <LCD_VIDPrintString+0x6>
    2cde:	00 d0       	rcall	.+0      	; 0x2ce0 <LCD_VIDPrintString+0x8>
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	9c 83       	std	Y+4, r25	; 0x04
    2ce6:	8b 83       	std	Y+3, r24	; 0x03

	for(int i=0;Copy_U8String[i]!='\0';i++)
    2ce8:	1a 82       	std	Y+2, r1	; 0x02
    2cea:	19 82       	std	Y+1, r1	; 0x01
    2cec:	0f c0       	rjmp	.+30     	; 0x2d0c <LCD_VIDPrintString+0x34>
	{
		LCD_VidSendData(Copy_U8String[i]);
    2cee:	29 81       	ldd	r18, Y+1	; 0x01
    2cf0:	3a 81       	ldd	r19, Y+2	; 0x02
    2cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	e2 0f       	add	r30, r18
    2cfa:	f3 1f       	adc	r31, r19
    2cfc:	80 81       	ld	r24, Z
    2cfe:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_VidSendData>


}
void LCD_VIDPrintString(u8 Copy_U8String[]){

	for(int i=0;Copy_U8String[i]!='\0';i++)
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	9a 81       	ldd	r25, Y+2	; 0x02
    2d06:	01 96       	adiw	r24, 0x01	; 1
    2d08:	9a 83       	std	Y+2, r25	; 0x02
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	29 81       	ldd	r18, Y+1	; 0x01
    2d0e:	3a 81       	ldd	r19, Y+2	; 0x02
    2d10:	8b 81       	ldd	r24, Y+3	; 0x03
    2d12:	9c 81       	ldd	r25, Y+4	; 0x04
    2d14:	fc 01       	movw	r30, r24
    2d16:	e2 0f       	add	r30, r18
    2d18:	f3 1f       	adc	r31, r19
    2d1a:	80 81       	ld	r24, Z
    2d1c:	88 23       	and	r24, r24
    2d1e:	39 f7       	brne	.-50     	; 0x2cee <LCD_VIDPrintString+0x16>
	{
		LCD_VidSendData(Copy_U8String[i]);
	}
}
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	08 95       	ret

00002d2e <LCD_VidInit>:

void LCD_VidInit(){
    2d2e:	0f 93       	push	r16
    2d30:	1f 93       	push	r17
    2d32:	df 93       	push	r29
    2d34:	cf 93       	push	r28
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
    2d3a:	c6 54       	subi	r28, 0x46	; 70
    2d3c:	d0 40       	sbci	r29, 0x00	; 0
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinDirection(PortC,En_Pin,Output);
    2d48:	82 e0       	ldi	r24, 0x02	; 2
    2d4a:	60 e0       	ldi	r22, 0x00	; 0
    2d4c:	41 e0       	ldi	r20, 0x01	; 1
    2d4e:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(PortC,En_Pin,Low);//to make the pulse from low
    2d52:	82 e0       	ldi	r24, 0x02	; 2
    2d54:	60 e0       	ldi	r22, 0x00	; 0
    2d56:	40 e0       	ldi	r20, 0x00	; 0
    2d58:	0e 94 93 10 	call	0x2126	; 0x2126 <DIO_VidSetPinValue>
	DIO_VidSetPinDirection(PortC,Rw_Pin,Output);
    2d5c:	82 e0       	ldi	r24, 0x02	; 2
    2d5e:	61 e0       	ldi	r22, 0x01	; 1
    2d60:	41 e0       	ldi	r20, 0x01	; 1
    2d62:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PortC,Rs_Pin,Output);
    2d66:	82 e0       	ldi	r24, 0x02	; 2
    2d68:	62 e0       	ldi	r22, 0x02	; 2
    2d6a:	41 e0       	ldi	r20, 0x01	; 1
    2d6c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <DIO_VidSetPinDirection>
	DIO_VidSetPortDirection(PortD,0xff);
    2d70:	83 e0       	ldi	r24, 0x03	; 3
    2d72:	6f ef       	ldi	r22, 0xFF	; 255
    2d74:	0e 94 93 11 	call	0x2326	; 0x2326 <DIO_VidSetPortDirection>
    2d78:	fe 01       	movw	r30, r28
    2d7a:	ed 5b       	subi	r30, 0xBD	; 189
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	a8 e4       	ldi	r26, 0x48	; 72
    2d84:	b2 e4       	ldi	r27, 0x42	; 66
    2d86:	80 83       	st	Z, r24
    2d88:	91 83       	std	Z+1, r25	; 0x01
    2d8a:	a2 83       	std	Z+2, r26	; 0x02
    2d8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d8e:	8e 01       	movw	r16, r28
    2d90:	01 5c       	subi	r16, 0xC1	; 193
    2d92:	1f 4f       	sbci	r17, 0xFF	; 255
    2d94:	fe 01       	movw	r30, r28
    2d96:	ed 5b       	subi	r30, 0xBD	; 189
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	60 81       	ld	r22, Z
    2d9c:	71 81       	ldd	r23, Z+1	; 0x01
    2d9e:	82 81       	ldd	r24, Z+2	; 0x02
    2da0:	93 81       	ldd	r25, Z+3	; 0x03
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	4a ef       	ldi	r20, 0xFA	; 250
    2da8:	54 e4       	ldi	r21, 0x44	; 68
    2daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	f8 01       	movw	r30, r16
    2db4:	80 83       	st	Z, r24
    2db6:	91 83       	std	Z+1, r25	; 0x01
    2db8:	a2 83       	std	Z+2, r26	; 0x02
    2dba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	ff 96       	adiw	r30, 0x3f	; 63
    2dc0:	60 81       	ld	r22, Z
    2dc2:	71 81       	ldd	r23, Z+1	; 0x01
    2dc4:	82 81       	ldd	r24, Z+2	; 0x02
    2dc6:	93 81       	ldd	r25, Z+3	; 0x03
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	40 e8       	ldi	r20, 0x80	; 128
    2dce:	5f e3       	ldi	r21, 0x3F	; 63
    2dd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dd4:	88 23       	and	r24, r24
    2dd6:	2c f4       	brge	.+10     	; 0x2de2 <LCD_VidInit+0xb4>
		__ticks = 1;
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	9e af       	std	Y+62, r25	; 0x3e
    2dde:	8d af       	std	Y+61, r24	; 0x3d
    2de0:	46 c0       	rjmp	.+140    	; 0x2e6e <LCD_VidInit+0x140>
	else if (__tmp > 65535)
    2de2:	fe 01       	movw	r30, r28
    2de4:	ff 96       	adiw	r30, 0x3f	; 63
    2de6:	60 81       	ld	r22, Z
    2de8:	71 81       	ldd	r23, Z+1	; 0x01
    2dea:	82 81       	ldd	r24, Z+2	; 0x02
    2dec:	93 81       	ldd	r25, Z+3	; 0x03
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	3f ef       	ldi	r19, 0xFF	; 255
    2df2:	4f e7       	ldi	r20, 0x7F	; 127
    2df4:	57 e4       	ldi	r21, 0x47	; 71
    2df6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dfa:	18 16       	cp	r1, r24
    2dfc:	64 f5       	brge	.+88     	; 0x2e56 <LCD_VidInit+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfe:	fe 01       	movw	r30, r28
    2e00:	ed 5b       	subi	r30, 0xBD	; 189
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	60 81       	ld	r22, Z
    2e06:	71 81       	ldd	r23, Z+1	; 0x01
    2e08:	82 81       	ldd	r24, Z+2	; 0x02
    2e0a:	93 81       	ldd	r25, Z+3	; 0x03
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e2       	ldi	r20, 0x20	; 32
    2e12:	51 e4       	ldi	r21, 0x41	; 65
    2e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	9e af       	std	Y+62, r25	; 0x3e
    2e2a:	8d af       	std	Y+61, r24	; 0x3d
    2e2c:	0f c0       	rjmp	.+30     	; 0x2e4c <LCD_VidInit+0x11e>
    2e2e:	88 ec       	ldi	r24, 0xC8	; 200
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	9c af       	std	Y+60, r25	; 0x3c
    2e34:	8b af       	std	Y+59, r24	; 0x3b
    2e36:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e38:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <LCD_VidInit+0x10c>
    2e3e:	9c af       	std	Y+60, r25	; 0x3c
    2e40:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e42:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e44:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	9e af       	std	Y+62, r25	; 0x3e
    2e4a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	69 f7       	brne	.-38     	; 0x2e2e <LCD_VidInit+0x100>
    2e54:	16 c0       	rjmp	.+44     	; 0x2e82 <LCD_VidInit+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e56:	fe 01       	movw	r30, r28
    2e58:	ff 96       	adiw	r30, 0x3f	; 63
    2e5a:	60 81       	ld	r22, Z
    2e5c:	71 81       	ldd	r23, Z+1	; 0x01
    2e5e:	82 81       	ldd	r24, Z+2	; 0x02
    2e60:	93 81       	ldd	r25, Z+3	; 0x03
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	9e af       	std	Y+62, r25	; 0x3e
    2e6c:	8d af       	std	Y+61, r24	; 0x3d
    2e6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e70:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e72:	9a af       	std	Y+58, r25	; 0x3a
    2e74:	89 af       	std	Y+57, r24	; 0x39
    2e76:	89 ad       	ldd	r24, Y+57	; 0x39
    2e78:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	f1 f7       	brne	.-4      	; 0x2e7a <LCD_VidInit+0x14c>
    2e7e:	9a af       	std	Y+58, r25	; 0x3a
    2e80:	89 af       	std	Y+57, r24	; 0x39

#if LCD_Mode==Eight_Bit
	_delay_ms(50);
	LCD_VidSendCommand(LCD_8BSetFunc);
    2e82:	88 e3       	ldi	r24, 0x38	; 56
    2e84:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_VidSendCommand>
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a0 e8       	ldi	r26, 0x80	; 128
    2e8e:	bf e3       	ldi	r27, 0x3F	; 63
    2e90:	8d ab       	std	Y+53, r24	; 0x35
    2e92:	9e ab       	std	Y+54, r25	; 0x36
    2e94:	af ab       	std	Y+55, r26	; 0x37
    2e96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e98:	6d a9       	ldd	r22, Y+53	; 0x35
    2e9a:	7e a9       	ldd	r23, Y+54	; 0x36
    2e9c:	8f a9       	ldd	r24, Y+55	; 0x37
    2e9e:	98 ad       	ldd	r25, Y+56	; 0x38
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	4a ef       	ldi	r20, 0xFA	; 250
    2ea6:	54 e4       	ldi	r21, 0x44	; 68
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	89 ab       	std	Y+49, r24	; 0x31
    2eb2:	9a ab       	std	Y+50, r25	; 0x32
    2eb4:	ab ab       	std	Y+51, r26	; 0x33
    2eb6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2eb8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eba:	7a a9       	ldd	r23, Y+50	; 0x32
    2ebc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ebe:	9c a9       	ldd	r25, Y+52	; 0x34
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e8       	ldi	r20, 0x80	; 128
    2ec6:	5f e3       	ldi	r21, 0x3F	; 63
    2ec8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ecc:	88 23       	and	r24, r24
    2ece:	2c f4       	brge	.+10     	; 0x2eda <LCD_VidInit+0x1ac>
		__ticks = 1;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	98 ab       	std	Y+48, r25	; 0x30
    2ed6:	8f a7       	std	Y+47, r24	; 0x2f
    2ed8:	3f c0       	rjmp	.+126    	; 0x2f58 <LCD_VidInit+0x22a>
	else if (__tmp > 65535)
    2eda:	69 a9       	ldd	r22, Y+49	; 0x31
    2edc:	7a a9       	ldd	r23, Y+50	; 0x32
    2ede:	8b a9       	ldd	r24, Y+51	; 0x33
    2ee0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	3f ef       	ldi	r19, 0xFF	; 255
    2ee6:	4f e7       	ldi	r20, 0x7F	; 127
    2ee8:	57 e4       	ldi	r21, 0x47	; 71
    2eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eee:	18 16       	cp	r1, r24
    2ef0:	4c f5       	brge	.+82     	; 0x2f44 <LCD_VidInit+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ef4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ef6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ef8:	98 ad       	ldd	r25, Y+56	; 0x38
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e2       	ldi	r20, 0x20	; 32
    2f00:	51 e4       	ldi	r21, 0x41	; 65
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	98 ab       	std	Y+48, r25	; 0x30
    2f18:	8f a7       	std	Y+47, r24	; 0x2f
    2f1a:	0f c0       	rjmp	.+30     	; 0x2f3a <LCD_VidInit+0x20c>
    2f1c:	88 ec       	ldi	r24, 0xC8	; 200
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	9e a7       	std	Y+46, r25	; 0x2e
    2f22:	8d a7       	std	Y+45, r24	; 0x2d
    2f24:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f26:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <LCD_VidInit+0x1fa>
    2f2c:	9e a7       	std	Y+46, r25	; 0x2e
    2f2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f32:	98 a9       	ldd	r25, Y+48	; 0x30
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	98 ab       	std	Y+48, r25	; 0x30
    2f38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	69 f7       	brne	.-38     	; 0x2f1c <LCD_VidInit+0x1ee>
    2f42:	14 c0       	rjmp	.+40     	; 0x2f6c <LCD_VidInit+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f44:	69 a9       	ldd	r22, Y+49	; 0x31
    2f46:	7a a9       	ldd	r23, Y+50	; 0x32
    2f48:	8b a9       	ldd	r24, Y+51	; 0x33
    2f4a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	98 ab       	std	Y+48, r25	; 0x30
    2f56:	8f a7       	std	Y+47, r24	; 0x2f
    2f58:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f5a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f5c:	9c a7       	std	Y+44, r25	; 0x2c
    2f5e:	8b a7       	std	Y+43, r24	; 0x2b
    2f60:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f62:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <LCD_VidInit+0x236>
    2f68:	9c a7       	std	Y+44, r25	; 0x2c
    2f6a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_VidSendCommand(LCD_8BDisplayControl);
    2f6c:	8e e0       	ldi	r24, 0x0E	; 14
    2f6e:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_VidSendCommand>
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	a0 e8       	ldi	r26, 0x80	; 128
    2f78:	bf e3       	ldi	r27, 0x3F	; 63
    2f7a:	8f a3       	std	Y+39, r24	; 0x27
    2f7c:	98 a7       	std	Y+40, r25	; 0x28
    2f7e:	a9 a7       	std	Y+41, r26	; 0x29
    2f80:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f82:	6f a1       	ldd	r22, Y+39	; 0x27
    2f84:	78 a5       	ldd	r23, Y+40	; 0x28
    2f86:	89 a5       	ldd	r24, Y+41	; 0x29
    2f88:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	4a ef       	ldi	r20, 0xFA	; 250
    2f90:	54 e4       	ldi	r21, 0x44	; 68
    2f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	8b a3       	std	Y+35, r24	; 0x23
    2f9c:	9c a3       	std	Y+36, r25	; 0x24
    2f9e:	ad a3       	std	Y+37, r26	; 0x25
    2fa0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fa2:	6b a1       	ldd	r22, Y+35	; 0x23
    2fa4:	7c a1       	ldd	r23, Y+36	; 0x24
    2fa6:	8d a1       	ldd	r24, Y+37	; 0x25
    2fa8:	9e a1       	ldd	r25, Y+38	; 0x26
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e8       	ldi	r20, 0x80	; 128
    2fb0:	5f e3       	ldi	r21, 0x3F	; 63
    2fb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fb6:	88 23       	and	r24, r24
    2fb8:	2c f4       	brge	.+10     	; 0x2fc4 <LCD_VidInit+0x296>
		__ticks = 1;
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	9a a3       	std	Y+34, r25	; 0x22
    2fc0:	89 a3       	std	Y+33, r24	; 0x21
    2fc2:	3f c0       	rjmp	.+126    	; 0x3042 <LCD_VidInit+0x314>
	else if (__tmp > 65535)
    2fc4:	6b a1       	ldd	r22, Y+35	; 0x23
    2fc6:	7c a1       	ldd	r23, Y+36	; 0x24
    2fc8:	8d a1       	ldd	r24, Y+37	; 0x25
    2fca:	9e a1       	ldd	r25, Y+38	; 0x26
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	3f ef       	ldi	r19, 0xFF	; 255
    2fd0:	4f e7       	ldi	r20, 0x7F	; 127
    2fd2:	57 e4       	ldi	r21, 0x47	; 71
    2fd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fd8:	18 16       	cp	r1, r24
    2fda:	4c f5       	brge	.+82     	; 0x302e <LCD_VidInit+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fdc:	6f a1       	ldd	r22, Y+39	; 0x27
    2fde:	78 a5       	ldd	r23, Y+40	; 0x28
    2fe0:	89 a5       	ldd	r24, Y+41	; 0x29
    2fe2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	40 e2       	ldi	r20, 0x20	; 32
    2fea:	51 e4       	ldi	r21, 0x41	; 65
    2fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	bc 01       	movw	r22, r24
    2ff6:	cd 01       	movw	r24, r26
    2ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	9a a3       	std	Y+34, r25	; 0x22
    3002:	89 a3       	std	Y+33, r24	; 0x21
    3004:	0f c0       	rjmp	.+30     	; 0x3024 <LCD_VidInit+0x2f6>
    3006:	88 ec       	ldi	r24, 0xC8	; 200
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	98 a3       	std	Y+32, r25	; 0x20
    300c:	8f 8f       	std	Y+31, r24	; 0x1f
    300e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3010:	98 a1       	ldd	r25, Y+32	; 0x20
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	f1 f7       	brne	.-4      	; 0x3012 <LCD_VidInit+0x2e4>
    3016:	98 a3       	std	Y+32, r25	; 0x20
    3018:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    301a:	89 a1       	ldd	r24, Y+33	; 0x21
    301c:	9a a1       	ldd	r25, Y+34	; 0x22
    301e:	01 97       	sbiw	r24, 0x01	; 1
    3020:	9a a3       	std	Y+34, r25	; 0x22
    3022:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3024:	89 a1       	ldd	r24, Y+33	; 0x21
    3026:	9a a1       	ldd	r25, Y+34	; 0x22
    3028:	00 97       	sbiw	r24, 0x00	; 0
    302a:	69 f7       	brne	.-38     	; 0x3006 <LCD_VidInit+0x2d8>
    302c:	14 c0       	rjmp	.+40     	; 0x3056 <LCD_VidInit+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302e:	6b a1       	ldd	r22, Y+35	; 0x23
    3030:	7c a1       	ldd	r23, Y+36	; 0x24
    3032:	8d a1       	ldd	r24, Y+37	; 0x25
    3034:	9e a1       	ldd	r25, Y+38	; 0x26
    3036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	9a a3       	std	Y+34, r25	; 0x22
    3040:	89 a3       	std	Y+33, r24	; 0x21
    3042:	89 a1       	ldd	r24, Y+33	; 0x21
    3044:	9a a1       	ldd	r25, Y+34	; 0x22
    3046:	9e 8f       	std	Y+30, r25	; 0x1e
    3048:	8d 8f       	std	Y+29, r24	; 0x1d
    304a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    304c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	f1 f7       	brne	.-4      	; 0x304e <LCD_VidInit+0x320>
    3052:	9e 8f       	std	Y+30, r25	; 0x1e
    3054:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VidSendCommand(LCD_8BDisplayClear);
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_VidSendCommand>
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	a0 e0       	ldi	r26, 0x00	; 0
    3062:	b0 e4       	ldi	r27, 0x40	; 64
    3064:	89 8f       	std	Y+25, r24	; 0x19
    3066:	9a 8f       	std	Y+26, r25	; 0x1a
    3068:	ab 8f       	std	Y+27, r26	; 0x1b
    306a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306c:	69 8d       	ldd	r22, Y+25	; 0x19
    306e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3070:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3072:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	4a ef       	ldi	r20, 0xFA	; 250
    307a:	54 e4       	ldi	r21, 0x44	; 68
    307c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	8d 8b       	std	Y+21, r24	; 0x15
    3086:	9e 8b       	std	Y+22, r25	; 0x16
    3088:	af 8b       	std	Y+23, r26	; 0x17
    308a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    308c:	6d 89       	ldd	r22, Y+21	; 0x15
    308e:	7e 89       	ldd	r23, Y+22	; 0x16
    3090:	8f 89       	ldd	r24, Y+23	; 0x17
    3092:	98 8d       	ldd	r25, Y+24	; 0x18
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	40 e8       	ldi	r20, 0x80	; 128
    309a:	5f e3       	ldi	r21, 0x3F	; 63
    309c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a0:	88 23       	and	r24, r24
    30a2:	2c f4       	brge	.+10     	; 0x30ae <LCD_VidInit+0x380>
		__ticks = 1;
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	9c 8b       	std	Y+20, r25	; 0x14
    30aa:	8b 8b       	std	Y+19, r24	; 0x13
    30ac:	3f c0       	rjmp	.+126    	; 0x312c <LCD_VidInit+0x3fe>
	else if (__tmp > 65535)
    30ae:	6d 89       	ldd	r22, Y+21	; 0x15
    30b0:	7e 89       	ldd	r23, Y+22	; 0x16
    30b2:	8f 89       	ldd	r24, Y+23	; 0x17
    30b4:	98 8d       	ldd	r25, Y+24	; 0x18
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	3f ef       	ldi	r19, 0xFF	; 255
    30ba:	4f e7       	ldi	r20, 0x7F	; 127
    30bc:	57 e4       	ldi	r21, 0x47	; 71
    30be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c2:	18 16       	cp	r1, r24
    30c4:	4c f5       	brge	.+82     	; 0x3118 <LCD_VidInit+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c6:	69 8d       	ldd	r22, Y+25	; 0x19
    30c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	40 e2       	ldi	r20, 0x20	; 32
    30d4:	51 e4       	ldi	r21, 0x41	; 65
    30d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	bc 01       	movw	r22, r24
    30e0:	cd 01       	movw	r24, r26
    30e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	9c 8b       	std	Y+20, r25	; 0x14
    30ec:	8b 8b       	std	Y+19, r24	; 0x13
    30ee:	0f c0       	rjmp	.+30     	; 0x310e <LCD_VidInit+0x3e0>
    30f0:	88 ec       	ldi	r24, 0xC8	; 200
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	9a 8b       	std	Y+18, r25	; 0x12
    30f6:	89 8b       	std	Y+17, r24	; 0x11
    30f8:	89 89       	ldd	r24, Y+17	; 0x11
    30fa:	9a 89       	ldd	r25, Y+18	; 0x12
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	f1 f7       	brne	.-4      	; 0x30fc <LCD_VidInit+0x3ce>
    3100:	9a 8b       	std	Y+18, r25	; 0x12
    3102:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3104:	8b 89       	ldd	r24, Y+19	; 0x13
    3106:	9c 89       	ldd	r25, Y+20	; 0x14
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	9c 8b       	std	Y+20, r25	; 0x14
    310c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    310e:	8b 89       	ldd	r24, Y+19	; 0x13
    3110:	9c 89       	ldd	r25, Y+20	; 0x14
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	69 f7       	brne	.-38     	; 0x30f0 <LCD_VidInit+0x3c2>
    3116:	14 c0       	rjmp	.+40     	; 0x3140 <LCD_VidInit+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3118:	6d 89       	ldd	r22, Y+21	; 0x15
    311a:	7e 89       	ldd	r23, Y+22	; 0x16
    311c:	8f 89       	ldd	r24, Y+23	; 0x17
    311e:	98 8d       	ldd	r25, Y+24	; 0x18
    3120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	9c 8b       	std	Y+20, r25	; 0x14
    312a:	8b 8b       	std	Y+19, r24	; 0x13
    312c:	8b 89       	ldd	r24, Y+19	; 0x13
    312e:	9c 89       	ldd	r25, Y+20	; 0x14
    3130:	98 8b       	std	Y+16, r25	; 0x10
    3132:	8f 87       	std	Y+15, r24	; 0x0f
    3134:	8f 85       	ldd	r24, Y+15	; 0x0f
    3136:	98 89       	ldd	r25, Y+16	; 0x10
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	f1 f7       	brne	.-4      	; 0x3138 <LCD_VidInit+0x40a>
    313c:	98 8b       	std	Y+16, r25	; 0x10
    313e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_VidSendCommand(LCD_8BModeSet);
    3140:	83 e0       	ldi	r24, 0x03	; 3
    3142:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_VidSendCommand>
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	a0 e0       	ldi	r26, 0x00	; 0
    314c:	b0 e4       	ldi	r27, 0x40	; 64
    314e:	8b 87       	std	Y+11, r24	; 0x0b
    3150:	9c 87       	std	Y+12, r25	; 0x0c
    3152:	ad 87       	std	Y+13, r26	; 0x0d
    3154:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3156:	6b 85       	ldd	r22, Y+11	; 0x0b
    3158:	7c 85       	ldd	r23, Y+12	; 0x0c
    315a:	8d 85       	ldd	r24, Y+13	; 0x0d
    315c:	9e 85       	ldd	r25, Y+14	; 0x0e
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	4a ef       	ldi	r20, 0xFA	; 250
    3164:	54 e4       	ldi	r21, 0x44	; 68
    3166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	8f 83       	std	Y+7, r24	; 0x07
    3170:	98 87       	std	Y+8, r25	; 0x08
    3172:	a9 87       	std	Y+9, r26	; 0x09
    3174:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3176:	6f 81       	ldd	r22, Y+7	; 0x07
    3178:	78 85       	ldd	r23, Y+8	; 0x08
    317a:	89 85       	ldd	r24, Y+9	; 0x09
    317c:	9a 85       	ldd	r25, Y+10	; 0x0a
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	40 e8       	ldi	r20, 0x80	; 128
    3184:	5f e3       	ldi	r21, 0x3F	; 63
    3186:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    318a:	88 23       	and	r24, r24
    318c:	2c f4       	brge	.+10     	; 0x3198 <LCD_VidInit+0x46a>
		__ticks = 1;
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	9e 83       	std	Y+6, r25	; 0x06
    3194:	8d 83       	std	Y+5, r24	; 0x05
    3196:	3f c0       	rjmp	.+126    	; 0x3216 <LCD_VidInit+0x4e8>
	else if (__tmp > 65535)
    3198:	6f 81       	ldd	r22, Y+7	; 0x07
    319a:	78 85       	ldd	r23, Y+8	; 0x08
    319c:	89 85       	ldd	r24, Y+9	; 0x09
    319e:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	3f ef       	ldi	r19, 0xFF	; 255
    31a4:	4f e7       	ldi	r20, 0x7F	; 127
    31a6:	57 e4       	ldi	r21, 0x47	; 71
    31a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ac:	18 16       	cp	r1, r24
    31ae:	4c f5       	brge	.+82     	; 0x3202 <LCD_VidInit+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	40 e2       	ldi	r20, 0x20	; 32
    31be:	51 e4       	ldi	r21, 0x41	; 65
    31c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	bc 01       	movw	r22, r24
    31ca:	cd 01       	movw	r24, r26
    31cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	9e 83       	std	Y+6, r25	; 0x06
    31d6:	8d 83       	std	Y+5, r24	; 0x05
    31d8:	0f c0       	rjmp	.+30     	; 0x31f8 <LCD_VidInit+0x4ca>
    31da:	88 ec       	ldi	r24, 0xC8	; 200
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	9c 83       	std	Y+4, r25	; 0x04
    31e0:	8b 83       	std	Y+3, r24	; 0x03
    31e2:	8b 81       	ldd	r24, Y+3	; 0x03
    31e4:	9c 81       	ldd	r25, Y+4	; 0x04
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	f1 f7       	brne	.-4      	; 0x31e6 <LCD_VidInit+0x4b8>
    31ea:	9c 83       	std	Y+4, r25	; 0x04
    31ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ee:	8d 81       	ldd	r24, Y+5	; 0x05
    31f0:	9e 81       	ldd	r25, Y+6	; 0x06
    31f2:	01 97       	sbiw	r24, 0x01	; 1
    31f4:	9e 83       	std	Y+6, r25	; 0x06
    31f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f8:	8d 81       	ldd	r24, Y+5	; 0x05
    31fa:	9e 81       	ldd	r25, Y+6	; 0x06
    31fc:	00 97       	sbiw	r24, 0x00	; 0
    31fe:	69 f7       	brne	.-38     	; 0x31da <LCD_VidInit+0x4ac>
    3200:	14 c0       	rjmp	.+40     	; 0x322a <LCD_VidInit+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3202:	6f 81       	ldd	r22, Y+7	; 0x07
    3204:	78 85       	ldd	r23, Y+8	; 0x08
    3206:	89 85       	ldd	r24, Y+9	; 0x09
    3208:	9a 85       	ldd	r25, Y+10	; 0x0a
    320a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	9e 83       	std	Y+6, r25	; 0x06
    3214:	8d 83       	std	Y+5, r24	; 0x05
    3216:	8d 81       	ldd	r24, Y+5	; 0x05
    3218:	9e 81       	ldd	r25, Y+6	; 0x06
    321a:	9a 83       	std	Y+2, r25	; 0x02
    321c:	89 83       	std	Y+1, r24	; 0x01
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	9a 81       	ldd	r25, Y+2	; 0x02
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	f1 f7       	brne	.-4      	; 0x3222 <LCD_VidInit+0x4f4>
    3226:	9a 83       	std	Y+2, r25	; 0x02
    3228:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidSendCommand(0x70);

#else
#error "wrong mode"
#endif
}
    322a:	ca 5b       	subi	r28, 0xBA	; 186
    322c:	df 4f       	sbci	r29, 0xFF	; 255
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	de bf       	out	0x3e, r29	; 62
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	cd bf       	out	0x3d, r28	; 61
    3238:	cf 91       	pop	r28
    323a:	df 91       	pop	r29
    323c:	1f 91       	pop	r17
    323e:	0f 91       	pop	r16
    3240:	08 95       	ret

00003242 <LCD_VidGoToXY>:

void LCD_VidGoToXY(u8 Copy_U8Row,u8 Copy_U8col ){
    3242:	df 93       	push	r29
    3244:	cf 93       	push	r28
    3246:	00 d0       	rcall	.+0      	; 0x3248 <LCD_VidGoToXY+0x6>
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	89 83       	std	Y+1, r24	; 0x01
    324e:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_U8Row==0)
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	88 23       	and	r24, r24
    3254:	29 f4       	brne	.+10     	; 0x3260 <LCD_VidGoToXY+0x1e>
	{
		LCD_VidSendCommand(128+Copy_U8col);
    3256:	8a 81       	ldd	r24, Y+2	; 0x02
    3258:	80 58       	subi	r24, 0x80	; 128
    325a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_VidSendCommand>
    325e:	07 c0       	rjmp	.+14     	; 0x326e <LCD_VidGoToXY+0x2c>
	}
	else if(Copy_U8Row==1)
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	81 30       	cpi	r24, 0x01	; 1
    3264:	21 f4       	brne	.+8      	; 0x326e <LCD_VidGoToXY+0x2c>
	{
		LCD_VidSendCommand(128+64+Copy_U8col);
    3266:	8a 81       	ldd	r24, Y+2	; 0x02
    3268:	80 54       	subi	r24, 0x40	; 64
    326a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_VidSendCommand>
	}	}
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	cf 91       	pop	r28
    3274:	df 91       	pop	r29
    3276:	08 95       	ret

00003278 <LCD_VidDraw>:


void LCD_VidDraw(u8* Copy_U8Draw , u8 Copy_U8Size ){
    3278:	df 93       	push	r29
    327a:	cf 93       	push	r28
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
    3280:	27 97       	sbiw	r28, 0x07	; 7
    3282:	0f b6       	in	r0, 0x3f	; 63
    3284:	f8 94       	cli
    3286:	de bf       	out	0x3e, r29	; 62
    3288:	0f be       	out	0x3f, r0	; 63
    328a:	cd bf       	out	0x3d, r28	; 61
    328c:	9e 83       	std	Y+6, r25	; 0x06
    328e:	8d 83       	std	Y+5, r24	; 0x05
    3290:	6f 83       	std	Y+7, r22	; 0x07

	LCD_VidSendCommand(CGRAM_ADDRESS);//set CGRAM address
    3292:	80 e4       	ldi	r24, 0x40	; 64
    3294:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_VidSendCommand>

	for(int Local_U8Iterator=0;Local_U8Iterator<Copy_U8Size*8;Local_U8Iterator++){
    3298:	1c 82       	std	Y+4, r1	; 0x04
    329a:	1b 82       	std	Y+3, r1	; 0x03
    329c:	0f c0       	rjmp	.+30     	; 0x32bc <LCD_VidDraw+0x44>
		LCD_VidSendData(Copy_U8Draw[Local_U8Iterator]);
    329e:	2b 81       	ldd	r18, Y+3	; 0x03
    32a0:	3c 81       	ldd	r19, Y+4	; 0x04
    32a2:	8d 81       	ldd	r24, Y+5	; 0x05
    32a4:	9e 81       	ldd	r25, Y+6	; 0x06
    32a6:	fc 01       	movw	r30, r24
    32a8:	e2 0f       	add	r30, r18
    32aa:	f3 1f       	adc	r31, r19
    32ac:	80 81       	ld	r24, Z
    32ae:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_VidSendData>

void LCD_VidDraw(u8* Copy_U8Draw , u8 Copy_U8Size ){

	LCD_VidSendCommand(CGRAM_ADDRESS);//set CGRAM address

	for(int Local_U8Iterator=0;Local_U8Iterator<Copy_U8Size*8;Local_U8Iterator++){
    32b2:	8b 81       	ldd	r24, Y+3	; 0x03
    32b4:	9c 81       	ldd	r25, Y+4	; 0x04
    32b6:	01 96       	adiw	r24, 0x01	; 1
    32b8:	9c 83       	std	Y+4, r25	; 0x04
    32ba:	8b 83       	std	Y+3, r24	; 0x03
    32bc:	8f 81       	ldd	r24, Y+7	; 0x07
    32be:	88 2f       	mov	r24, r24
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	9c 01       	movw	r18, r24
    32c4:	22 0f       	add	r18, r18
    32c6:	33 1f       	adc	r19, r19
    32c8:	22 0f       	add	r18, r18
    32ca:	33 1f       	adc	r19, r19
    32cc:	22 0f       	add	r18, r18
    32ce:	33 1f       	adc	r19, r19
    32d0:	8b 81       	ldd	r24, Y+3	; 0x03
    32d2:	9c 81       	ldd	r25, Y+4	; 0x04
    32d4:	82 17       	cp	r24, r18
    32d6:	93 07       	cpc	r25, r19
    32d8:	14 f3       	brlt	.-60     	; 0x329e <LCD_VidDraw+0x26>
		LCD_VidSendData(Copy_U8Draw[Local_U8Iterator]);
	}

	LCD_VidSendCommand(0x04);//set entry mode
    32da:	84 e0       	ldi	r24, 0x04	; 4
    32dc:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_VidSendCommand>
 	LCD_VidGoToXY(POS_X,POS_Y);
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	63 e0       	ldi	r22, 0x03	; 3
    32e4:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_VidGoToXY>
	for(int Local_U8Iterator=0;Local_U8Iterator<Copy_U8Size;Local_U8Iterator++){
    32e8:	1a 82       	std	Y+2, r1	; 0x02
    32ea:	19 82       	std	Y+1, r1	; 0x01
    32ec:	08 c0       	rjmp	.+16     	; 0x32fe <LCD_VidDraw+0x86>
		LCD_VidSendData(Local_U8Iterator);
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_VidSendData>
		LCD_VidSendData(Copy_U8Draw[Local_U8Iterator]);
	}

	LCD_VidSendCommand(0x04);//set entry mode
 	LCD_VidGoToXY(POS_X,POS_Y);
	for(int Local_U8Iterator=0;Local_U8Iterator<Copy_U8Size;Local_U8Iterator++){
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	9a 81       	ldd	r25, Y+2	; 0x02
    32f8:	01 96       	adiw	r24, 0x01	; 1
    32fa:	9a 83       	std	Y+2, r25	; 0x02
    32fc:	89 83       	std	Y+1, r24	; 0x01
    32fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3300:	28 2f       	mov	r18, r24
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	9a 81       	ldd	r25, Y+2	; 0x02
    3308:	82 17       	cp	r24, r18
    330a:	93 07       	cpc	r25, r19
    330c:	84 f3       	brlt	.-32     	; 0x32ee <LCD_VidDraw+0x76>
		LCD_VidSendData(Local_U8Iterator);
	}
}
    330e:	27 96       	adiw	r28, 0x07	; 7
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	f8 94       	cli
    3314:	de bf       	out	0x3e, r29	; 62
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	cd bf       	out	0x3d, r28	; 61
    331a:	cf 91       	pop	r28
    331c:	df 91       	pop	r29
    331e:	08 95       	ret

00003320 <LCD_VidClearDisplay>:

void LCD_VidClearDisplay()
{
    3320:	df 93       	push	r29
    3322:	cf 93       	push	r28
    3324:	cd b7       	in	r28, 0x3d	; 61
    3326:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(LCD_8BDisplayClear);
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_VidSendCommand>
}
    332e:	cf 91       	pop	r28
    3330:	df 91       	pop	r29
    3332:	08 95       	ret

00003334 <LCD_VidMovingDraw>:

void LCD_VidMovingDraw(u8* Copy_U8Draw, u8 Copy_U8Size ){
    3334:	df 93       	push	r29
    3336:	cf 93       	push	r28
    3338:	cd b7       	in	r28, 0x3d	; 61
    333a:	de b7       	in	r29, 0x3e	; 62
    333c:	65 97       	sbiw	r28, 0x15	; 21
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	de bf       	out	0x3e, r29	; 62
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	cd bf       	out	0x3d, r28	; 61
    3348:	9c 8b       	std	Y+20, r25	; 0x14
    334a:	8b 8b       	std	Y+19, r24	; 0x13
    334c:	6d 8b       	std	Y+21, r22	; 0x15
	//LCD_VidSendCommand(LCD_8BDisplayClear);
	u8 i=0,j=0;
    334e:	1a 8a       	std	Y+18, r1	; 0x12
    3350:	19 8a       	std	Y+17, r1	; 0x11
    3352:	a2 c0       	rjmp	.+324    	; 0x3498 <LCD_VidMovingDraw+0x164>
	//LCD_VidSendCommand(0x04+decrease);
	while(j<2){
	while(i+POS_Y<16){
		LCD_VidSendCommand(LCD_8BDisplayClear);
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	0e 94 38 15 	call	0x2a70	; 0x2a70 <LCD_VidSendCommand>
		LCD_VidGoToXY(POS_X+j,POS_Y+i);
    335a:	8a 89       	ldd	r24, Y+18	; 0x12
    335c:	98 2f       	mov	r25, r24
    335e:	9d 5f       	subi	r25, 0xFD	; 253
    3360:	89 89       	ldd	r24, Y+17	; 0x11
    3362:	69 2f       	mov	r22, r25
    3364:	0e 94 21 19 	call	0x3242	; 0x3242 <LCD_VidGoToXY>
		i+=Copy_U8Size;
    3368:	9a 89       	ldd	r25, Y+18	; 0x12
    336a:	8d 89       	ldd	r24, Y+21	; 0x15
    336c:	89 0f       	add	r24, r25
    336e:	8a 8b       	std	Y+18, r24	; 0x12
		for(int Local_U8Iterator=0;Local_U8Iterator<Copy_U8Size;Local_U8Iterator++){
    3370:	18 8a       	std	Y+16, r1	; 0x10
    3372:	1f 86       	std	Y+15, r1	; 0x0f
    3374:	0b c0       	rjmp	.+22     	; 0x338c <LCD_VidMovingDraw+0x58>
				LCD_VidSendData(Copy_U8Size-1-Local_U8Iterator);
    3376:	9f 85       	ldd	r25, Y+15	; 0x0f
    3378:	8d 89       	ldd	r24, Y+21	; 0x15
    337a:	89 1b       	sub	r24, r25
    337c:	81 50       	subi	r24, 0x01	; 1
    337e:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_VidSendData>
	while(j<2){
	while(i+POS_Y<16){
		LCD_VidSendCommand(LCD_8BDisplayClear);
		LCD_VidGoToXY(POS_X+j,POS_Y+i);
		i+=Copy_U8Size;
		for(int Local_U8Iterator=0;Local_U8Iterator<Copy_U8Size;Local_U8Iterator++){
    3382:	8f 85       	ldd	r24, Y+15	; 0x0f
    3384:	98 89       	ldd	r25, Y+16	; 0x10
    3386:	01 96       	adiw	r24, 0x01	; 1
    3388:	98 8b       	std	Y+16, r25	; 0x10
    338a:	8f 87       	std	Y+15, r24	; 0x0f
    338c:	8d 89       	ldd	r24, Y+21	; 0x15
    338e:	28 2f       	mov	r18, r24
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	8f 85       	ldd	r24, Y+15	; 0x0f
    3394:	98 89       	ldd	r25, Y+16	; 0x10
    3396:	82 17       	cp	r24, r18
    3398:	93 07       	cpc	r25, r19
    339a:	6c f3       	brlt	.-38     	; 0x3376 <LCD_VidMovingDraw+0x42>
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	90 e8       	ldi	r25, 0x80	; 128
    33a0:	ab e3       	ldi	r26, 0x3B	; 59
    33a2:	b5 e4       	ldi	r27, 0x45	; 69
    33a4:	8b 87       	std	Y+11, r24	; 0x0b
    33a6:	9c 87       	std	Y+12, r25	; 0x0c
    33a8:	ad 87       	std	Y+13, r26	; 0x0d
    33aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    33ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	4a ef       	ldi	r20, 0xFA	; 250
    33ba:	54 e4       	ldi	r21, 0x44	; 68
    33bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	8f 83       	std	Y+7, r24	; 0x07
    33c6:	98 87       	std	Y+8, r25	; 0x08
    33c8:	a9 87       	std	Y+9, r26	; 0x09
    33ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33cc:	6f 81       	ldd	r22, Y+7	; 0x07
    33ce:	78 85       	ldd	r23, Y+8	; 0x08
    33d0:	89 85       	ldd	r24, Y+9	; 0x09
    33d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	40 e8       	ldi	r20, 0x80	; 128
    33da:	5f e3       	ldi	r21, 0x3F	; 63
    33dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33e0:	88 23       	and	r24, r24
    33e2:	2c f4       	brge	.+10     	; 0x33ee <LCD_VidMovingDraw+0xba>
		__ticks = 1;
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	9e 83       	std	Y+6, r25	; 0x06
    33ea:	8d 83       	std	Y+5, r24	; 0x05
    33ec:	3f c0       	rjmp	.+126    	; 0x346c <LCD_VidMovingDraw+0x138>
	else if (__tmp > 65535)
    33ee:	6f 81       	ldd	r22, Y+7	; 0x07
    33f0:	78 85       	ldd	r23, Y+8	; 0x08
    33f2:	89 85       	ldd	r24, Y+9	; 0x09
    33f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	3f ef       	ldi	r19, 0xFF	; 255
    33fa:	4f e7       	ldi	r20, 0x7F	; 127
    33fc:	57 e4       	ldi	r21, 0x47	; 71
    33fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3402:	18 16       	cp	r1, r24
    3404:	4c f5       	brge	.+82     	; 0x3458 <LCD_VidMovingDraw+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3406:	6b 85       	ldd	r22, Y+11	; 0x0b
    3408:	7c 85       	ldd	r23, Y+12	; 0x0c
    340a:	8d 85       	ldd	r24, Y+13	; 0x0d
    340c:	9e 85       	ldd	r25, Y+14	; 0x0e
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	40 e2       	ldi	r20, 0x20	; 32
    3414:	51 e4       	ldi	r21, 0x41	; 65
    3416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	bc 01       	movw	r22, r24
    3420:	cd 01       	movw	r24, r26
    3422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	9e 83       	std	Y+6, r25	; 0x06
    342c:	8d 83       	std	Y+5, r24	; 0x05
    342e:	0f c0       	rjmp	.+30     	; 0x344e <LCD_VidMovingDraw+0x11a>
    3430:	88 ec       	ldi	r24, 0xC8	; 200
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	9c 83       	std	Y+4, r25	; 0x04
    3436:	8b 83       	std	Y+3, r24	; 0x03
    3438:	8b 81       	ldd	r24, Y+3	; 0x03
    343a:	9c 81       	ldd	r25, Y+4	; 0x04
    343c:	01 97       	sbiw	r24, 0x01	; 1
    343e:	f1 f7       	brne	.-4      	; 0x343c <LCD_VidMovingDraw+0x108>
    3440:	9c 83       	std	Y+4, r25	; 0x04
    3442:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3444:	8d 81       	ldd	r24, Y+5	; 0x05
    3446:	9e 81       	ldd	r25, Y+6	; 0x06
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	9e 83       	std	Y+6, r25	; 0x06
    344c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344e:	8d 81       	ldd	r24, Y+5	; 0x05
    3450:	9e 81       	ldd	r25, Y+6	; 0x06
    3452:	00 97       	sbiw	r24, 0x00	; 0
    3454:	69 f7       	brne	.-38     	; 0x3430 <LCD_VidMovingDraw+0xfc>
    3456:	14 c0       	rjmp	.+40     	; 0x3480 <LCD_VidMovingDraw+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3458:	6f 81       	ldd	r22, Y+7	; 0x07
    345a:	78 85       	ldd	r23, Y+8	; 0x08
    345c:	89 85       	ldd	r24, Y+9	; 0x09
    345e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	9e 83       	std	Y+6, r25	; 0x06
    346a:	8d 83       	std	Y+5, r24	; 0x05
    346c:	8d 81       	ldd	r24, Y+5	; 0x05
    346e:	9e 81       	ldd	r25, Y+6	; 0x06
    3470:	9a 83       	std	Y+2, r25	; 0x02
    3472:	89 83       	std	Y+1, r24	; 0x01
    3474:	89 81       	ldd	r24, Y+1	; 0x01
    3476:	9a 81       	ldd	r25, Y+2	; 0x02
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	f1 f7       	brne	.-4      	; 0x3478 <LCD_VidMovingDraw+0x144>
    347c:	9a 83       	std	Y+2, r25	; 0x02
    347e:	89 83       	std	Y+1, r24	; 0x01
void LCD_VidMovingDraw(u8* Copy_U8Draw, u8 Copy_U8Size ){
	//LCD_VidSendCommand(LCD_8BDisplayClear);
	u8 i=0,j=0;
	//LCD_VidSendCommand(0x04+decrease);
	while(j<2){
	while(i+POS_Y<16){
    3480:	8a 89       	ldd	r24, Y+18	; 0x12
    3482:	88 2f       	mov	r24, r24
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	03 96       	adiw	r24, 0x03	; 3
    3488:	80 31       	cpi	r24, 0x10	; 16
    348a:	91 05       	cpc	r25, r1
    348c:	0c f4       	brge	.+2      	; 0x3490 <LCD_VidMovingDraw+0x15c>
    348e:	62 cf       	rjmp	.-316    	; 0x3354 <LCD_VidMovingDraw+0x20>
		for(int Local_U8Iterator=0;Local_U8Iterator<Copy_U8Size;Local_U8Iterator++){
				LCD_VidSendData(Copy_U8Size-1-Local_U8Iterator);
			}
		_delay_ms(3000);
	}
	j++;
    3490:	89 89       	ldd	r24, Y+17	; 0x11
    3492:	8f 5f       	subi	r24, 0xFF	; 255
    3494:	89 8b       	std	Y+17, r24	; 0x11
	i=0;}
    3496:	1a 8a       	std	Y+18, r1	; 0x12

void LCD_VidMovingDraw(u8* Copy_U8Draw, u8 Copy_U8Size ){
	//LCD_VidSendCommand(LCD_8BDisplayClear);
	u8 i=0,j=0;
	//LCD_VidSendCommand(0x04+decrease);
	while(j<2){
    3498:	89 89       	ldd	r24, Y+17	; 0x11
    349a:	82 30       	cpi	r24, 0x02	; 2
    349c:	88 f3       	brcs	.-30     	; 0x3480 <LCD_VidMovingDraw+0x14c>
			}
		_delay_ms(3000);
	}
	j++;
	i=0;}
}
    349e:	65 96       	adiw	r28, 0x15	; 21
    34a0:	0f b6       	in	r0, 0x3f	; 63
    34a2:	f8 94       	cli
    34a4:	de bf       	out	0x3e, r29	; 62
    34a6:	0f be       	out	0x3f, r0	; 63
    34a8:	cd bf       	out	0x3d, r28	; 61
    34aa:	cf 91       	pop	r28
    34ac:	df 91       	pop	r29
    34ae:	08 95       	ret

000034b0 <LCD_VidPrintIntNumber>:
void LCD_VidPrintIntNumber(u32 Copy_U32Number){
    34b0:	ef 92       	push	r14
    34b2:	ff 92       	push	r15
    34b4:	0f 93       	push	r16
    34b6:	1f 93       	push	r17
    34b8:	df 93       	push	r29
    34ba:	cf 93       	push	r28
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
    34c0:	2d 97       	sbiw	r28, 0x0d	; 13
    34c2:	0f b6       	in	r0, 0x3f	; 63
    34c4:	f8 94       	cli
    34c6:	de bf       	out	0x3e, r29	; 62
    34c8:	0f be       	out	0x3f, r0	; 63
    34ca:	cd bf       	out	0x3d, r28	; 61
    34cc:	6a 87       	std	Y+10, r22	; 0x0a
    34ce:	7b 87       	std	Y+11, r23	; 0x0b
    34d0:	8c 87       	std	Y+12, r24	; 0x0c
    34d2:	9d 87       	std	Y+13, r25	; 0x0d
	u8 Local_U8Digit;
	u32 Local_U32Reminder=Copy_U32Number,Local_U32Reverse=0;
    34d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    34d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    34d8:	ac 85       	ldd	r26, Y+12	; 0x0c
    34da:	bd 85       	ldd	r27, Y+13	; 0x0d
    34dc:	8d 83       	std	Y+5, r24	; 0x05
    34de:	9e 83       	std	Y+6, r25	; 0x06
    34e0:	af 83       	std	Y+7, r26	; 0x07
    34e2:	b8 87       	std	Y+8, r27	; 0x08
    34e4:	19 82       	std	Y+1, r1	; 0x01
    34e6:	1a 82       	std	Y+2, r1	; 0x02
    34e8:	1b 82       	std	Y+3, r1	; 0x03
    34ea:	1c 82       	std	Y+4, r1	; 0x04
	for(Local_U8Digit=0;Local_U32Reminder;Local_U8Digit++){
    34ec:	19 86       	std	Y+9, r1	; 0x09
    34ee:	39 c0       	rjmp	.+114    	; 0x3562 <LCD_VidPrintIntNumber+0xb2>
		Local_U32Reverse=(Local_U32Reverse*10)+(Local_U32Reminder%10);
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	9a 81       	ldd	r25, Y+2	; 0x02
    34f4:	ab 81       	ldd	r26, Y+3	; 0x03
    34f6:	bc 81       	ldd	r27, Y+4	; 0x04
    34f8:	2a e0       	ldi	r18, 0x0A	; 10
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	40 e0       	ldi	r20, 0x00	; 0
    34fe:	50 e0       	ldi	r21, 0x00	; 0
    3500:	bc 01       	movw	r22, r24
    3502:	cd 01       	movw	r24, r26
    3504:	0e 94 0e 1c 	call	0x381c	; 0x381c <__mulsi3>
    3508:	7b 01       	movw	r14, r22
    350a:	8c 01       	movw	r16, r24
    350c:	8d 81       	ldd	r24, Y+5	; 0x05
    350e:	9e 81       	ldd	r25, Y+6	; 0x06
    3510:	af 81       	ldd	r26, Y+7	; 0x07
    3512:	b8 85       	ldd	r27, Y+8	; 0x08
    3514:	2a e0       	ldi	r18, 0x0A	; 10
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	40 e0       	ldi	r20, 0x00	; 0
    351a:	50 e0       	ldi	r21, 0x00	; 0
    351c:	bc 01       	movw	r22, r24
    351e:	cd 01       	movw	r24, r26
    3520:	0e 94 39 1c 	call	0x3872	; 0x3872 <__udivmodsi4>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	8e 0d       	add	r24, r14
    352a:	9f 1d       	adc	r25, r15
    352c:	a0 1f       	adc	r26, r16
    352e:	b1 1f       	adc	r27, r17
    3530:	89 83       	std	Y+1, r24	; 0x01
    3532:	9a 83       	std	Y+2, r25	; 0x02
    3534:	ab 83       	std	Y+3, r26	; 0x03
    3536:	bc 83       	std	Y+4, r27	; 0x04
		Local_U32Reminder/=10;}
    3538:	8d 81       	ldd	r24, Y+5	; 0x05
    353a:	9e 81       	ldd	r25, Y+6	; 0x06
    353c:	af 81       	ldd	r26, Y+7	; 0x07
    353e:	b8 85       	ldd	r27, Y+8	; 0x08
    3540:	2a e0       	ldi	r18, 0x0A	; 10
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	40 e0       	ldi	r20, 0x00	; 0
    3546:	50 e0       	ldi	r21, 0x00	; 0
    3548:	bc 01       	movw	r22, r24
    354a:	cd 01       	movw	r24, r26
    354c:	0e 94 39 1c 	call	0x3872	; 0x3872 <__udivmodsi4>
    3550:	da 01       	movw	r26, r20
    3552:	c9 01       	movw	r24, r18
    3554:	8d 83       	std	Y+5, r24	; 0x05
    3556:	9e 83       	std	Y+6, r25	; 0x06
    3558:	af 83       	std	Y+7, r26	; 0x07
    355a:	b8 87       	std	Y+8, r27	; 0x08
	i=0;}
}
void LCD_VidPrintIntNumber(u32 Copy_U32Number){
	u8 Local_U8Digit;
	u32 Local_U32Reminder=Copy_U32Number,Local_U32Reverse=0;
	for(Local_U8Digit=0;Local_U32Reminder;Local_U8Digit++){
    355c:	89 85       	ldd	r24, Y+9	; 0x09
    355e:	8f 5f       	subi	r24, 0xFF	; 255
    3560:	89 87       	std	Y+9, r24	; 0x09
    3562:	8d 81       	ldd	r24, Y+5	; 0x05
    3564:	9e 81       	ldd	r25, Y+6	; 0x06
    3566:	af 81       	ldd	r26, Y+7	; 0x07
    3568:	b8 85       	ldd	r27, Y+8	; 0x08
    356a:	00 97       	sbiw	r24, 0x00	; 0
    356c:	a1 05       	cpc	r26, r1
    356e:	b1 05       	cpc	r27, r1
    3570:	09 f0       	breq	.+2      	; 0x3574 <LCD_VidPrintIntNumber+0xc4>
    3572:	be cf       	rjmp	.-132    	; 0x34f0 <LCD_VidPrintIntNumber+0x40>
		Local_U32Reverse=(Local_U32Reverse*10)+(Local_U32Reminder%10);
		Local_U32Reminder/=10;}
	for(Local_U8Digit=0;Local_U32Reverse;Local_U8Digit++){
    3574:	19 86       	std	Y+9, r1	; 0x09
    3576:	26 c0       	rjmp	.+76     	; 0x35c4 <LCD_VidPrintIntNumber+0x114>
		LCD_VidSendData(Ascii_Zero+(Local_U32Reverse%10));
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	9a 81       	ldd	r25, Y+2	; 0x02
    357c:	ab 81       	ldd	r26, Y+3	; 0x03
    357e:	bc 81       	ldd	r27, Y+4	; 0x04
    3580:	2a e0       	ldi	r18, 0x0A	; 10
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	40 e0       	ldi	r20, 0x00	; 0
    3586:	50 e0       	ldi	r21, 0x00	; 0
    3588:	bc 01       	movw	r22, r24
    358a:	cd 01       	movw	r24, r26
    358c:	0e 94 39 1c 	call	0x3872	; 0x3872 <__udivmodsi4>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	80 5d       	subi	r24, 0xD0	; 208
    3596:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_VidSendData>
		Local_U32Reverse/=10;
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	9a 81       	ldd	r25, Y+2	; 0x02
    359e:	ab 81       	ldd	r26, Y+3	; 0x03
    35a0:	bc 81       	ldd	r27, Y+4	; 0x04
    35a2:	2a e0       	ldi	r18, 0x0A	; 10
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	40 e0       	ldi	r20, 0x00	; 0
    35a8:	50 e0       	ldi	r21, 0x00	; 0
    35aa:	bc 01       	movw	r22, r24
    35ac:	cd 01       	movw	r24, r26
    35ae:	0e 94 39 1c 	call	0x3872	; 0x3872 <__udivmodsi4>
    35b2:	da 01       	movw	r26, r20
    35b4:	c9 01       	movw	r24, r18
    35b6:	89 83       	std	Y+1, r24	; 0x01
    35b8:	9a 83       	std	Y+2, r25	; 0x02
    35ba:	ab 83       	std	Y+3, r26	; 0x03
    35bc:	bc 83       	std	Y+4, r27	; 0x04
	u8 Local_U8Digit;
	u32 Local_U32Reminder=Copy_U32Number,Local_U32Reverse=0;
	for(Local_U8Digit=0;Local_U32Reminder;Local_U8Digit++){
		Local_U32Reverse=(Local_U32Reverse*10)+(Local_U32Reminder%10);
		Local_U32Reminder/=10;}
	for(Local_U8Digit=0;Local_U32Reverse;Local_U8Digit++){
    35be:	89 85       	ldd	r24, Y+9	; 0x09
    35c0:	8f 5f       	subi	r24, 0xFF	; 255
    35c2:	89 87       	std	Y+9, r24	; 0x09
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	9a 81       	ldd	r25, Y+2	; 0x02
    35c8:	ab 81       	ldd	r26, Y+3	; 0x03
    35ca:	bc 81       	ldd	r27, Y+4	; 0x04
    35cc:	00 97       	sbiw	r24, 0x00	; 0
    35ce:	a1 05       	cpc	r26, r1
    35d0:	b1 05       	cpc	r27, r1
    35d2:	91 f6       	brne	.-92     	; 0x3578 <LCD_VidPrintIntNumber+0xc8>
		LCD_VidSendData(Ascii_Zero+(Local_U32Reverse%10));
		Local_U32Reverse/=10;
	}}
    35d4:	2d 96       	adiw	r28, 0x0d	; 13
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	de bf       	out	0x3e, r29	; 62
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	cf 91       	pop	r28
    35e2:	df 91       	pop	r29
    35e4:	1f 91       	pop	r17
    35e6:	0f 91       	pop	r16
    35e8:	ff 90       	pop	r15
    35ea:	ef 90       	pop	r14
    35ec:	08 95       	ret

000035ee <LCD_VidPrintFloatNumber>:

void LCD_VidPrintFloatNumber(f32 Copy_U32FNumber){
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	2c 97       	sbiw	r28, 0x0c	; 12
    35f8:	0f b6       	in	r0, 0x3f	; 63
    35fa:	f8 94       	cli
    35fc:	de bf       	out	0x3e, r29	; 62
    35fe:	0f be       	out	0x3f, r0	; 63
    3600:	cd bf       	out	0x3d, r28	; 61
    3602:	69 87       	std	Y+9, r22	; 0x09
    3604:	7a 87       	std	Y+10, r23	; 0x0a
    3606:	8b 87       	std	Y+11, r24	; 0x0b
    3608:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_U32IntNum=(u32)Copy_U32FNumber;
    360a:	69 85       	ldd	r22, Y+9	; 0x09
    360c:	7a 85       	ldd	r23, Y+10	; 0x0a
    360e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3610:	9c 85       	ldd	r25, Y+12	; 0x0c
    3612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	8d 83       	std	Y+5, r24	; 0x05
    361c:	9e 83       	std	Y+6, r25	; 0x06
    361e:	af 83       	std	Y+7, r26	; 0x07
    3620:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_U32FractionalNum=(Copy_U32FNumber-Local_U32IntNum)*10000;//to get five numbers after point
    3622:	6d 81       	ldd	r22, Y+5	; 0x05
    3624:	7e 81       	ldd	r23, Y+6	; 0x06
    3626:	8f 81       	ldd	r24, Y+7	; 0x07
    3628:	98 85       	ldd	r25, Y+8	; 0x08
    362a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    362e:	9b 01       	movw	r18, r22
    3630:	ac 01       	movw	r20, r24
    3632:	69 85       	ldd	r22, Y+9	; 0x09
    3634:	7a 85       	ldd	r23, Y+10	; 0x0a
    3636:	8b 85       	ldd	r24, Y+11	; 0x0b
    3638:	9c 85       	ldd	r25, Y+12	; 0x0c
    363a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    363e:	dc 01       	movw	r26, r24
    3640:	cb 01       	movw	r24, r22
    3642:	bc 01       	movw	r22, r24
    3644:	cd 01       	movw	r24, r26
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e4       	ldi	r19, 0x40	; 64
    364a:	4c e1       	ldi	r20, 0x1C	; 28
    364c:	56 e4       	ldi	r21, 0x46	; 70
    364e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	89 83       	std	Y+1, r24	; 0x01
    3664:	9a 83       	std	Y+2, r25	; 0x02
    3666:	ab 83       	std	Y+3, r26	; 0x03
    3668:	bc 83       	std	Y+4, r27	; 0x04
	LCD_VidPrintIntNumber(Local_U32IntNum);
    366a:	8d 81       	ldd	r24, Y+5	; 0x05
    366c:	9e 81       	ldd	r25, Y+6	; 0x06
    366e:	af 81       	ldd	r26, Y+7	; 0x07
    3670:	b8 85       	ldd	r27, Y+8	; 0x08
    3672:	bc 01       	movw	r22, r24
    3674:	cd 01       	movw	r24, r26
    3676:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <LCD_VidPrintIntNumber>
	LCD_VidSendData('.');
    367a:	8e e2       	ldi	r24, 0x2E	; 46
    367c:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_VidSendData>
	LCD_VidPrintIntNumber(Local_U32FractionalNum);
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	9a 81       	ldd	r25, Y+2	; 0x02
    3684:	ab 81       	ldd	r26, Y+3	; 0x03
    3686:	bc 81       	ldd	r27, Y+4	; 0x04
    3688:	bc 01       	movw	r22, r24
    368a:	cd 01       	movw	r24, r26
    368c:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <LCD_VidPrintIntNumber>
}
    3690:	2c 96       	adiw	r28, 0x0c	; 12
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	f8 94       	cli
    3696:	de bf       	out	0x3e, r29	; 62
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	cd bf       	out	0x3d, r28	; 61
    369c:	cf 91       	pop	r28
    369e:	df 91       	pop	r29
    36a0:	08 95       	ret

000036a2 <KPAD_VidInit>:
u8 Rowarr[]={r1,r2,r3,r4};
u8 colarr[]={c1,c2,c3,c4};


void KPAD_VidInit()
{
    36a2:	df 93       	push	r29
    36a4:	cf 93       	push	r28
    36a6:	cd b7       	in	r28, 0x3d	; 61
    36a8:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPortDirection(Key_Port,0xf0);
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	60 ef       	ldi	r22, 0xF0	; 240
    36ae:	0e 94 93 11 	call	0x2326	; 0x2326 <DIO_VidSetPortDirection>
	DIO_VidSetPortValue(Key_Port,0x0f);//to activate pull up resistance
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	6f e0       	ldi	r22, 0x0F	; 15
    36b6:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <DIO_VidSetPortValue>
}
    36ba:	cf 91       	pop	r28
    36bc:	df 91       	pop	r29
    36be:	08 95       	ret

000036c0 <KPAD_U8GetKey>:

u8 KPAD_U8GetKey(){
    36c0:	df 93       	push	r29
    36c2:	cf 93       	push	r28
    36c4:	00 d0       	rcall	.+0      	; 0x36c6 <KPAD_U8GetKey+0x6>
    36c6:	00 d0       	rcall	.+0      	; 0x36c8 <KPAD_U8GetKey+0x8>
    36c8:	cd b7       	in	r28, 0x3d	; 61
    36ca:	de b7       	in	r29, 0x3e	; 62
	u8 pressed=KEY_NOT_PRESSED;
    36cc:	1b 82       	std	Y+3, r1	; 0x03

	for(u8 c=0;c<4;c++){
    36ce:	1a 82       	std	Y+2, r1	; 0x02
    36d0:	5f c0       	rjmp	.+190    	; 0x3790 <KPAD_U8GetKey+0xd0>
		DIO_VidSetPinValue(Key_Port,colarr[c],Low);
    36d2:	8a 81       	ldd	r24, Y+2	; 0x02
    36d4:	88 2f       	mov	r24, r24
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	fc 01       	movw	r30, r24
    36da:	e4 58       	subi	r30, 0x84	; 132
    36dc:	fe 4f       	sbci	r31, 0xFE	; 254
    36de:	90 81       	ld	r25, Z
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	69 2f       	mov	r22, r25
    36e4:	40 e0       	ldi	r20, 0x00	; 0
    36e6:	0e 94 93 10 	call	0x2126	; 0x2126 <DIO_VidSetPinValue>
		for(u8 r=0;r<4;r++){
    36ea:	19 82       	std	Y+1, r1	; 0x01
    36ec:	3e c0       	rjmp	.+124    	; 0x376a <KPAD_U8GetKey+0xaa>
			if(!DIO_U8GetPinValue(Key_Port,Rowarr[r]))
    36ee:	89 81       	ldd	r24, Y+1	; 0x01
    36f0:	88 2f       	mov	r24, r24
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	fc 01       	movw	r30, r24
    36f6:	e8 58       	subi	r30, 0x88	; 136
    36f8:	fe 4f       	sbci	r31, 0xFE	; 254
    36fa:	90 81       	ld	r25, Z
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	69 2f       	mov	r22, r25
    3700:	0e 94 15 12 	call	0x242a	; 0x242a <DIO_U8GetPinValue>
    3704:	88 23       	and	r24, r24
    3706:	71 f5       	brne	.+92     	; 0x3764 <KPAD_U8GetKey+0xa4>
			{
				pressed=Kpadbtn[r][c];
    3708:	89 81       	ldd	r24, Y+1	; 0x01
    370a:	48 2f       	mov	r20, r24
    370c:	50 e0       	ldi	r21, 0x00	; 0
    370e:	8a 81       	ldd	r24, Y+2	; 0x02
    3710:	28 2f       	mov	r18, r24
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	ca 01       	movw	r24, r20
    3716:	88 0f       	add	r24, r24
    3718:	99 1f       	adc	r25, r25
    371a:	88 0f       	add	r24, r24
    371c:	99 1f       	adc	r25, r25
    371e:	82 0f       	add	r24, r18
    3720:	93 1f       	adc	r25, r19
    3722:	fc 01       	movw	r30, r24
    3724:	e8 59       	subi	r30, 0x98	; 152
    3726:	fe 4f       	sbci	r31, 0xFE	; 254
    3728:	80 81       	ld	r24, Z
    372a:	8b 83       	std	Y+3, r24	; 0x03
				while(!DIO_U8GetPinValue(Key_Port,Rowarr[r])){}
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	88 2f       	mov	r24, r24
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	fc 01       	movw	r30, r24
    3734:	e8 58       	subi	r30, 0x88	; 136
    3736:	fe 4f       	sbci	r31, 0xFE	; 254
    3738:	90 81       	ld	r25, Z
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	69 2f       	mov	r22, r25
    373e:	0e 94 15 12 	call	0x242a	; 0x242a <DIO_U8GetPinValue>
    3742:	88 23       	and	r24, r24
    3744:	99 f3       	breq	.-26     	; 0x372c <KPAD_U8GetKey+0x6c>
				DIO_VidSetPinValue(Key_Port,colarr[c],High);
    3746:	8a 81       	ldd	r24, Y+2	; 0x02
    3748:	88 2f       	mov	r24, r24
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	fc 01       	movw	r30, r24
    374e:	e4 58       	subi	r30, 0x84	; 132
    3750:	fe 4f       	sbci	r31, 0xFE	; 254
    3752:	90 81       	ld	r25, Z
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	69 2f       	mov	r22, r25
    3758:	41 e0       	ldi	r20, 0x01	; 1
    375a:	0e 94 93 10 	call	0x2126	; 0x2126 <DIO_VidSetPinValue>
				return pressed;
    375e:	8b 81       	ldd	r24, Y+3	; 0x03
    3760:	8c 83       	std	Y+4, r24	; 0x04
    3762:	1b c0       	rjmp	.+54     	; 0x379a <KPAD_U8GetKey+0xda>
u8 KPAD_U8GetKey(){
	u8 pressed=KEY_NOT_PRESSED;

	for(u8 c=0;c<4;c++){
		DIO_VidSetPinValue(Key_Port,colarr[c],Low);
		for(u8 r=0;r<4;r++){
    3764:	89 81       	ldd	r24, Y+1	; 0x01
    3766:	8f 5f       	subi	r24, 0xFF	; 255
    3768:	89 83       	std	Y+1, r24	; 0x01
    376a:	89 81       	ldd	r24, Y+1	; 0x01
    376c:	84 30       	cpi	r24, 0x04	; 4
    376e:	08 f4       	brcc	.+2      	; 0x3772 <KPAD_U8GetKey+0xb2>
    3770:	be cf       	rjmp	.-132    	; 0x36ee <KPAD_U8GetKey+0x2e>
				pressed=Kpadbtn[r][c];
				while(!DIO_U8GetPinValue(Key_Port,Rowarr[r])){}
				DIO_VidSetPinValue(Key_Port,colarr[c],High);
				return pressed;
			}else{}}
		DIO_VidSetPinValue(Key_Port,colarr[c],High);
    3772:	8a 81       	ldd	r24, Y+2	; 0x02
    3774:	88 2f       	mov	r24, r24
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	fc 01       	movw	r30, r24
    377a:	e4 58       	subi	r30, 0x84	; 132
    377c:	fe 4f       	sbci	r31, 0xFE	; 254
    377e:	90 81       	ld	r25, Z
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	69 2f       	mov	r22, r25
    3784:	41 e0       	ldi	r20, 0x01	; 1
    3786:	0e 94 93 10 	call	0x2126	; 0x2126 <DIO_VidSetPinValue>
}

u8 KPAD_U8GetKey(){
	u8 pressed=KEY_NOT_PRESSED;

	for(u8 c=0;c<4;c++){
    378a:	8a 81       	ldd	r24, Y+2	; 0x02
    378c:	8f 5f       	subi	r24, 0xFF	; 255
    378e:	8a 83       	std	Y+2, r24	; 0x02
    3790:	8a 81       	ldd	r24, Y+2	; 0x02
    3792:	84 30       	cpi	r24, 0x04	; 4
    3794:	08 f4       	brcc	.+2      	; 0x3798 <KPAD_U8GetKey+0xd8>
    3796:	9d cf       	rjmp	.-198    	; 0x36d2 <KPAD_U8GetKey+0x12>
				return pressed;
			}else{}}
		DIO_VidSetPinValue(Key_Port,colarr[c],High);
	}

return KEY_NOT_PRESSED;
    3798:	1c 82       	std	Y+4, r1	; 0x04
    379a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    379c:	0f 90       	pop	r0
    379e:	0f 90       	pop	r0
    37a0:	0f 90       	pop	r0
    37a2:	0f 90       	pop	r0
    37a4:	cf 91       	pop	r28
    37a6:	df 91       	pop	r29
    37a8:	08 95       	ret

000037aa <main>:

#if FUNC_TO_EXEC==DrawMan
#include"../MCAL/DIO/DIO_Interface.h"
#include"../HAL/KEYPAD/KPAD_Interface.h"
#include "../HAL/LCD/Lcd_Interface.h"
void main() {
    37aa:	df 93       	push	r29
    37ac:	cf 93       	push	r28
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	2d 97       	sbiw	r28, 0x0d	; 13
    37b4:	0f b6       	in	r0, 0x3f	; 63
    37b6:	f8 94       	cli
    37b8:	de bf       	out	0x3e, r29	; 62
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	cd bf       	out	0x3d, r28	; 61
	LCD_VidInit();
    37be:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <LCD_VidInit>
	KPAD_VidInit();
    37c2:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <KPAD_VidInit>
	u8 drawman[] = DRAWMAN;
    37c6:	ce 01       	movw	r24, r28
    37c8:	01 96       	adiw	r24, 0x01	; 1
    37ca:	9a 87       	std	Y+10, r25	; 0x0a
    37cc:	89 87       	std	Y+9, r24	; 0x09
    37ce:	e0 e8       	ldi	r30, 0x80	; 128
    37d0:	f1 e0       	ldi	r31, 0x01	; 1
    37d2:	fc 87       	std	Y+12, r31	; 0x0c
    37d4:	eb 87       	std	Y+11, r30	; 0x0b
    37d6:	f8 e0       	ldi	r31, 0x08	; 8
    37d8:	fd 87       	std	Y+13, r31	; 0x0d
    37da:	eb 85       	ldd	r30, Y+11	; 0x0b
    37dc:	fc 85       	ldd	r31, Y+12	; 0x0c
    37de:	00 80       	ld	r0, Z
    37e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    37e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    37e4:	01 96       	adiw	r24, 0x01	; 1
    37e6:	9c 87       	std	Y+12, r25	; 0x0c
    37e8:	8b 87       	std	Y+11, r24	; 0x0b
    37ea:	e9 85       	ldd	r30, Y+9	; 0x09
    37ec:	fa 85       	ldd	r31, Y+10	; 0x0a
    37ee:	00 82       	st	Z, r0
    37f0:	89 85       	ldd	r24, Y+9	; 0x09
    37f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37f4:	01 96       	adiw	r24, 0x01	; 1
    37f6:	9a 87       	std	Y+10, r25	; 0x0a
    37f8:	89 87       	std	Y+9, r24	; 0x09
    37fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    37fc:	91 50       	subi	r25, 0x01	; 1
    37fe:	9d 87       	std	Y+13, r25	; 0x0d
    3800:	ed 85       	ldd	r30, Y+13	; 0x0d
    3802:	ee 23       	and	r30, r30
    3804:	51 f7       	brne	.-44     	; 0x37da <main+0x30>
	LCD_VidDraw(drawman, 4);
    3806:	ce 01       	movw	r24, r28
    3808:	01 96       	adiw	r24, 0x01	; 1
    380a:	64 e0       	ldi	r22, 0x04	; 4
    380c:	0e 94 3c 19 	call	0x3278	; 0x3278 <LCD_VidDraw>
	LCD_VidMovingDraw(drawman, 4);
    3810:	ce 01       	movw	r24, r28
    3812:	01 96       	adiw	r24, 0x01	; 1
    3814:	64 e0       	ldi	r22, 0x04	; 4
    3816:	0e 94 9a 19 	call	0x3334	; 0x3334 <LCD_VidMovingDraw>
    381a:	ff cf       	rjmp	.-2      	; 0x381a <main+0x70>

0000381c <__mulsi3>:
    381c:	62 9f       	mul	r22, r18
    381e:	d0 01       	movw	r26, r0
    3820:	73 9f       	mul	r23, r19
    3822:	f0 01       	movw	r30, r0
    3824:	82 9f       	mul	r24, r18
    3826:	e0 0d       	add	r30, r0
    3828:	f1 1d       	adc	r31, r1
    382a:	64 9f       	mul	r22, r20
    382c:	e0 0d       	add	r30, r0
    382e:	f1 1d       	adc	r31, r1
    3830:	92 9f       	mul	r25, r18
    3832:	f0 0d       	add	r31, r0
    3834:	83 9f       	mul	r24, r19
    3836:	f0 0d       	add	r31, r0
    3838:	74 9f       	mul	r23, r20
    383a:	f0 0d       	add	r31, r0
    383c:	65 9f       	mul	r22, r21
    383e:	f0 0d       	add	r31, r0
    3840:	99 27       	eor	r25, r25
    3842:	72 9f       	mul	r23, r18
    3844:	b0 0d       	add	r27, r0
    3846:	e1 1d       	adc	r30, r1
    3848:	f9 1f       	adc	r31, r25
    384a:	63 9f       	mul	r22, r19
    384c:	b0 0d       	add	r27, r0
    384e:	e1 1d       	adc	r30, r1
    3850:	f9 1f       	adc	r31, r25
    3852:	bd 01       	movw	r22, r26
    3854:	cf 01       	movw	r24, r30
    3856:	11 24       	eor	r1, r1
    3858:	08 95       	ret

0000385a <__udivmodqi4>:
    385a:	99 1b       	sub	r25, r25
    385c:	79 e0       	ldi	r23, 0x09	; 9
    385e:	04 c0       	rjmp	.+8      	; 0x3868 <__udivmodqi4_ep>

00003860 <__udivmodqi4_loop>:
    3860:	99 1f       	adc	r25, r25
    3862:	96 17       	cp	r25, r22
    3864:	08 f0       	brcs	.+2      	; 0x3868 <__udivmodqi4_ep>
    3866:	96 1b       	sub	r25, r22

00003868 <__udivmodqi4_ep>:
    3868:	88 1f       	adc	r24, r24
    386a:	7a 95       	dec	r23
    386c:	c9 f7       	brne	.-14     	; 0x3860 <__udivmodqi4_loop>
    386e:	80 95       	com	r24
    3870:	08 95       	ret

00003872 <__udivmodsi4>:
    3872:	a1 e2       	ldi	r26, 0x21	; 33
    3874:	1a 2e       	mov	r1, r26
    3876:	aa 1b       	sub	r26, r26
    3878:	bb 1b       	sub	r27, r27
    387a:	fd 01       	movw	r30, r26
    387c:	0d c0       	rjmp	.+26     	; 0x3898 <__udivmodsi4_ep>

0000387e <__udivmodsi4_loop>:
    387e:	aa 1f       	adc	r26, r26
    3880:	bb 1f       	adc	r27, r27
    3882:	ee 1f       	adc	r30, r30
    3884:	ff 1f       	adc	r31, r31
    3886:	a2 17       	cp	r26, r18
    3888:	b3 07       	cpc	r27, r19
    388a:	e4 07       	cpc	r30, r20
    388c:	f5 07       	cpc	r31, r21
    388e:	20 f0       	brcs	.+8      	; 0x3898 <__udivmodsi4_ep>
    3890:	a2 1b       	sub	r26, r18
    3892:	b3 0b       	sbc	r27, r19
    3894:	e4 0b       	sbc	r30, r20
    3896:	f5 0b       	sbc	r31, r21

00003898 <__udivmodsi4_ep>:
    3898:	66 1f       	adc	r22, r22
    389a:	77 1f       	adc	r23, r23
    389c:	88 1f       	adc	r24, r24
    389e:	99 1f       	adc	r25, r25
    38a0:	1a 94       	dec	r1
    38a2:	69 f7       	brne	.-38     	; 0x387e <__udivmodsi4_loop>
    38a4:	60 95       	com	r22
    38a6:	70 95       	com	r23
    38a8:	80 95       	com	r24
    38aa:	90 95       	com	r25
    38ac:	9b 01       	movw	r18, r22
    38ae:	ac 01       	movw	r20, r24
    38b0:	bd 01       	movw	r22, r26
    38b2:	cf 01       	movw	r24, r30
    38b4:	08 95       	ret

000038b6 <__divmodsi4>:
    38b6:	97 fb       	bst	r25, 7
    38b8:	09 2e       	mov	r0, r25
    38ba:	05 26       	eor	r0, r21
    38bc:	0e d0       	rcall	.+28     	; 0x38da <__divmodsi4_neg1>
    38be:	57 fd       	sbrc	r21, 7
    38c0:	04 d0       	rcall	.+8      	; 0x38ca <__divmodsi4_neg2>
    38c2:	d7 df       	rcall	.-82     	; 0x3872 <__udivmodsi4>
    38c4:	0a d0       	rcall	.+20     	; 0x38da <__divmodsi4_neg1>
    38c6:	00 1c       	adc	r0, r0
    38c8:	38 f4       	brcc	.+14     	; 0x38d8 <__divmodsi4_exit>

000038ca <__divmodsi4_neg2>:
    38ca:	50 95       	com	r21
    38cc:	40 95       	com	r20
    38ce:	30 95       	com	r19
    38d0:	21 95       	neg	r18
    38d2:	3f 4f       	sbci	r19, 0xFF	; 255
    38d4:	4f 4f       	sbci	r20, 0xFF	; 255
    38d6:	5f 4f       	sbci	r21, 0xFF	; 255

000038d8 <__divmodsi4_exit>:
    38d8:	08 95       	ret

000038da <__divmodsi4_neg1>:
    38da:	f6 f7       	brtc	.-4      	; 0x38d8 <__divmodsi4_exit>
    38dc:	90 95       	com	r25
    38de:	80 95       	com	r24
    38e0:	70 95       	com	r23
    38e2:	61 95       	neg	r22
    38e4:	7f 4f       	sbci	r23, 0xFF	; 255
    38e6:	8f 4f       	sbci	r24, 0xFF	; 255
    38e8:	9f 4f       	sbci	r25, 0xFF	; 255
    38ea:	08 95       	ret

000038ec <__prologue_saves__>:
    38ec:	2f 92       	push	r2
    38ee:	3f 92       	push	r3
    38f0:	4f 92       	push	r4
    38f2:	5f 92       	push	r5
    38f4:	6f 92       	push	r6
    38f6:	7f 92       	push	r7
    38f8:	8f 92       	push	r8
    38fa:	9f 92       	push	r9
    38fc:	af 92       	push	r10
    38fe:	bf 92       	push	r11
    3900:	cf 92       	push	r12
    3902:	df 92       	push	r13
    3904:	ef 92       	push	r14
    3906:	ff 92       	push	r15
    3908:	0f 93       	push	r16
    390a:	1f 93       	push	r17
    390c:	cf 93       	push	r28
    390e:	df 93       	push	r29
    3910:	cd b7       	in	r28, 0x3d	; 61
    3912:	de b7       	in	r29, 0x3e	; 62
    3914:	ca 1b       	sub	r28, r26
    3916:	db 0b       	sbc	r29, r27
    3918:	0f b6       	in	r0, 0x3f	; 63
    391a:	f8 94       	cli
    391c:	de bf       	out	0x3e, r29	; 62
    391e:	0f be       	out	0x3f, r0	; 63
    3920:	cd bf       	out	0x3d, r28	; 61
    3922:	09 94       	ijmp

00003924 <__epilogue_restores__>:
    3924:	2a 88       	ldd	r2, Y+18	; 0x12
    3926:	39 88       	ldd	r3, Y+17	; 0x11
    3928:	48 88       	ldd	r4, Y+16	; 0x10
    392a:	5f 84       	ldd	r5, Y+15	; 0x0f
    392c:	6e 84       	ldd	r6, Y+14	; 0x0e
    392e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3930:	8c 84       	ldd	r8, Y+12	; 0x0c
    3932:	9b 84       	ldd	r9, Y+11	; 0x0b
    3934:	aa 84       	ldd	r10, Y+10	; 0x0a
    3936:	b9 84       	ldd	r11, Y+9	; 0x09
    3938:	c8 84       	ldd	r12, Y+8	; 0x08
    393a:	df 80       	ldd	r13, Y+7	; 0x07
    393c:	ee 80       	ldd	r14, Y+6	; 0x06
    393e:	fd 80       	ldd	r15, Y+5	; 0x05
    3940:	0c 81       	ldd	r16, Y+4	; 0x04
    3942:	1b 81       	ldd	r17, Y+3	; 0x03
    3944:	aa 81       	ldd	r26, Y+2	; 0x02
    3946:	b9 81       	ldd	r27, Y+1	; 0x01
    3948:	ce 0f       	add	r28, r30
    394a:	d1 1d       	adc	r29, r1
    394c:	0f b6       	in	r0, 0x3f	; 63
    394e:	f8 94       	cli
    3950:	de bf       	out	0x3e, r29	; 62
    3952:	0f be       	out	0x3f, r0	; 63
    3954:	cd bf       	out	0x3d, r28	; 61
    3956:	ed 01       	movw	r28, r26
    3958:	08 95       	ret

0000395a <_exit>:
    395a:	f8 94       	cli

0000395c <__stop_program>:
    395c:	ff cf       	rjmp	.-2      	; 0x395c <__stop_program>
